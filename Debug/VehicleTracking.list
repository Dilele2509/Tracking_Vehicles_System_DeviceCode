
VehicleTracking.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a62c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bcc  0800a740  0800a740  0000b740  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b30c  0800b30c  0000d1fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800b30c  0800b30c  0000c30c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b314  0800b314  0000d1fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b314  0800b314  0000c314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b318  0800b318  0000c318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001fc  20000000  0800b31c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a20  200001fc  0800b518  0000d1fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c1c  0800b518  0000dc1c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a1bd  00000000  00000000  0000d225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ead  00000000  00000000  000173e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008d0  00000000  00000000  00019290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000006c7  00000000  00000000  00019b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018657  00000000  00000000  0001a227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b5dc  00000000  00000000  0003287e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000852cf  00000000  00000000  0003de5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c3129  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c34  00000000  00000000  000c316c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000c6da0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001fc 	.word	0x200001fc
 800012c:	00000000 	.word	0x00000000
 8000130:	0800a724 	.word	0x0800a724

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000200 	.word	0x20000200
 800014c:	0800a724 	.word	0x0800a724

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_f2iz>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001118:	d30f      	bcc.n	800113a <__aeabi_f2iz+0x2a>
 800111a:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800111e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001122:	d90d      	bls.n	8001140 <__aeabi_f2iz+0x30>
 8001124:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001128:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800112c:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8001130:	fa23 f002 	lsr.w	r0, r3, r2
 8001134:	bf18      	it	ne
 8001136:	4240      	negne	r0, r0
 8001138:	4770      	bx	lr
 800113a:	f04f 0000 	mov.w	r0, #0
 800113e:	4770      	bx	lr
 8001140:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001144:	d101      	bne.n	800114a <__aeabi_f2iz+0x3a>
 8001146:	0242      	lsls	r2, r0, #9
 8001148:	d105      	bne.n	8001156 <__aeabi_f2iz+0x46>
 800114a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800114e:	bf08      	it	eq
 8001150:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8001154:	4770      	bx	lr
 8001156:	f04f 0000 	mov.w	r0, #0
 800115a:	4770      	bx	lr

0800115c <__aeabi_d2lz>:
 800115c:	b538      	push	{r3, r4, r5, lr}
 800115e:	2200      	movs	r2, #0
 8001160:	2300      	movs	r3, #0
 8001162:	4604      	mov	r4, r0
 8001164:	460d      	mov	r5, r1
 8001166:	f7ff fc29 	bl	80009bc <__aeabi_dcmplt>
 800116a:	b928      	cbnz	r0, 8001178 <__aeabi_d2lz+0x1c>
 800116c:	4620      	mov	r0, r4
 800116e:	4629      	mov	r1, r5
 8001170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001174:	f000 b80a 	b.w	800118c <__aeabi_d2ulz>
 8001178:	4620      	mov	r0, r4
 800117a:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 800117e:	f000 f805 	bl	800118c <__aeabi_d2ulz>
 8001182:	4240      	negs	r0, r0
 8001184:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001188:	bd38      	pop	{r3, r4, r5, pc}
 800118a:	bf00      	nop

0800118c <__aeabi_d2ulz>:
 800118c:	b5d0      	push	{r4, r6, r7, lr}
 800118e:	2200      	movs	r2, #0
 8001190:	4b0b      	ldr	r3, [pc, #44]	@ (80011c0 <__aeabi_d2ulz+0x34>)
 8001192:	4606      	mov	r6, r0
 8001194:	460f      	mov	r7, r1
 8001196:	f7ff f99f 	bl	80004d8 <__aeabi_dmul>
 800119a:	f7ff fc75 	bl	8000a88 <__aeabi_d2uiz>
 800119e:	4604      	mov	r4, r0
 80011a0:	f7ff f920 	bl	80003e4 <__aeabi_ui2d>
 80011a4:	2200      	movs	r2, #0
 80011a6:	4b07      	ldr	r3, [pc, #28]	@ (80011c4 <__aeabi_d2ulz+0x38>)
 80011a8:	f7ff f996 	bl	80004d8 <__aeabi_dmul>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	4630      	mov	r0, r6
 80011b2:	4639      	mov	r1, r7
 80011b4:	f7fe ffd8 	bl	8000168 <__aeabi_dsub>
 80011b8:	f7ff fc66 	bl	8000a88 <__aeabi_d2uiz>
 80011bc:	4621      	mov	r1, r4
 80011be:	bdd0      	pop	{r4, r6, r7, pc}
 80011c0:	3df00000 	.word	0x3df00000
 80011c4:	41f00000 	.word	0x41f00000

080011c8 <HAL_UART_RxCpltCallback>:

/*
 * UART interupt function
 * */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
	if (huart == gps.huart)
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <HAL_UART_RxCpltCallback+0x20>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	687a      	ldr	r2, [r7, #4]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d102      	bne.n	80011e0 <HAL_UART_RxCpltCallback+0x18>
	{
		GPS_UART_CallBack(&gps);
 80011da:	4803      	ldr	r0, [pc, #12]	@ (80011e8 <HAL_UART_RxCpltCallback+0x20>)
 80011dc:	f000 fc3e 	bl	8001a5c <GPS_UART_CallBack>
	}
}
 80011e0:	bf00      	nop
 80011e2:	3708      	adds	r7, #8
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	200002ec 	.word	0x200002ec

080011ec <HAL_UARTEx_RxEventCallback>:

/*
 * UART DMA Callback function
 * */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	807b      	strh	r3, [r7, #2]
	SIM_UART_DMA_CallBack(&sim);
 80011f8:	4803      	ldr	r0, [pc, #12]	@ (8001208 <HAL_UARTEx_RxEventCallback+0x1c>)
 80011fa:	f000 ff7d 	bl	80020f8 <SIM_UART_DMA_CallBack>
}
 80011fe:	bf00      	nop
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000034c 	.word	0x2000034c

0800120c <PostDataToServer>:

char DataToPost[200];
float Latitude, Longitude, Speed, Satelites;

void PostDataToServer()
{
 800120c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001210:	b084      	sub	sp, #16
 8001212:	af04      	add	r7, sp, #16
	printf("Post data to servers\r\n");
 8001214:	482d      	ldr	r0, [pc, #180]	@ (80012cc <PostDataToServer+0xc0>)
 8001216:	f006 f933 	bl	8007480 <puts>

	memset(DataToPost, 0, sizeof(DataToPost));
 800121a:	22c8      	movs	r2, #200	@ 0xc8
 800121c:	2100      	movs	r1, #0
 800121e:	482c      	ldr	r0, [pc, #176]	@ (80012d0 <PostDataToServer+0xc4>)
 8001220:	f006 f948 	bl	80074b4 <memset>

//	Latitude = gps.dec_latitude;
//	Longitude = gps.dec_longitude;
//	Speed = gps.

	Latitude = getLatitude(&gps);
 8001224:	482b      	ldr	r0, [pc, #172]	@ (80012d4 <PostDataToServer+0xc8>)
 8001226:	f000 fe89 	bl	8001f3c <getLatitude>
 800122a:	4603      	mov	r3, r0
 800122c:	4a2a      	ldr	r2, [pc, #168]	@ (80012d8 <PostDataToServer+0xcc>)
 800122e:	6013      	str	r3, [r2, #0]
	Longitude = getLongitude(&gps);
 8001230:	4828      	ldr	r0, [pc, #160]	@ (80012d4 <PostDataToServer+0xc8>)
 8001232:	f000 fe8e 	bl	8001f52 <getLongitude>
 8001236:	4603      	mov	r3, r0
 8001238:	4a28      	ldr	r2, [pc, #160]	@ (80012dc <PostDataToServer+0xd0>)
 800123a:	6013      	str	r3, [r2, #0]
	Speed = getSpeed(&gps);
 800123c:	4825      	ldr	r0, [pc, #148]	@ (80012d4 <PostDataToServer+0xc8>)
 800123e:	f000 fe93 	bl	8001f68 <getSpeed>
 8001242:	4603      	mov	r3, r0
 8001244:	4a26      	ldr	r2, [pc, #152]	@ (80012e0 <PostDataToServer+0xd4>)
 8001246:	6013      	str	r3, [r2, #0]
	if (Speed < 1) Speed = 0;
 8001248:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <PostDataToServer+0xd4>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8001250:	4618      	mov	r0, r3
 8001252:	f7ff ff35 	bl	80010c0 <__aeabi_fcmplt>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d003      	beq.n	8001264 <PostDataToServer+0x58>
 800125c:	4b20      	ldr	r3, [pc, #128]	@ (80012e0 <PostDataToServer+0xd4>)
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	601a      	str	r2, [r3, #0]

	sprintf(DataToPost, "{\"device_id\":\"VH00001\",\"latitude\":%.6f,\"longitude\":%.6f,\"date\": null,\"time\": null,\"RSSI\": 44,\"speed\": %.1f}",
 8001264:	4b1c      	ldr	r3, [pc, #112]	@ (80012d8 <PostDataToServer+0xcc>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff f8dd 	bl	8000428 <__aeabi_f2d>
 800126e:	4680      	mov	r8, r0
 8001270:	4689      	mov	r9, r1
 8001272:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <PostDataToServer+0xd0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f8d6 	bl	8000428 <__aeabi_f2d>
 800127c:	4604      	mov	r4, r0
 800127e:	460d      	mov	r5, r1
 8001280:	4b17      	ldr	r3, [pc, #92]	@ (80012e0 <PostDataToServer+0xd4>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f8cf 	bl	8000428 <__aeabi_f2d>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
 800128e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001292:	e9cd 4500 	strd	r4, r5, [sp]
 8001296:	4642      	mov	r2, r8
 8001298:	464b      	mov	r3, r9
 800129a:	4912      	ldr	r1, [pc, #72]	@ (80012e4 <PostDataToServer+0xd8>)
 800129c:	480c      	ldr	r0, [pc, #48]	@ (80012d0 <PostDataToServer+0xc4>)
 800129e:	f005 f8b7 	bl	8006410 <siprintf>
			Latitude,		   // S0: Kinh độ
			Longitude,		   // S1: Vĩ độ
			Speed);


	if (http_post(&sim, API_POST_DATA, DataToPost) == SIM7600_OK)
 80012a2:	4a0b      	ldr	r2, [pc, #44]	@ (80012d0 <PostDataToServer+0xc4>)
 80012a4:	4910      	ldr	r1, [pc, #64]	@ (80012e8 <PostDataToServer+0xdc>)
 80012a6:	4811      	ldr	r0, [pc, #68]	@ (80012ec <PostDataToServer+0xe0>)
 80012a8:	f001 fce6 	bl	8002c78 <http_post>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d104      	bne.n	80012bc <PostDataToServer+0xb0>
	{

		printf("Post data (%s) to server completed\r\n", DataToPost);
 80012b2:	4907      	ldr	r1, [pc, #28]	@ (80012d0 <PostDataToServer+0xc4>)
 80012b4:	480e      	ldr	r0, [pc, #56]	@ (80012f0 <PostDataToServer+0xe4>)
 80012b6:	f006 f87b 	bl	80073b0 <iprintf>
	else
	{
		printf("Post data to server fail\r\n");
	}
//	HAL_Delay(1000);
}
 80012ba:	e002      	b.n	80012c2 <PostDataToServer+0xb6>
		printf("Post data to server fail\r\n");
 80012bc:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <PostDataToServer+0xe8>)
 80012be:	f006 f8df 	bl	8007480 <puts>
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80012ca:	bf00      	nop
 80012cc:	0800a740 	.word	0x0800a740
 80012d0:	2000096c 	.word	0x2000096c
 80012d4:	200002ec 	.word	0x200002ec
 80012d8:	20000a34 	.word	0x20000a34
 80012dc:	20000a38 	.word	0x20000a38
 80012e0:	20000a3c 	.word	0x20000a3c
 80012e4:	0800a758 	.word	0x0800a758
 80012e8:	0800a7c4 	.word	0x0800a7c4
 80012ec:	2000034c 	.word	0x2000034c
 80012f0:	0800a7f4 	.word	0x0800a7f4
 80012f4:	0800a81c 	.word	0x0800a81c

080012f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012fe:	f001 ff39 	bl	8003174 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001302:	f000 f82d 	bl	8001360 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001306:	f000 f8df 	bl	80014c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800130a:	f000 f8bf 	bl	800148c <MX_DMA_Init>
  MX_USART1_UART_Init();
 800130e:	f000 f869 	bl	80013e4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001312:	f000 f891 	bl	8001438 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  GPS_Init(&gps, &huart2);
 8001316:	490c      	ldr	r1, [pc, #48]	@ (8001348 <main+0x50>)
 8001318:	480c      	ldr	r0, [pc, #48]	@ (800134c <main+0x54>)
 800131a:	f000 fb87 	bl	8001a2c <GPS_Init>

  SIMInit(&sim,
 800131e:	4b0c      	ldr	r3, [pc, #48]	@ (8001350 <main+0x58>)
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001326:	4a0b      	ldr	r2, [pc, #44]	@ (8001354 <main+0x5c>)
 8001328:	490b      	ldr	r1, [pc, #44]	@ (8001358 <main+0x60>)
 800132a:	480c      	ldr	r0, [pc, #48]	@ (800135c <main+0x64>)
 800132c:	f001 f826 	bl	800237c <SIMInit>
  {

//		CheckSimConnect(&sim);
//		GetSignal(&sim);

	  	  PostDataToServer();
 8001330:	f7ff ff6c 	bl	800120c <PostDataToServer>
	  	GetSignal(&sim);
 8001334:	4809      	ldr	r0, [pc, #36]	@ (800135c <main+0x64>)
 8001336:	f001 faad 	bl	8002894 <GetSignal>

	  	  HAL_Delay(5000);
 800133a:	f241 3088 	movw	r0, #5000	@ 0x1388
 800133e:	f001 ff7b 	bl	8003238 <HAL_Delay>
	  	  PostDataToServer();
 8001342:	bf00      	nop
 8001344:	e7f4      	b.n	8001330 <main+0x38>
 8001346:	bf00      	nop
 8001348:	20000260 	.word	0x20000260
 800134c:	200002ec 	.word	0x200002ec
 8001350:	40010c00 	.word	0x40010c00
 8001354:	200002a8 	.word	0x200002a8
 8001358:	20000218 	.word	0x20000218
 800135c:	2000034c 	.word	0x2000034c

08001360 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b090      	sub	sp, #64	@ 0x40
 8001364:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001366:	f107 0318 	add.w	r3, r7, #24
 800136a:	2228      	movs	r2, #40	@ 0x28
 800136c:	2100      	movs	r1, #0
 800136e:	4618      	mov	r0, r3
 8001370:	f006 f8a0 	bl	80074b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001382:	2302      	movs	r3, #2
 8001384:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001386:	2301      	movs	r3, #1
 8001388:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800138a:	2310      	movs	r3, #16
 800138c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800138e:	2302      	movs	r3, #2
 8001390:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001392:	2300      	movs	r3, #0
 8001394:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001396:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800139a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800139c:	f107 0318 	add.w	r3, r7, #24
 80013a0:	4618      	mov	r0, r3
 80013a2:	f002 fcb9 	bl	8003d18 <HAL_RCC_OscConfig>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80013ac:	f000 f8cc 	bl	8001548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b0:	230f      	movs	r3, #15
 80013b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013b4:	2302      	movs	r3, #2
 80013b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013bc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013c6:	1d3b      	adds	r3, r7, #4
 80013c8:	2102      	movs	r1, #2
 80013ca:	4618      	mov	r0, r3
 80013cc:	f002 ff26 	bl	800421c <HAL_RCC_ClockConfig>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80013d6:	f000 f8b7 	bl	8001548 <Error_Handler>
  }
}
 80013da:	bf00      	nop
 80013dc:	3740      	adds	r7, #64	@ 0x40
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
	...

080013e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80013e8:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 80013ea:	4a12      	ldr	r2, [pc, #72]	@ (8001434 <MX_USART1_UART_Init+0x50>)
 80013ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80013ee:	4b10      	ldr	r3, [pc, #64]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80013f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80013fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 80013fe:	2200      	movs	r2, #0
 8001400:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001402:	4b0b      	ldr	r3, [pc, #44]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 8001404:	2200      	movs	r2, #0
 8001406:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001408:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 800140a:	220c      	movs	r2, #12
 800140c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	4b08      	ldr	r3, [pc, #32]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001414:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 8001416:	2200      	movs	r2, #0
 8001418:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800141a:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_USART1_UART_Init+0x4c>)
 800141c:	f003 f88c 	bl	8004538 <HAL_UART_Init>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001426:	f000 f88f 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	20000218 	.word	0x20000218
 8001434:	40013800 	.word	0x40013800

08001438 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800143c:	4b11      	ldr	r3, [pc, #68]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 800143e:	4a12      	ldr	r2, [pc, #72]	@ (8001488 <MX_USART2_UART_Init+0x50>)
 8001440:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001442:	4b10      	ldr	r3, [pc, #64]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001444:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001448:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800144a:	4b0e      	ldr	r3, [pc, #56]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001450:	4b0c      	ldr	r3, [pc, #48]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001452:	2200      	movs	r2, #0
 8001454:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001456:	4b0b      	ldr	r3, [pc, #44]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001458:	2200      	movs	r2, #0
 800145a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800145c:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 800145e:	220c      	movs	r2, #12
 8001460:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001462:	4b08      	ldr	r3, [pc, #32]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001464:	2200      	movs	r2, #0
 8001466:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001468:	4b06      	ldr	r3, [pc, #24]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 800146a:	2200      	movs	r2, #0
 800146c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800146e:	4805      	ldr	r0, [pc, #20]	@ (8001484 <MX_USART2_UART_Init+0x4c>)
 8001470:	f003 f862 	bl	8004538 <HAL_UART_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800147a:	f000 f865 	bl	8001548 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000260 	.word	0x20000260
 8001488:	40004400 	.word	0x40004400

0800148c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001492:	4b0c      	ldr	r3, [pc, #48]	@ (80014c4 <MX_DMA_Init+0x38>)
 8001494:	695b      	ldr	r3, [r3, #20]
 8001496:	4a0b      	ldr	r2, [pc, #44]	@ (80014c4 <MX_DMA_Init+0x38>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6153      	str	r3, [r2, #20]
 800149e:	4b09      	ldr	r3, [pc, #36]	@ (80014c4 <MX_DMA_Init+0x38>)
 80014a0:	695b      	ldr	r3, [r3, #20]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	607b      	str	r3, [r7, #4]
 80014a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80014aa:	2200      	movs	r2, #0
 80014ac:	2100      	movs	r1, #0
 80014ae:	200f      	movs	r0, #15
 80014b0:	f001 ffbd 	bl	800342e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80014b4:	200f      	movs	r0, #15
 80014b6:	f001 ffd6 	bl	8003466 <HAL_NVIC_EnableIRQ>

}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	40021000 	.word	0x40021000

080014c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
 80014d8:	609a      	str	r2, [r3, #8]
 80014da:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014dc:	4b18      	ldr	r3, [pc, #96]	@ (8001540 <MX_GPIO_Init+0x78>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	4a17      	ldr	r2, [pc, #92]	@ (8001540 <MX_GPIO_Init+0x78>)
 80014e2:	f043 0304 	orr.w	r3, r3, #4
 80014e6:	6193      	str	r3, [r2, #24]
 80014e8:	4b15      	ldr	r3, [pc, #84]	@ (8001540 <MX_GPIO_Init+0x78>)
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	f003 0304 	and.w	r3, r3, #4
 80014f0:	607b      	str	r3, [r7, #4]
 80014f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <MX_GPIO_Init+0x78>)
 80014f6:	699b      	ldr	r3, [r3, #24]
 80014f8:	4a11      	ldr	r2, [pc, #68]	@ (8001540 <MX_GPIO_Init+0x78>)
 80014fa:	f043 0308 	orr.w	r3, r3, #8
 80014fe:	6193      	str	r3, [r2, #24]
 8001500:	4b0f      	ldr	r3, [pc, #60]	@ (8001540 <MX_GPIO_Init+0x78>)
 8001502:	699b      	ldr	r3, [r3, #24]
 8001504:	f003 0308 	and.w	r3, r3, #8
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SIM_RST_GPIO_Port, SIM_RST_Pin, GPIO_PIN_RESET);
 800150c:	2200      	movs	r2, #0
 800150e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001512:	480c      	ldr	r0, [pc, #48]	@ (8001544 <MX_GPIO_Init+0x7c>)
 8001514:	f002 fbe8 	bl	8003ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SIM_RST_Pin */
  GPIO_InitStruct.Pin = SIM_RST_Pin;
 8001518:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800151c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151e:	2301      	movs	r3, #1
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001526:	2302      	movs	r3, #2
 8001528:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SIM_RST_GPIO_Port, &GPIO_InitStruct);
 800152a:	f107 0308 	add.w	r3, r7, #8
 800152e:	4619      	mov	r1, r3
 8001530:	4804      	ldr	r0, [pc, #16]	@ (8001544 <MX_GPIO_Init+0x7c>)
 8001532:	f002 fa55 	bl	80039e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001536:	bf00      	nop
 8001538:	3718      	adds	r7, #24
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40021000 	.word	0x40021000
 8001544:	40010c00 	.word	0x40010c00

08001548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800154c:	b672      	cpsid	i
}
 800154e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001550:	bf00      	nop
 8001552:	e7fd      	b.n	8001550 <Error_Handler+0x8>

08001554 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800155a:	4b15      	ldr	r3, [pc, #84]	@ (80015b0 <HAL_MspInit+0x5c>)
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	4a14      	ldr	r2, [pc, #80]	@ (80015b0 <HAL_MspInit+0x5c>)
 8001560:	f043 0301 	orr.w	r3, r3, #1
 8001564:	6193      	str	r3, [r2, #24]
 8001566:	4b12      	ldr	r3, [pc, #72]	@ (80015b0 <HAL_MspInit+0x5c>)
 8001568:	699b      	ldr	r3, [r3, #24]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001572:	4b0f      	ldr	r3, [pc, #60]	@ (80015b0 <HAL_MspInit+0x5c>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	4a0e      	ldr	r2, [pc, #56]	@ (80015b0 <HAL_MspInit+0x5c>)
 8001578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800157c:	61d3      	str	r3, [r2, #28]
 800157e:	4b0c      	ldr	r3, [pc, #48]	@ (80015b0 <HAL_MspInit+0x5c>)
 8001580:	69db      	ldr	r3, [r3, #28]
 8001582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800158a:	4b0a      	ldr	r3, [pc, #40]	@ (80015b4 <HAL_MspInit+0x60>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001596:	60fb      	str	r3, [r7, #12]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	4a04      	ldr	r2, [pc, #16]	@ (80015b4 <HAL_MspInit+0x60>)
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a6:	bf00      	nop
 80015a8:	3714      	adds	r7, #20
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc80      	pop	{r7}
 80015ae:	4770      	bx	lr
 80015b0:	40021000 	.word	0x40021000
 80015b4:	40010000 	.word	0x40010000

080015b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b08a      	sub	sp, #40	@ 0x28
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c0:	f107 0318 	add.w	r3, r7, #24
 80015c4:	2200      	movs	r2, #0
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	605a      	str	r2, [r3, #4]
 80015ca:	609a      	str	r2, [r3, #8]
 80015cc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a52      	ldr	r2, [pc, #328]	@ (800171c <HAL_UART_MspInit+0x164>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d160      	bne.n	800169a <HAL_UART_MspInit+0xe2>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80015d8:	4b51      	ldr	r3, [pc, #324]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	4a50      	ldr	r2, [pc, #320]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80015de:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e2:	6193      	str	r3, [r2, #24]
 80015e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80015e6:	699b      	ldr	r3, [r3, #24]
 80015e8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015ec:	617b      	str	r3, [r7, #20]
 80015ee:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015f0:	4b4b      	ldr	r3, [pc, #300]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	4a4a      	ldr	r2, [pc, #296]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80015f6:	f043 0304 	orr.w	r3, r3, #4
 80015fa:	6193      	str	r3, [r2, #24]
 80015fc:	4b48      	ldr	r3, [pc, #288]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	f003 0304 	and.w	r3, r3, #4
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001608:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800160c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001616:	f107 0318 	add.w	r3, r7, #24
 800161a:	4619      	mov	r1, r3
 800161c:	4841      	ldr	r0, [pc, #260]	@ (8001724 <HAL_UART_MspInit+0x16c>)
 800161e:	f002 f9df 	bl	80039e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001622:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001626:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001628:	2300      	movs	r3, #0
 800162a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162c:	2300      	movs	r3, #0
 800162e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	4619      	mov	r1, r3
 8001636:	483b      	ldr	r0, [pc, #236]	@ (8001724 <HAL_UART_MspInit+0x16c>)
 8001638:	f002 f9d2 	bl	80039e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800163c:	4b3a      	ldr	r3, [pc, #232]	@ (8001728 <HAL_UART_MspInit+0x170>)
 800163e:	4a3b      	ldr	r2, [pc, #236]	@ (800172c <HAL_UART_MspInit+0x174>)
 8001640:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001642:	4b39      	ldr	r3, [pc, #228]	@ (8001728 <HAL_UART_MspInit+0x170>)
 8001644:	2200      	movs	r2, #0
 8001646:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001648:	4b37      	ldr	r3, [pc, #220]	@ (8001728 <HAL_UART_MspInit+0x170>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800164e:	4b36      	ldr	r3, [pc, #216]	@ (8001728 <HAL_UART_MspInit+0x170>)
 8001650:	2280      	movs	r2, #128	@ 0x80
 8001652:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001654:	4b34      	ldr	r3, [pc, #208]	@ (8001728 <HAL_UART_MspInit+0x170>)
 8001656:	2200      	movs	r2, #0
 8001658:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800165a:	4b33      	ldr	r3, [pc, #204]	@ (8001728 <HAL_UART_MspInit+0x170>)
 800165c:	2200      	movs	r2, #0
 800165e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <HAL_UART_MspInit+0x170>)
 8001662:	2200      	movs	r2, #0
 8001664:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001666:	4b30      	ldr	r3, [pc, #192]	@ (8001728 <HAL_UART_MspInit+0x170>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800166c:	482e      	ldr	r0, [pc, #184]	@ (8001728 <HAL_UART_MspInit+0x170>)
 800166e:	f001 ff15 	bl	800349c <HAL_DMA_Init>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8001678:	f7ff ff66 	bl	8001548 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4a2a      	ldr	r2, [pc, #168]	@ (8001728 <HAL_UART_MspInit+0x170>)
 8001680:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001682:	4a29      	ldr	r2, [pc, #164]	@ (8001728 <HAL_UART_MspInit+0x170>)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001688:	2200      	movs	r2, #0
 800168a:	2100      	movs	r1, #0
 800168c:	2025      	movs	r0, #37	@ 0x25
 800168e:	f001 fece 	bl	800342e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001692:	2025      	movs	r0, #37	@ 0x25
 8001694:	f001 fee7 	bl	8003466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001698:	e03c      	b.n	8001714 <HAL_UART_MspInit+0x15c>
  else if(huart->Instance==USART2)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a24      	ldr	r2, [pc, #144]	@ (8001730 <HAL_UART_MspInit+0x178>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d137      	bne.n	8001714 <HAL_UART_MspInit+0x15c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80016a4:	4b1e      	ldr	r3, [pc, #120]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80016aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ae:	61d3      	str	r3, [r2, #28]
 80016b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016b8:	60fb      	str	r3, [r7, #12]
 80016ba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016bc:	4b18      	ldr	r3, [pc, #96]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	4a17      	ldr	r2, [pc, #92]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80016c2:	f043 0304 	orr.w	r3, r3, #4
 80016c6:	6193      	str	r3, [r2, #24]
 80016c8:	4b15      	ldr	r3, [pc, #84]	@ (8001720 <HAL_UART_MspInit+0x168>)
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	60bb      	str	r3, [r7, #8]
 80016d2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016d4:	2304      	movs	r3, #4
 80016d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016dc:	2303      	movs	r3, #3
 80016de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	f107 0318 	add.w	r3, r7, #24
 80016e4:	4619      	mov	r1, r3
 80016e6:	480f      	ldr	r0, [pc, #60]	@ (8001724 <HAL_UART_MspInit+0x16c>)
 80016e8:	f002 f97a 	bl	80039e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016ec:	2308      	movs	r3, #8
 80016ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f4:	2300      	movs	r3, #0
 80016f6:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f8:	f107 0318 	add.w	r3, r7, #24
 80016fc:	4619      	mov	r1, r3
 80016fe:	4809      	ldr	r0, [pc, #36]	@ (8001724 <HAL_UART_MspInit+0x16c>)
 8001700:	f002 f96e 	bl	80039e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001704:	2200      	movs	r2, #0
 8001706:	2100      	movs	r1, #0
 8001708:	2026      	movs	r0, #38	@ 0x26
 800170a:	f001 fe90 	bl	800342e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800170e:	2026      	movs	r0, #38	@ 0x26
 8001710:	f001 fea9 	bl	8003466 <HAL_NVIC_EnableIRQ>
}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	@ 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40013800 	.word	0x40013800
 8001720:	40021000 	.word	0x40021000
 8001724:	40010800 	.word	0x40010800
 8001728:	200002a8 	.word	0x200002a8
 800172c:	40020058 	.word	0x40020058
 8001730:	40004400 	.word	0x40004400

08001734 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <NMI_Handler+0x4>

0800173c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <HardFault_Handler+0x4>

08001744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <MemManage_Handler+0x4>

0800174c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <BusFault_Handler+0x4>

08001754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <UsageFault_Handler+0x4>

0800175c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	bc80      	pop	{r7}
 8001766:	4770      	bx	lr

08001768 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001778:	bf00      	nop
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001784:	f001 fd3c 	bl	8003200 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <DMA1_Channel5_IRQHandler+0x10>)
 8001792:	f001 fff1 	bl	8003778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002a8 	.word	0x200002a8

080017a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017a4:	4802      	ldr	r0, [pc, #8]	@ (80017b0 <USART1_IRQHandler+0x10>)
 80017a6:	f003 f89f 	bl	80048e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20000218 	.word	0x20000218

080017b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80017b8:	4802      	ldr	r0, [pc, #8]	@ (80017c4 <USART2_IRQHandler+0x10>)
 80017ba:	f003 f895 	bl	80048e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000260 	.word	0x20000260

080017c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  return 1;
 80017cc:	2301      	movs	r3, #1
}
 80017ce:	4618      	mov	r0, r3
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr

080017d6 <_kill>:

int _kill(int pid, int sig)
{
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b082      	sub	sp, #8
 80017da:	af00      	add	r7, sp, #0
 80017dc:	6078      	str	r0, [r7, #4]
 80017de:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80017e0:	f005 feba 	bl	8007558 <__errno>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2216      	movs	r2, #22
 80017e8:	601a      	str	r2, [r3, #0]
  return -1;
 80017ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_exit>:

void _exit (int status)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	b082      	sub	sp, #8
 80017fa:	af00      	add	r7, sp, #0
 80017fc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80017fe:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001802:	6878      	ldr	r0, [r7, #4]
 8001804:	f7ff ffe7 	bl	80017d6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001808:	bf00      	nop
 800180a:	e7fd      	b.n	8001808 <_exit+0x12>

0800180c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60f8      	str	r0, [r7, #12]
 8001814:	60b9      	str	r1, [r7, #8]
 8001816:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001818:	2300      	movs	r3, #0
 800181a:	617b      	str	r3, [r7, #20]
 800181c:	e00a      	b.n	8001834 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800181e:	f3af 8000 	nop.w
 8001822:	4601      	mov	r1, r0
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	1c5a      	adds	r2, r3, #1
 8001828:	60ba      	str	r2, [r7, #8]
 800182a:	b2ca      	uxtb	r2, r1
 800182c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697a      	ldr	r2, [r7, #20]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	dbf0      	blt.n	800181e <_read+0x12>
  }

  return len;
 800183c:	687b      	ldr	r3, [r7, #4]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3718      	adds	r7, #24
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b086      	sub	sp, #24
 800184a:	af00      	add	r7, sp, #0
 800184c:	60f8      	str	r0, [r7, #12]
 800184e:	60b9      	str	r1, [r7, #8]
 8001850:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
 8001856:	e009      	b.n	800186c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	1c5a      	adds	r2, r3, #1
 800185c:	60ba      	str	r2, [r7, #8]
 800185e:	781b      	ldrb	r3, [r3, #0]
 8001860:	4618      	mov	r0, r3
 8001862:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3301      	adds	r3, #1
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	429a      	cmp	r2, r3
 8001872:	dbf1      	blt.n	8001858 <_write+0x12>
  }
  return len;
 8001874:	687b      	ldr	r3, [r7, #4]
}
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_close>:

int _close(int file)
{
 800187e:	b480      	push	{r7}
 8001880:	b083      	sub	sp, #12
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001886:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800188a:	4618      	mov	r0, r3
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr

08001894 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018a4:	605a      	str	r2, [r3, #4]
  return 0;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <_isatty>:

int _isatty(int file)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ba:	2301      	movs	r3, #1
}
 80018bc:	4618      	mov	r0, r3
 80018be:	370c      	adds	r7, #12
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr

080018c6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b085      	sub	sp, #20
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	60f8      	str	r0, [r7, #12]
 80018ce:	60b9      	str	r1, [r7, #8]
 80018d0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
	...

080018e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018e8:	4a14      	ldr	r2, [pc, #80]	@ (800193c <_sbrk+0x5c>)
 80018ea:	4b15      	ldr	r3, [pc, #84]	@ (8001940 <_sbrk+0x60>)
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018f4:	4b13      	ldr	r3, [pc, #76]	@ (8001944 <_sbrk+0x64>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d102      	bne.n	8001902 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018fc:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <_sbrk+0x64>)
 80018fe:	4a12      	ldr	r2, [pc, #72]	@ (8001948 <_sbrk+0x68>)
 8001900:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001902:	4b10      	ldr	r3, [pc, #64]	@ (8001944 <_sbrk+0x64>)
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4413      	add	r3, r2
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	429a      	cmp	r2, r3
 800190e:	d207      	bcs.n	8001920 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001910:	f005 fe22 	bl	8007558 <__errno>
 8001914:	4603      	mov	r3, r0
 8001916:	220c      	movs	r2, #12
 8001918:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800191a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800191e:	e009      	b.n	8001934 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001920:	4b08      	ldr	r3, [pc, #32]	@ (8001944 <_sbrk+0x64>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001926:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <_sbrk+0x64>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	4a05      	ldr	r2, [pc, #20]	@ (8001944 <_sbrk+0x64>)
 8001930:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001932:	68fb      	ldr	r3, [r7, #12]
}
 8001934:	4618      	mov	r0, r3
 8001936:	3718      	adds	r7, #24
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	20005000 	.word	0x20005000
 8001940:	00000400 	.word	0x00000400
 8001944:	20000a40 	.word	0x20000a40
 8001948:	20000c20 	.word	0x20000c20

0800194c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001950:	bf00      	nop
 8001952:	46bd      	mov	sp, r7
 8001954:	bc80      	pop	{r7}
 8001956:	4770      	bx	lr

08001958 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001958:	f7ff fff8 	bl	800194c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800195c:	480b      	ldr	r0, [pc, #44]	@ (800198c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800195e:	490c      	ldr	r1, [pc, #48]	@ (8001990 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001960:	4a0c      	ldr	r2, [pc, #48]	@ (8001994 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001962:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001964:	e002      	b.n	800196c <LoopCopyDataInit>

08001966 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001966:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001968:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800196a:	3304      	adds	r3, #4

0800196c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800196c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800196e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001970:	d3f9      	bcc.n	8001966 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001972:	4a09      	ldr	r2, [pc, #36]	@ (8001998 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001974:	4c09      	ldr	r4, [pc, #36]	@ (800199c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001976:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001978:	e001      	b.n	800197e <LoopFillZerobss>

0800197a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800197a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800197c:	3204      	adds	r2, #4

0800197e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800197e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001980:	d3fb      	bcc.n	800197a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001982:	f005 fdef 	bl	8007564 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001986:	f7ff fcb7 	bl	80012f8 <main>
  bx lr
 800198a:	4770      	bx	lr
  ldr r0, =_sdata
 800198c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001990:	200001fc 	.word	0x200001fc
  ldr r2, =_sidata
 8001994:	0800b31c 	.word	0x0800b31c
  ldr r2, =_sbss
 8001998:	200001fc 	.word	0x200001fc
  ldr r4, =_ebss
 800199c:	20000c1c 	.word	0x20000c1c

080019a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019a0:	e7fe      	b.n	80019a0 <ADC1_2_IRQHandler>
	...

080019a4 <auto_baud>:
//  }
int baud_num = -1;
int baud[9] = {4800, 9600, 19200, 38400, 57600, 115200, 230400, 460800, 921600};

int auto_baud(TAU1201_t *_gps, int baudrate)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
    //	Check if this baudrate ok or not
    _gps->huart->Init.BaudRate = baudrate;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	605a      	str	r2, [r3, #4]
    if (HAL_UART_Init(_gps->huart) != HAL_OK)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f002 fdbc 	bl	8004538 <HAL_UART_Init>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <auto_baud+0x26>
    {
        Error_Handler();
 80019c6:	f7ff fdbf 	bl	8001548 <Error_Handler>
    }

    HAL_UART_Receive_IT(_gps->huart, &rx_data, 1);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4913      	ldr	r1, [pc, #76]	@ (8001a20 <auto_baud+0x7c>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f002 fe8b 	bl	80046ee <HAL_UART_Receive_IT>
    HAL_Delay(1000);
 80019d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80019dc:	f001 fc2c 	bl	8003238 <HAL_Delay>
    // If baudrate ok, module founded, return OK
    if (_gps->module_found == 1)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	791b      	ldrb	r3, [r3, #4]
 80019e4:	2b01      	cmp	r3, #1
 80019e6:	d101      	bne.n	80019ec <auto_baud+0x48>
        return GPS_OK;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e015      	b.n	8001a18 <auto_baud+0x74>
    // Else check another baudrate
    ++baud_num;
 80019ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001a24 <auto_baud+0x80>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	3301      	adds	r3, #1
 80019f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001a24 <auto_baud+0x80>)
 80019f4:	6013      	str	r3, [r2, #0]
    if (baud_num > 8)
 80019f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001a24 <auto_baud+0x80>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2b08      	cmp	r3, #8
 80019fc:	dd02      	ble.n	8001a04 <auto_baud+0x60>
        return GPS_ERROR;
 80019fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a02:	e009      	b.n	8001a18 <auto_baud+0x74>
    return auto_baud(_gps, baud[baud_num]);
 8001a04:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <auto_baud+0x80>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a07      	ldr	r2, [pc, #28]	@ (8001a28 <auto_baud+0x84>)
 8001a0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a0e:	4619      	mov	r1, r3
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	f7ff ffc7 	bl	80019a4 <auto_baud>
 8001a16:	4603      	mov	r3, r0
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000a44 	.word	0x20000a44
 8001a24:	20000004 	.word	0x20000004
 8001a28:	20000008 	.word	0x20000008

08001a2c <GPS_Init>:

int GPS_Init(TAU1201_t *_gps, UART_HandleTypeDef *_huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	6039      	str	r1, [r7, #0]
    _gps->huart = _huart;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	683a      	ldr	r2, [r7, #0]
 8001a3a:	601a      	str	r2, [r3, #0]
    _gps->module_found = 0;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	711a      	strb	r2, [r3, #4]

    return auto_baud(_gps, _gps->huart->Init.BaudRate);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4619      	mov	r1, r3
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f7ff ffaa 	bl	80019a4 <auto_baud>
 8001a50:	4603      	mov	r3, r0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
	...

08001a5c <GPS_UART_CallBack>:

void GPS_UART_CallBack(TAU1201_t *_gps)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
    if (rx_data != '\n' && rx_index < sizeof(rx_buffer))
 8001a64:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <GPS_UART_CallBack+0x74>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b0a      	cmp	r3, #10
 8001a6a:	d010      	beq.n	8001a8e <GPS_UART_CallBack+0x32>
 8001a6c:	4b19      	ldr	r3, [pc, #100]	@ (8001ad4 <GPS_UART_CallBack+0x78>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b25b      	sxtb	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	db0b      	blt.n	8001a8e <GPS_UART_CallBack+0x32>
    {
        rx_buffer[rx_index++] = rx_data;
 8001a76:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <GPS_UART_CallBack+0x78>)
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	1c5a      	adds	r2, r3, #1
 8001a7c:	b2d1      	uxtb	r1, r2
 8001a7e:	4a15      	ldr	r2, [pc, #84]	@ (8001ad4 <GPS_UART_CallBack+0x78>)
 8001a80:	7011      	strb	r1, [r2, #0]
 8001a82:	461a      	mov	r2, r3
 8001a84:	4b12      	ldr	r3, [pc, #72]	@ (8001ad0 <GPS_UART_CallBack+0x74>)
 8001a86:	7819      	ldrb	r1, [r3, #0]
 8001a88:	4b13      	ldr	r3, [pc, #76]	@ (8001ad8 <GPS_UART_CallBack+0x7c>)
 8001a8a:	5499      	strb	r1, [r3, r2]
 8001a8c:	e015      	b.n	8001aba <GPS_UART_CallBack+0x5e>

#if (GPS_DEBUG == 1)
        GPS_print((char *)rx_buffer);
#endif

        if (GPS_validate(_gps, (char *)rx_buffer))
 8001a8e:	4912      	ldr	r1, [pc, #72]	@ (8001ad8 <GPS_UART_CallBack+0x7c>)
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f000 f823 	bl	8001adc <GPS_validate>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d006      	beq.n	8001aaa <GPS_UART_CallBack+0x4e>
        {
#if (GPS_DEBUG == 2)
            GPS_print_uart((char *)rx_buffer);
#endif
            _gps->module_found = 1;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	711a      	strb	r2, [r3, #4]
            GPS_parse(_gps, (char *)rx_buffer);
 8001aa2:	490d      	ldr	r1, [pc, #52]	@ (8001ad8 <GPS_UART_CallBack+0x7c>)
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 f87f 	bl	8001ba8 <GPS_parse>
        }

        rx_index = 0;
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <GPS_UART_CallBack+0x78>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
        memset(rx_buffer, 0, sizeof(rx_buffer));
 8001ab0:	2280      	movs	r2, #128	@ 0x80
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4808      	ldr	r0, [pc, #32]	@ (8001ad8 <GPS_UART_CallBack+0x7c>)
 8001ab6:	f005 fcfd 	bl	80074b4 <memset>
    }
    HAL_UART_Receive_IT(_gps->huart, &rx_data, 1);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	4903      	ldr	r1, [pc, #12]	@ (8001ad0 <GPS_UART_CallBack+0x74>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 fe13 	bl	80046ee <HAL_UART_Receive_IT>
}
 8001ac8:	bf00      	nop
 8001aca:	3708      	adds	r7, #8
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	20000a44 	.word	0x20000a44
 8001ad4:	20000ac8 	.word	0x20000ac8
 8001ad8:	20000a48 	.word	0x20000a48

08001adc <GPS_validate>:

int GPS_validate(TAU1201_t *_gps, char *nmeastr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
    char check[3];
    char checkcalcstr[3];
    int i;
    int calculated_check;

    i = 0;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	617b      	str	r3, [r7, #20]
    calculated_check = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	613b      	str	r3, [r7, #16]

    // check to ensure that the string starts with a $
    if (nmeastr[i] == '$')
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b24      	cmp	r3, #36	@ 0x24
 8001af8:	d103      	bne.n	8001b02 <GPS_validate+0x26>
        i++;
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	3301      	adds	r3, #1
 8001afe:	617b      	str	r3, [r7, #20]
    else
        return 0;

    // No NULL reached, 75 char largest possible NMEA message, no '*' reached
    while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8001b00:	e00c      	b.n	8001b1c <GPS_validate+0x40>
        return 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	e047      	b.n	8001b96 <GPS_validate+0xba>
    {
        calculated_check ^= nmeastr[i]; // calculate the checksum
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	683a      	ldr	r2, [r7, #0]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	461a      	mov	r2, r3
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	4053      	eors	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
        i++;
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	3301      	adds	r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
    while ((nmeastr[i] != 0) && (nmeastr[i] != '*') && (i < 75))
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	683a      	ldr	r2, [r7, #0]
 8001b20:	4413      	add	r3, r2
 8001b22:	781b      	ldrb	r3, [r3, #0]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d008      	beq.n	8001b3a <GPS_validate+0x5e>
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b32:	d002      	beq.n	8001b3a <GPS_validate+0x5e>
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b38:	dde5      	ble.n	8001b06 <GPS_validate+0x2a>
    }

    if (i >= 75)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	2b4a      	cmp	r3, #74	@ 0x4a
 8001b3e:	dd01      	ble.n	8001b44 <GPS_validate+0x68>
    {
        return 0; // the string was too long so return an error
 8001b40:	2300      	movs	r3, #0
 8001b42:	e028      	b.n	8001b96 <GPS_validate+0xba>
    }

    if (nmeastr[i] == '*')
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	683a      	ldr	r2, [r7, #0]
 8001b48:	4413      	add	r3, r2
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	2b2a      	cmp	r3, #42	@ 0x2a
 8001b4e:	d119      	bne.n	8001b84 <GPS_validate+0xa8>
    {
        check[0] = nmeastr[i + 1]; // put hex chars in check string
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	3301      	adds	r3, #1
 8001b54:	683a      	ldr	r2, [r7, #0]
 8001b56:	4413      	add	r3, r2
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	733b      	strb	r3, [r7, #12]
        check[1] = nmeastr[i + 2];
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	3302      	adds	r3, #2
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	737b      	strb	r3, [r7, #13]
        check[2] = 0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	73bb      	strb	r3, [r7, #14]
    }
    else
        return 0; // no checksum separator found there for invalid

    sprintf(checkcalcstr, "%02X", calculated_check);
 8001b6c:	f107 0308 	add.w	r3, r7, #8
 8001b70:	693a      	ldr	r2, [r7, #16]
 8001b72:	490b      	ldr	r1, [pc, #44]	@ (8001ba0 <GPS_validate+0xc4>)
 8001b74:	4618      	mov	r0, r3
 8001b76:	f004 fc4b 	bl	8006410 <siprintf>
    return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ? 1 : 0;
 8001b7a:	7a3a      	ldrb	r2, [r7, #8]
 8001b7c:	7b3b      	ldrb	r3, [r7, #12]
 8001b7e:	429a      	cmp	r2, r3
 8001b80:	d108      	bne.n	8001b94 <GPS_validate+0xb8>
 8001b82:	e001      	b.n	8001b88 <GPS_validate+0xac>
        return 0; // no checksum separator found there for invalid
 8001b84:	2300      	movs	r3, #0
 8001b86:	e006      	b.n	8001b96 <GPS_validate+0xba>
    return ((checkcalcstr[0] == check[0]) && (checkcalcstr[1] == check[1])) ? 1 : 0;
 8001b88:	7a7a      	ldrb	r2, [r7, #9]
 8001b8a:	7b7b      	ldrb	r3, [r7, #13]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d101      	bne.n	8001b94 <GPS_validate+0xb8>
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <GPS_validate+0xba>
 8001b94:	2300      	movs	r3, #0
    return 0;
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	0800a838 	.word	0x0800a838
 8001ba4:	00000000 	.word	0x00000000

08001ba8 <GPS_parse>:
//
void GPS_parse(TAU1201_t *_gps, char *GPSstrParse)
{
 8001ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bac:	b08c      	sub	sp, #48	@ 0x30
 8001bae:	af08      	add	r7, sp, #32
 8001bb0:	6078      	str	r0, [r7, #4]
 8001bb2:	6039      	str	r1, [r7, #0]
    //	09:06:45  $GPGLL,1050.69077,N,10647.77953,E,090645.00,A,A*67
    //	09:06:45  $GPRMC,090645.00,A,1050.69077,N,10647.77953,E,0.754,,020624,,,A*7A
    //	09:06:45  $GPVTG,,T,,M,0.754,N,1.396,K,A*28

    /* Command for NEO7, 8M modules*/
    if (!strncmp(GPSstrParse, "$GPGGA", 6))
 8001bb4:	2206      	movs	r2, #6
 8001bb6:	4990      	ldr	r1, [pc, #576]	@ (8001df8 <GPS_parse+0x250>)
 8001bb8:	6838      	ldr	r0, [r7, #0]
 8001bba:	f005 fc69 	bl	8007490 <strncmp>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d143      	bne.n	8001c4c <GPS_parse+0xa4>
    {
        if (sscanf(GPSstrParse, "$GPGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &_gps->utc_time, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->lock, &_gps->satelites, &_gps->hdop, &_gps->msl_altitude, &_gps->msl_units) >= 1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f103 0c1c 	add.w	ip, r3, #28
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f103 0e18 	add.w	lr, r3, #24
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3320      	adds	r3, #32
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	3214      	adds	r2, #20
 8001bd8:	6879      	ldr	r1, [r7, #4]
 8001bda:	3121      	adds	r1, #33	@ 0x21
 8001bdc:	6878      	ldr	r0, [r7, #4]
 8001bde:	3024      	adds	r0, #36	@ 0x24
 8001be0:	687c      	ldr	r4, [r7, #4]
 8001be2:	3428      	adds	r4, #40	@ 0x28
 8001be4:	687d      	ldr	r5, [r7, #4]
 8001be6:	352c      	adds	r5, #44	@ 0x2c
 8001be8:	687e      	ldr	r6, [r7, #4]
 8001bea:	3630      	adds	r6, #48	@ 0x30
 8001bec:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8001bf0:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 8001bf4:	f8cd 801c 	str.w	r8, [sp, #28]
 8001bf8:	9606      	str	r6, [sp, #24]
 8001bfa:	9505      	str	r5, [sp, #20]
 8001bfc:	9404      	str	r4, [sp, #16]
 8001bfe:	9003      	str	r0, [sp, #12]
 8001c00:	9102      	str	r1, [sp, #8]
 8001c02:	9201      	str	r2, [sp, #4]
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	4673      	mov	r3, lr
 8001c08:	4662      	mov	r2, ip
 8001c0a:	497c      	ldr	r1, [pc, #496]	@ (8001dfc <GPS_parse+0x254>)
 8001c0c:	6838      	ldr	r0, [r7, #0]
 8001c0e:	f004 fc1f 	bl	8006450 <siscanf>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f340 8141 	ble.w	8001e9c <GPS_parse+0x2f4>
        {
            _gps->dec_latitude = GPS_nmea_to_dec(_gps->nmea_latitude, _gps->ns);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	699a      	ldr	r2, [r3, #24]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f000 f946 	bl	8001eb8 <GPS_nmea_to_dec>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	60da      	str	r2, [r3, #12]
            _gps->dec_longitude = GPS_nmea_to_dec(_gps->nmea_longitude, _gps->ew);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4610      	mov	r0, r2
 8001c40:	f000 f93a 	bl	8001eb8 <GPS_nmea_to_dec>
 8001c44:	4602      	mov	r2, r0
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	609a      	str	r2, [r3, #8]
            return;
 8001c4a:	e127      	b.n	8001e9c <GPS_parse+0x2f4>
        }
    }

    else if (!strncmp(GPSstrParse, "$GPRMC", 6))
 8001c4c:	2206      	movs	r2, #6
 8001c4e:	496c      	ldr	r1, [pc, #432]	@ (8001e00 <GPS_parse+0x258>)
 8001c50:	6838      	ldr	r0, [r7, #0]
 8001c52:	f005 fc1d 	bl	8007490 <strncmp>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d137      	bne.n	8001ccc <GPS_parse+0x124>
    {
        char utc_uint;
        if (sscanf(GPSstrParse, "$GPRMC,%f,%c,%f,%c,%f,%c,%f,%f,%d", &_gps->utc_time, &utc_uint, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->speed_k, &_gps->course_d, &_gps->date) >= 1)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f103 0c1c 	add.w	ip, r3, #28
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3318      	adds	r3, #24
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	3220      	adds	r2, #32
 8001c6a:	6879      	ldr	r1, [r7, #4]
 8001c6c:	3114      	adds	r1, #20
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	3021      	adds	r0, #33	@ 0x21
 8001c72:	687c      	ldr	r4, [r7, #4]
 8001c74:	3438      	adds	r4, #56	@ 0x38
 8001c76:	687d      	ldr	r5, [r7, #4]
 8001c78:	353c      	adds	r5, #60	@ 0x3c
 8001c7a:	687e      	ldr	r6, [r7, #4]
 8001c7c:	3640      	adds	r6, #64	@ 0x40
 8001c7e:	f107 0e0f 	add.w	lr, r7, #15
 8001c82:	9606      	str	r6, [sp, #24]
 8001c84:	9505      	str	r5, [sp, #20]
 8001c86:	9404      	str	r4, [sp, #16]
 8001c88:	9003      	str	r0, [sp, #12]
 8001c8a:	9102      	str	r1, [sp, #8]
 8001c8c:	9201      	str	r2, [sp, #4]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	4673      	mov	r3, lr
 8001c92:	4662      	mov	r2, ip
 8001c94:	495b      	ldr	r1, [pc, #364]	@ (8001e04 <GPS_parse+0x25c>)
 8001c96:	6838      	ldr	r0, [r7, #0]
 8001c98:	f004 fbda 	bl	8006450 <siscanf>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f340 80fc 	ble.w	8001e9c <GPS_parse+0x2f4>
        {
            _gps->speed_km = (_gps->speed_k * 1.852);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7fe fbbd 	bl	8000428 <__aeabi_f2d>
 8001cae:	a350      	add	r3, pc, #320	@ (adr r3, 8001df0 <GPS_parse+0x248>)
 8001cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb4:	f7fe fc10 	bl	80004d8 <__aeabi_dmul>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	460b      	mov	r3, r1
 8001cbc:	4610      	mov	r0, r2
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	f7fe ff02 	bl	8000ac8 <__aeabi_d2f>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cca:	e0e7      	b.n	8001e9c <GPS_parse+0x2f4>
            return;
        }
    }

    else if (!strncmp(GPSstrParse, "$GPGLL", 6))
 8001ccc:	2206      	movs	r2, #6
 8001cce:	494e      	ldr	r1, [pc, #312]	@ (8001e08 <GPS_parse+0x260>)
 8001cd0:	6838      	ldr	r0, [r7, #0]
 8001cd2:	f005 fbdd 	bl	8007490 <strncmp>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d11a      	bne.n	8001d12 <GPS_parse+0x16a>
    {
        if (sscanf(GPSstrParse, "$GPGLL,%f,%c,%f,%c,%f,%c", &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->utc_time, &_gps->gll_status) >= 1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f103 0418 	add.w	r4, r3, #24
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f103 0520 	add.w	r5, r3, #32
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	3314      	adds	r3, #20
 8001cec:	687a      	ldr	r2, [r7, #4]
 8001cee:	3221      	adds	r2, #33	@ 0x21
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	311c      	adds	r1, #28
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	3044      	adds	r0, #68	@ 0x44
 8001cf8:	9003      	str	r0, [sp, #12]
 8001cfa:	9102      	str	r1, [sp, #8]
 8001cfc:	9201      	str	r2, [sp, #4]
 8001cfe:	9300      	str	r3, [sp, #0]
 8001d00:	462b      	mov	r3, r5
 8001d02:	4622      	mov	r2, r4
 8001d04:	4941      	ldr	r1, [pc, #260]	@ (8001e0c <GPS_parse+0x264>)
 8001d06:	6838      	ldr	r0, [r7, #0]
 8001d08:	f004 fba2 	bl	8006450 <siscanf>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	e0c4      	b.n	8001e9c <GPS_parse+0x2f4>
    //	06:16:34  $GNZDA,061634.000,05,06,2024,00,00*49
    //	06:16:34  $GNTXT,01,01,01,ANT_OK*50

    //  $GPVTG,,T,,M,0.580,N,1.075,K,A*2D

    else if (!strncmp(GPSstrParse, "$GNGGA", 6))
 8001d12:	2206      	movs	r2, #6
 8001d14:	493e      	ldr	r1, [pc, #248]	@ (8001e10 <GPS_parse+0x268>)
 8001d16:	6838      	ldr	r0, [r7, #0]
 8001d18:	f005 fbba 	bl	8007490 <strncmp>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d143      	bne.n	8001daa <GPS_parse+0x202>
    {
        if (sscanf(GPSstrParse, "$GNGGA,%f,%f,%c,%f,%c,%d,%d,%f,%f,%c", &_gps->utc_time, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->lock, &_gps->satelites, &_gps->hdop, &_gps->msl_altitude, &_gps->msl_units) >= 1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	f103 0c1c 	add.w	ip, r3, #28
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	f103 0e18 	add.w	lr, r3, #24
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3320      	adds	r3, #32
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	3214      	adds	r2, #20
 8001d36:	6879      	ldr	r1, [r7, #4]
 8001d38:	3121      	adds	r1, #33	@ 0x21
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	3024      	adds	r0, #36	@ 0x24
 8001d3e:	687c      	ldr	r4, [r7, #4]
 8001d40:	3428      	adds	r4, #40	@ 0x28
 8001d42:	687d      	ldr	r5, [r7, #4]
 8001d44:	352c      	adds	r5, #44	@ 0x2c
 8001d46:	687e      	ldr	r6, [r7, #4]
 8001d48:	3630      	adds	r6, #48	@ 0x30
 8001d4a:	f8d7 8004 	ldr.w	r8, [r7, #4]
 8001d4e:	f108 0834 	add.w	r8, r8, #52	@ 0x34
 8001d52:	f8cd 801c 	str.w	r8, [sp, #28]
 8001d56:	9606      	str	r6, [sp, #24]
 8001d58:	9505      	str	r5, [sp, #20]
 8001d5a:	9404      	str	r4, [sp, #16]
 8001d5c:	9003      	str	r0, [sp, #12]
 8001d5e:	9102      	str	r1, [sp, #8]
 8001d60:	9201      	str	r2, [sp, #4]
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	4673      	mov	r3, lr
 8001d66:	4662      	mov	r2, ip
 8001d68:	492a      	ldr	r1, [pc, #168]	@ (8001e14 <GPS_parse+0x26c>)
 8001d6a:	6838      	ldr	r0, [r7, #0]
 8001d6c:	f004 fb70 	bl	8006450 <siscanf>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f340 8092 	ble.w	8001e9c <GPS_parse+0x2f4>
        {
            _gps->dec_latitude = GPS_nmea_to_dec(_gps->nmea_latitude, _gps->ns);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	699a      	ldr	r2, [r3, #24]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d82:	4619      	mov	r1, r3
 8001d84:	4610      	mov	r0, r2
 8001d86:	f000 f897 	bl	8001eb8 <GPS_nmea_to_dec>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	60da      	str	r2, [r3, #12]
            _gps->dec_longitude = GPS_nmea_to_dec(_gps->nmea_longitude, _gps->ew);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	695a      	ldr	r2, [r3, #20]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4610      	mov	r0, r2
 8001d9e:	f000 f88b 	bl	8001eb8 <GPS_nmea_to_dec>
 8001da2:	4602      	mov	r2, r0
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	609a      	str	r2, [r3, #8]
            return;
 8001da8:	e078      	b.n	8001e9c <GPS_parse+0x2f4>
        }
    }

    else if (!strncmp(GPSstrParse, "$GNGLL", 6))
 8001daa:	2206      	movs	r2, #6
 8001dac:	491a      	ldr	r1, [pc, #104]	@ (8001e18 <GPS_parse+0x270>)
 8001dae:	6838      	ldr	r0, [r7, #0]
 8001db0:	f005 fb6e 	bl	8007490 <strncmp>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d132      	bne.n	8001e20 <GPS_parse+0x278>
    {
        if (sscanf(GPSstrParse, "$GNGLL,%f,%c,%f,%c,%f,%c", &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->utc_time, &_gps->gll_status) >= 1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f103 0418 	add.w	r4, r3, #24
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	f103 0520 	add.w	r5, r3, #32
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	3314      	adds	r3, #20
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	3221      	adds	r2, #33	@ 0x21
 8001dce:	6879      	ldr	r1, [r7, #4]
 8001dd0:	311c      	adds	r1, #28
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	3044      	adds	r0, #68	@ 0x44
 8001dd6:	9003      	str	r0, [sp, #12]
 8001dd8:	9102      	str	r1, [sp, #8]
 8001dda:	9201      	str	r2, [sp, #4]
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	462b      	mov	r3, r5
 8001de0:	4622      	mov	r2, r4
 8001de2:	490e      	ldr	r1, [pc, #56]	@ (8001e1c <GPS_parse+0x274>)
 8001de4:	6838      	ldr	r0, [r7, #0]
 8001de6:	f004 fb33 	bl	8006450 <siscanf>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	e055      	b.n	8001e9c <GPS_parse+0x2f4>
 8001df0:	c083126f 	.word	0xc083126f
 8001df4:	3ffda1ca 	.word	0x3ffda1ca
 8001df8:	0800a840 	.word	0x0800a840
 8001dfc:	0800a848 	.word	0x0800a848
 8001e00:	0800a870 	.word	0x0800a870
 8001e04:	0800a878 	.word	0x0800a878
 8001e08:	0800a89c 	.word	0x0800a89c
 8001e0c:	0800a8a4 	.word	0x0800a8a4
 8001e10:	0800a8c0 	.word	0x0800a8c0
 8001e14:	0800a8c8 	.word	0x0800a8c8
 8001e18:	0800a8f0 	.word	0x0800a8f0
 8001e1c:	0800a8f8 	.word	0x0800a8f8
            return;
    }
    //	06:16:34  $GNRMC,061634.000,A,1050.68724,N,10647.78479,E,0.001,23.42,050624,,,A*7F
    //	09:06:45  $GPRMC,090645.00,A,1050.69077,N,10647.77953,E,0.754,,020624,,,A*7A

    else if (!strncmp(GPSstrParse, "$GNRMC", 6))
 8001e20:	2206      	movs	r2, #6
 8001e22:	4923      	ldr	r1, [pc, #140]	@ (8001eb0 <GPS_parse+0x308>)
 8001e24:	6838      	ldr	r0, [r7, #0]
 8001e26:	f005 fb33 	bl	8007490 <strncmp>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d135      	bne.n	8001e9c <GPS_parse+0x2f4>
    {
        char utc_uint;
        if (sscanf(GPSstrParse, "$GNRMC,%f,%c,%f,%c,%f,%c,%f,%f,%d", &_gps->utc_time, &utc_uint, &_gps->nmea_latitude, &_gps->ns, &_gps->nmea_longitude, &_gps->ew, &_gps->speed_k, &_gps->course_d, &_gps->date) >= 1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f103 0c1c 	add.w	ip, r3, #28
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	3318      	adds	r3, #24
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	3220      	adds	r2, #32
 8001e3e:	6879      	ldr	r1, [r7, #4]
 8001e40:	3114      	adds	r1, #20
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	3021      	adds	r0, #33	@ 0x21
 8001e46:	687c      	ldr	r4, [r7, #4]
 8001e48:	3438      	adds	r4, #56	@ 0x38
 8001e4a:	687d      	ldr	r5, [r7, #4]
 8001e4c:	353c      	adds	r5, #60	@ 0x3c
 8001e4e:	687e      	ldr	r6, [r7, #4]
 8001e50:	3640      	adds	r6, #64	@ 0x40
 8001e52:	f107 0e0e 	add.w	lr, r7, #14
 8001e56:	9606      	str	r6, [sp, #24]
 8001e58:	9505      	str	r5, [sp, #20]
 8001e5a:	9404      	str	r4, [sp, #16]
 8001e5c:	9003      	str	r0, [sp, #12]
 8001e5e:	9102      	str	r1, [sp, #8]
 8001e60:	9201      	str	r2, [sp, #4]
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	4673      	mov	r3, lr
 8001e66:	4662      	mov	r2, ip
 8001e68:	4912      	ldr	r1, [pc, #72]	@ (8001eb4 <GPS_parse+0x30c>)
 8001e6a:	6838      	ldr	r0, [r7, #0]
 8001e6c:	f004 faf0 	bl	8006450 <siscanf>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	dd12      	ble.n	8001e9c <GPS_parse+0x2f4>
        {
            _gps->speed_km = (_gps->speed_k * 1.852);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fad4 	bl	8000428 <__aeabi_f2d>
 8001e80:	a309      	add	r3, pc, #36	@ (adr r3, 8001ea8 <GPS_parse+0x300>)
 8001e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e86:	f7fe fb27 	bl	80004d8 <__aeabi_dmul>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	4610      	mov	r0, r2
 8001e90:	4619      	mov	r1, r3
 8001e92:	f7fe fe19 	bl	8000ac8 <__aeabi_d2f>
 8001e96:	4602      	mov	r2, r0
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	659a      	str	r2, [r3, #88]	@ 0x58
    //    }
    //    else if (!strncmp(GPSstrParse, "$GNVTG", 6)){
    //        if(sscanf(GPSstrParse, "$GNVTG,%f,%c,%f,%c,%f,%c,%f,%c", &_gps->course_t, &_gps->course_t_unit, &_gps->course_m, &_gps->course_m_unit, &_gps->speed_k, &_gps->speed_k_unit, &_gps->speed_km, &_gps->speed_km_unit) >= 1)
    //            return;
    //    }
}
 8001e9c:	3710      	adds	r7, #16
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001ea4:	f3af 8000 	nop.w
 8001ea8:	c083126f 	.word	0xc083126f
 8001eac:	3ffda1ca 	.word	0x3ffda1ca
 8001eb0:	0800a914 	.word	0x0800a914
 8001eb4:	0800a91c 	.word	0x0800a91c

08001eb8 <GPS_nmea_to_dec>:

float GPS_nmea_to_dec(float deg_coord, char nsew)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b086      	sub	sp, #24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
 8001ec0:	460b      	mov	r3, r1
 8001ec2:	70fb      	strb	r3, [r7, #3]
    int degree = (int)(deg_coord / 100);
 8001ec4:	491b      	ldr	r1, [pc, #108]	@ (8001f34 <GPS_nmea_to_dec+0x7c>)
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff f810 	bl	8000eec <__aeabi_fdiv>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f91e 	bl	8001110 <__aeabi_f2iz>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	613b      	str	r3, [r7, #16]
    float minutes = deg_coord - degree * 100;
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2264      	movs	r2, #100	@ 0x64
 8001edc:	fb02 f303 	mul.w	r3, r2, r3
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f7fe fefb 	bl	8000cdc <__aeabi_i2f>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4619      	mov	r1, r3
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7fe fe40 	bl	8000b70 <__aeabi_fsub>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	60fb      	str	r3, [r7, #12]
    float dec_deg = minutes / 60;
 8001ef4:	4910      	ldr	r1, [pc, #64]	@ (8001f38 <GPS_nmea_to_dec+0x80>)
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7fe fff8 	bl	8000eec <__aeabi_fdiv>
 8001efc:	4603      	mov	r3, r0
 8001efe:	60bb      	str	r3, [r7, #8]
    float decimal = degree + dec_deg;
 8001f00:	6938      	ldr	r0, [r7, #16]
 8001f02:	f7fe feeb 	bl	8000cdc <__aeabi_i2f>
 8001f06:	4603      	mov	r3, r0
 8001f08:	4619      	mov	r1, r3
 8001f0a:	68b8      	ldr	r0, [r7, #8]
 8001f0c:	f7fe fe32 	bl	8000b74 <__addsf3>
 8001f10:	4603      	mov	r3, r0
 8001f12:	617b      	str	r3, [r7, #20]
    if (nsew == 'S' || nsew == 'W')
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	2b53      	cmp	r3, #83	@ 0x53
 8001f18:	d002      	beq.n	8001f20 <GPS_nmea_to_dec+0x68>
 8001f1a:	78fb      	ldrb	r3, [r7, #3]
 8001f1c:	2b57      	cmp	r3, #87	@ 0x57
 8001f1e:	d103      	bne.n	8001f28 <GPS_nmea_to_dec+0x70>
    { // return negative
        decimal *= -1;
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001f26:	617b      	str	r3, [r7, #20]
    }
    return decimal;
 8001f28:	697b      	ldr	r3, [r7, #20]
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	42c80000 	.word	0x42c80000
 8001f38:	42700000 	.word	0x42700000

08001f3c <getLatitude>:

float getLatitude(TAU1201_t *_gps)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
    return _gps->dec_latitude;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bc80      	pop	{r7}
 8001f50:	4770      	bx	lr

08001f52 <getLongitude>:

float getLongitude(TAU1201_t *_gps)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b083      	sub	sp, #12
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
    return _gps->dec_longitude;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <getSpeed>:

float getSpeed(TAU1201_t *_gps)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
    return _gps->speed_km;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
	...

08001f80 <findSubstring>:
//#include "../Inc/sd.h"

#define PRIME 101 // Số nguyên tố để tính mã băm

int findSubstring(char *str, char *substr)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08a      	sub	sp, #40	@ 0x28
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
	int len_str = strlen(str);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f7fe f8e0 	bl	8000150 <strlen>
 8001f90:	4603      	mov	r3, r0
 8001f92:	613b      	str	r3, [r7, #16]
	int len_substr = strlen(substr);
 8001f94:	6838      	ldr	r0, [r7, #0]
 8001f96:	f7fe f8db 	bl	8000150 <strlen>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	60fb      	str	r3, [r7, #12]
	int i, j;
	int hash_str = 0;	 // Mã băm của chuỗi str
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
	int hash_substr = 0; // Mã băm của chuỗi substr
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	61bb      	str	r3, [r7, #24]
	int h = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	617b      	str	r3, [r7, #20]

	// Tính h = (256^(len_substr-1)) % PRIME
	for (i = 0; i < len_substr - 1; i++)
 8001faa:	2300      	movs	r3, #0
 8001fac:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fae:	e00f      	b.n	8001fd0 <findSubstring+0x50>
	{
		h = (h * 256) % PRIME;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	021b      	lsls	r3, r3, #8
 8001fb4:	4a4f      	ldr	r2, [pc, #316]	@ (80020f4 <findSubstring+0x174>)
 8001fb6:	fb82 1203 	smull	r1, r2, r2, r3
 8001fba:	1111      	asrs	r1, r2, #4
 8001fbc:	17da      	asrs	r2, r3, #31
 8001fbe:	1a8a      	subs	r2, r1, r2
 8001fc0:	2165      	movs	r1, #101	@ 0x65
 8001fc2:	fb01 f202 	mul.w	r2, r1, r2
 8001fc6:	1a9b      	subs	r3, r3, r2
 8001fc8:	617b      	str	r3, [r7, #20]
	for (i = 0; i < len_substr - 1; i++)
 8001fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fcc:	3301      	adds	r3, #1
 8001fce:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	3b01      	subs	r3, #1
 8001fd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	dbea      	blt.n	8001fb0 <findSubstring+0x30>
	}

	// Tính mã băm cho chuỗi substr và len_substr ký tự đầu tiên của chuỗi str
	for (i = 0; i < len_substr; i++)
 8001fda:	2300      	movs	r3, #0
 8001fdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fde:	e026      	b.n	800202e <findSubstring+0xae>
	{
		hash_substr = (256 * hash_substr + (unsigned char)substr[i]) % PRIME;
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe6:	6839      	ldr	r1, [r7, #0]
 8001fe8:	440a      	add	r2, r1
 8001fea:	7812      	ldrb	r2, [r2, #0]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a41      	ldr	r2, [pc, #260]	@ (80020f4 <findSubstring+0x174>)
 8001ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ff4:	1111      	asrs	r1, r2, #4
 8001ff6:	17da      	asrs	r2, r3, #31
 8001ff8:	1a8a      	subs	r2, r1, r2
 8001ffa:	2165      	movs	r1, #101	@ 0x65
 8001ffc:	fb01 f202 	mul.w	r2, r1, r2
 8002000:	1a9b      	subs	r3, r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
		hash_str = (256 * hash_str + (unsigned char)str[i]) % PRIME;
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	440a      	add	r2, r1
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	4413      	add	r3, r2
 8002012:	4a38      	ldr	r2, [pc, #224]	@ (80020f4 <findSubstring+0x174>)
 8002014:	fb82 1203 	smull	r1, r2, r2, r3
 8002018:	1111      	asrs	r1, r2, #4
 800201a:	17da      	asrs	r2, r3, #31
 800201c:	1a8a      	subs	r2, r1, r2
 800201e:	2165      	movs	r1, #101	@ 0x65
 8002020:	fb01 f202 	mul.w	r2, r1, r2
 8002024:	1a9b      	subs	r3, r3, r2
 8002026:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < len_substr; i++)
 8002028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202a:	3301      	adds	r3, #1
 800202c:	627b      	str	r3, [r7, #36]	@ 0x24
 800202e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	429a      	cmp	r2, r3
 8002034:	dbd4      	blt.n	8001fe0 <findSubstring+0x60>
	}

	// Duyệt qua các ký tự của chuỗi str
	for (i = 0; i <= len_str - len_substr; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	627b      	str	r3, [r7, #36]	@ 0x24
 800203a:	e04f      	b.n	80020dc <findSubstring+0x15c>
	{
		// Nếu mã băm của chuỗi substr và len_substr ký tự tiếp theo của chuỗi str trùng nhau
		if (hash_substr == hash_str)
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	429a      	cmp	r2, r3
 8002042:	d11e      	bne.n	8002082 <findSubstring+0x102>
		{
			// Kiểm tra từng ký tự của chuỗi substr và chuỗi con tương ứng trong chuỗi str
			for (j = 0; j < len_substr; j++)
 8002044:	2300      	movs	r3, #0
 8002046:	623b      	str	r3, [r7, #32]
 8002048:	e00f      	b.n	800206a <findSubstring+0xea>
			{
				if (str[i + j] != substr[j])
 800204a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800204c:	6a3b      	ldr	r3, [r7, #32]
 800204e:	4413      	add	r3, r2
 8002050:	461a      	mov	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4413      	add	r3, r2
 8002056:	781a      	ldrb	r2, [r3, #0]
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	6839      	ldr	r1, [r7, #0]
 800205c:	440b      	add	r3, r1
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	429a      	cmp	r2, r3
 8002062:	d107      	bne.n	8002074 <findSubstring+0xf4>
			for (j = 0; j < len_substr; j++)
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	3301      	adds	r3, #1
 8002068:	623b      	str	r3, [r7, #32]
 800206a:	6a3a      	ldr	r2, [r7, #32]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	429a      	cmp	r2, r3
 8002070:	dbeb      	blt.n	800204a <findSubstring+0xca>
 8002072:	e000      	b.n	8002076 <findSubstring+0xf6>
					break;
 8002074:	bf00      	nop
			}
			// Nếu tất cả các ký tự đều trùng khớp
			if (j == len_substr)
 8002076:	6a3a      	ldr	r2, [r7, #32]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	429a      	cmp	r2, r3
 800207c:	d101      	bne.n	8002082 <findSubstring+0x102>
				return i;
 800207e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002080:	e034      	b.n	80020ec <findSubstring+0x16c>
		}
		// Tính lại mã băm cho len_substr ký tự tiếp theo của chuỗi str
		if (i < len_str - len_substr)
 8002082:	693a      	ldr	r2, [r7, #16]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800208a:	429a      	cmp	r2, r3
 800208c:	da23      	bge.n	80020d6 <findSubstring+0x156>
		{
			hash_str = (256 * (hash_str - (unsigned char)str[i] * h) + (unsigned char)str[i + len_substr]) % PRIME;
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	781b      	ldrb	r3, [r3, #0]
 8002096:	461a      	mov	r2, r3
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fb02 f303 	mul.w	r3, r2, r3
 800209e:	69fa      	ldr	r2, [r7, #28]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	440a      	add	r2, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	440a      	add	r2, r1
 80020b0:	7812      	ldrb	r2, [r2, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a0f      	ldr	r2, [pc, #60]	@ (80020f4 <findSubstring+0x174>)
 80020b6:	fb82 1203 	smull	r1, r2, r2, r3
 80020ba:	1111      	asrs	r1, r2, #4
 80020bc:	17da      	asrs	r2, r3, #31
 80020be:	1a8a      	subs	r2, r1, r2
 80020c0:	2165      	movs	r1, #101	@ 0x65
 80020c2:	fb01 f202 	mul.w	r2, r1, r2
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	61fb      	str	r3, [r7, #28]
			if (hash_str < 0)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	da02      	bge.n	80020d6 <findSubstring+0x156>
				hash_str = (hash_str + PRIME);
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	3365      	adds	r3, #101	@ 0x65
 80020d4:	61fb      	str	r3, [r7, #28]
	for (i = 0; i <= len_str - len_substr; i++)
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
 80020dc:	693a      	ldr	r2, [r7, #16]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dda9      	ble.n	800203c <findSubstring+0xbc>
		}
	}
	return -1; // Trả về -1 nếu không tìm thấy chuỗi con
 80020e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3728      	adds	r7, #40	@ 0x28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	288df0cb 	.word	0x288df0cb

080020f8 <SIM_UART_DMA_CallBack>:

// Uart DMA CallBack
void SIM_UART_DMA_CallBack(sim7600_t *_sim)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(_sim->hardware.huart, (uint8_t *)_sim->buffer, SIM_RX_BUFF_SIZE);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6818      	ldr	r0, [r3, #0]
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	339c      	adds	r3, #156	@ 0x9c
 8002108:	f240 424c 	movw	r2, #1100	@ 0x44c
 800210c:	4619      	mov	r1, r3
 800210e:	f002 fb92 	bl	8004836 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8002112:	bf00      	nop
 8002114:	3708      	adds	r7, #8
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <ClearBuffer>:
	GetSignal(_sim);
}

// Clear UART Buffer
void ClearBuffer(sim7600_t *_sim)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b082      	sub	sp, #8
 800211e:	af00      	add	r7, sp, #0
 8002120:	6078      	str	r0, [r7, #4]
	HAL_UART_DMAStop(_sim->hardware.huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f002 fb06 	bl	8004738 <HAL_UART_DMAStop>
	HAL_UARTEx_ReceiveToIdle_DMA(_sim->hardware.huart, (uint8_t *)_sim->buffer, SIM_RX_BUFF_SIZE);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6818      	ldr	r0, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	339c      	adds	r3, #156	@ 0x9c
 8002134:	f240 424c 	movw	r2, #1100	@ 0x44c
 8002138:	4619      	mov	r1, r3
 800213a:	f002 fb7c 	bl	8004836 <HAL_UARTEx_ReceiveToIdle_DMA>
	memset(_sim->buffer, 0, SIM_RX_BUFF_SIZE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	339c      	adds	r3, #156	@ 0x9c
 8002142:	f240 424c 	movw	r2, #1100	@ 0x44c
 8002146:	2100      	movs	r1, #0
 8002148:	4618      	mov	r0, r3
 800214a:	f005 f9b3 	bl	80074b4 <memset>
}
 800214e:	bf00      	nop
 8002150:	3708      	adds	r7, #8
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <WaitForResponse>:

// Wait until SIMCOM module response data
// If timeout: return -1
// If find value: return the first char's address
int WaitForResponse(sim7600_t *_sim, char *response, long long timeout, uint8_t clear_buffer)
{
 8002156:	b5b0      	push	{r4, r5, r7, lr}
 8002158:	b088      	sub	sp, #32
 800215a:	af00      	add	r7, sp, #0
 800215c:	60f8      	str	r0, [r7, #12]
 800215e:	60b9      	str	r1, [r7, #8]
 8002160:	e9c7 2300 	strd	r2, r3, [r7]
	int found;
	long long time = timeout;
 8002164:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002168:	e9c7 2306 	strd	r2, r3, [r7, #24]
#ifdef SIM_Debug
	//    memset(_sim->response, 0, sizeof(_sim->response));
	strcpy(_sim->DebugStr, response);
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f203 5322 	addw	r3, r3, #1314	@ 0x522
 8002172:	68b9      	ldr	r1, [r7, #8]
 8002174:	4618      	mov	r0, r3
 8002176:	f005 fa38 	bl	80075ea <strcpy>
#endif
	while (time >= 0)
 800217a:	e021      	b.n	80021c0 <WaitForResponse+0x6a>
	{
		found = findSubstring(_sim->buffer, response);
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	339c      	adds	r3, #156	@ 0x9c
 8002180:	68b9      	ldr	r1, [r7, #8]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fefc 	bl	8001f80 <findSubstring>
 8002188:	6178      	str	r0, [r7, #20]
		_sim->x = found;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

		if (found != -1)
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002198:	d008      	beq.n	80021ac <WaitForResponse+0x56>
		{
			if (clear_buffer)
 800219a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d002      	beq.n	80021a8 <WaitForResponse+0x52>
			{
				ClearBuffer(_sim);
 80021a2:	68f8      	ldr	r0, [r7, #12]
 80021a4:	f7ff ffb9 	bl	800211a <ClearBuffer>
			}
#ifdef SIM_Debug
//	strcpy(_sim->response,"FoundSubStr");
#endif
			return found;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	e016      	b.n	80021da <WaitForResponse+0x84>
		}
		time = time - 5;
 80021ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021b0:	1f54      	subs	r4, r2, #5
 80021b2:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 80021b6:	e9c7 4506 	strd	r4, r5, [r7, #24]
		SIM_Delay(5);
 80021ba:	2005      	movs	r0, #5
 80021bc:	f001 f83c 	bl	8003238 <HAL_Delay>
	while (time >= 0)
 80021c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	dad9      	bge.n	800217c <WaitForResponse+0x26>

#ifdef SIM_Debug
//	strcpy(_sim->response,"TIME OUT");
#endif

	if (clear_buffer)
 80021c8:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <WaitForResponse+0x80>
	{
		ClearBuffer(_sim);
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff ffa2 	bl	800211a <ClearBuffer>
	}
	return -1;
 80021d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3720      	adds	r7, #32
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080021e4 <WaitForResponceTrueFalse>:
// Wait until SIMCOM module response data and check which data recieved
// If timeout, return -1
// If found response true, return 1
// If found response false, return 0
int WaitForResponceTrueFalse(sim7600_t *_sim, char *responceTrue, char *responceFalse, long long timeout, uint8_t clear_buffer)
{
 80021e4:	b5b0      	push	{r4, r5, r7, lr}
 80021e6:	b088      	sub	sp, #32
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
	int foundTrue;
	int foundFalse;
	long long time = timeout;
 80021f0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80021f4:	e9c7 2306 	strd	r2, r3, [r7, #24]

	while (time >= 0)
 80021f8:	e05a      	b.n	80022b0 <WaitForResponceTrueFalse+0xcc>
	{
		foundTrue = findSubstring(_sim->buffer, responceTrue);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	339c      	adds	r3, #156	@ 0x9c
 80021fe:	68b9      	ldr	r1, [r7, #8]
 8002200:	4618      	mov	r0, r3
 8002202:	f7ff febd 	bl	8001f80 <findSubstring>
 8002206:	6178      	str	r0, [r7, #20]

		if (foundTrue != -1)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800220e:	d01b      	beq.n	8002248 <WaitForResponceTrueFalse+0x64>
		{
			if (clear_buffer)
 8002210:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <WaitForResponceTrueFalse+0x3a>
			{
				ClearBuffer(_sim);
 8002218:	68f8      	ldr	r0, [r7, #12]
 800221a:	f7ff ff7e 	bl	800211a <ClearBuffer>
			}
#ifdef SIM_Debug
			memset(_sim->response, 0, sizeof(_sim->response));
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002224:	2232      	movs	r2, #50	@ 0x32
 8002226:	2100      	movs	r1, #0
 8002228:	4618      	mov	r0, r3
 800222a:	f005 f943 	bl	80074b4 <memset>
			strcpy(_sim->response, "FoundSubStrTrue");
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002234:	4a27      	ldr	r2, [pc, #156]	@ (80022d4 <WaitForResponceTrueFalse+0xf0>)
 8002236:	461c      	mov	r4, r3
 8002238:	4615      	mov	r5, r2
 800223a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800223c:	6020      	str	r0, [r4, #0]
 800223e:	6061      	str	r1, [r4, #4]
 8002240:	60a2      	str	r2, [r4, #8]
 8002242:	60e3      	str	r3, [r4, #12]
#endif
			return 1;
 8002244:	2301      	movs	r3, #1
 8002246:	e040      	b.n	80022ca <WaitForResponceTrueFalse+0xe6>
		}

		foundFalse = findSubstring(_sim->buffer, responceFalse);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	339c      	adds	r3, #156	@ 0x9c
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4618      	mov	r0, r3
 8002250:	f7ff fe96 	bl	8001f80 <findSubstring>
 8002254:	6138      	str	r0, [r7, #16]

		if (foundFalse != -1)
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800225c:	d01d      	beq.n	800229a <WaitForResponceTrueFalse+0xb6>
		{
			if (clear_buffer)
 800225e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002262:	2b00      	cmp	r3, #0
 8002264:	d002      	beq.n	800226c <WaitForResponceTrueFalse+0x88>
			{
				ClearBuffer(_sim);
 8002266:	68f8      	ldr	r0, [r7, #12]
 8002268:	f7ff ff57 	bl	800211a <ClearBuffer>
			}
#ifdef SIM_Debug
			memset(_sim->response, 0, sizeof(_sim->response));
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002272:	2232      	movs	r2, #50	@ 0x32
 8002274:	2100      	movs	r1, #0
 8002276:	4618      	mov	r0, r3
 8002278:	f005 f91c 	bl	80074b4 <memset>
			strcpy(_sim->response, "FoundSubStrFalse");
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002282:	4a15      	ldr	r2, [pc, #84]	@ (80022d8 <WaitForResponceTrueFalse+0xf4>)
 8002284:	461d      	mov	r5, r3
 8002286:	4614      	mov	r4, r2
 8002288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800228a:	6028      	str	r0, [r5, #0]
 800228c:	6069      	str	r1, [r5, #4]
 800228e:	60aa      	str	r2, [r5, #8]
 8002290:	60eb      	str	r3, [r5, #12]
 8002292:	7823      	ldrb	r3, [r4, #0]
 8002294:	742b      	strb	r3, [r5, #16]
#endif
			return 0;
 8002296:	2300      	movs	r3, #0
 8002298:	e017      	b.n	80022ca <WaitForResponceTrueFalse+0xe6>
		}

		time = time - 10;
 800229a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800229e:	f1b2 040a 	subs.w	r4, r2, #10
 80022a2:	f143 35ff 	adc.w	r5, r3, #4294967295	@ 0xffffffff
 80022a6:	e9c7 4506 	strd	r4, r5, [r7, #24]
		SIM_Delay(10);
 80022aa:	200a      	movs	r0, #10
 80022ac:	f000 ffc4 	bl	8003238 <HAL_Delay>
	while (time >= 0)
 80022b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	daa0      	bge.n	80021fa <WaitForResponceTrueFalse+0x16>
	}

	if (clear_buffer)
 80022b8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <WaitForResponceTrueFalse+0xe2>
	{
		ClearBuffer(_sim);
 80022c0:	68f8      	ldr	r0, [r7, #12]
 80022c2:	f7ff ff2a 	bl	800211a <ClearBuffer>
	}
	return -1;
 80022c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3720      	adds	r7, #32
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bdb0      	pop	{r4, r5, r7, pc}
 80022d2:	bf00      	nop
 80022d4:	0800a940 	.word	0x0800a940
 80022d8:	0800a950 	.word	0x0800a950

080022dc <SendCommand>:

int SendCommand(sim7600_t *_sim, char *command, char *response, long long timeout, uint8_t clear_buffer)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b088      	sub	sp, #32
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
	uint16_t length = strlen(command);
 80022e8:	68b8      	ldr	r0, [r7, #8]
 80022ea:	f7fd ff31 	bl	8000150 <strlen>
 80022ee:	4603      	mov	r3, r0
 80022f0:	82fb      	strh	r3, [r7, #22]
	if (HAL_UART_Transmit(_sim->hardware.huart, (uint8_t *)command, length, 1000) != HAL_OK)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	8afa      	ldrh	r2, [r7, #22]
 80022f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80022fc:	68b9      	ldr	r1, [r7, #8]
 80022fe:	f002 f96b 	bl	80045d8 <HAL_UART_Transmit>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SendCommand+0x30>
	{
		return SIM7600_ERROR;
 8002308:	2300      	movs	r3, #0
 800230a:	e009      	b.n	8002320 <SendCommand+0x44>
	}
	else
	{
		return WaitForResponse(_sim, response, timeout, clear_buffer);
 800230c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	68f8      	ldr	r0, [r7, #12]
 800231a:	f7ff ff1c 	bl	8002156 <WaitForResponse>
 800231e:	4603      	mov	r3, r0
	}
}
 8002320:	4618      	mov	r0, r3
 8002322:	3718      	adds	r7, #24
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}

08002328 <SendCommandCheckTrueFalse>:

int SendCommandCheckTrueFalse(sim7600_t *_sim, char *command, char *responceTrue, char *responceFalse, long long timeout, uint8_t clear_buffer)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b08a      	sub	sp, #40	@ 0x28
 800232c:	af04      	add	r7, sp, #16
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
	uint16_t length = strlen(command);
 8002336:	68b8      	ldr	r0, [r7, #8]
 8002338:	f7fd ff0a 	bl	8000150 <strlen>
 800233c:	4603      	mov	r3, r0
 800233e:	82fb      	strh	r3, [r7, #22]
	if (HAL_UART_Transmit(_sim->hardware.huart, (uint8_t *)command, length, 1000) != HAL_OK)
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	8afa      	ldrh	r2, [r7, #22]
 8002346:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	f002 f944 	bl	80045d8 <HAL_UART_Transmit>
 8002350:	4603      	mov	r3, r0
 8002352:	2b00      	cmp	r3, #0
 8002354:	d001      	beq.n	800235a <SendCommandCheckTrueFalse+0x32>
	{
		return SIM7600_ERROR;
 8002356:	2300      	movs	r3, #0
 8002358:	e00c      	b.n	8002374 <SendCommandCheckTrueFalse+0x4c>
	}
	else
	{
		return WaitForResponceTrueFalse(_sim, responceTrue, responceFalse, timeout, clear_buffer);
 800235a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800235e:	9302      	str	r3, [sp, #8]
 8002360:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002364:	e9cd 2300 	strd	r2, r3, [sp]
 8002368:	683a      	ldr	r2, [r7, #0]
 800236a:	6879      	ldr	r1, [r7, #4]
 800236c:	68f8      	ldr	r0, [r7, #12]
 800236e:	f7ff ff39 	bl	80021e4 <WaitForResponceTrueFalse>
 8002372:	4603      	mov	r3, r0
	}
}
 8002374:	4618      	mov	r0, r3
 8002376:	3718      	adds	r7, #24
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <SIMInit>:

// Init module
int SIMInit(sim7600_t *_sim, UART_HandleTypeDef *huart, DMA_HandleTypeDef *hdma, uint16_t ResetPin, GPIO_TypeDef *ResetPort)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
 8002388:	807b      	strh	r3, [r7, #2]
	_sim->hardware.huart = huart;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	68ba      	ldr	r2, [r7, #8]
 800238e:	601a      	str	r2, [r3, #0]
	_sim->hardware.hdma = hdma;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	605a      	str	r2, [r3, #4]

	// Reset Pin
	_sim->hardware.ResetPin = ResetPin;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	887a      	ldrh	r2, [r7, #2]
 800239a:	821a      	strh	r2, [r3, #16]
	_sim->hardware.ResetPort = ResetPort;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	615a      	str	r2, [r3, #20]


	HAL_UARTEx_ReceiveToIdle_DMA(_sim->hardware.huart, (uint8_t *)_sim->buffer, SIM_RX_BUFF_SIZE);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6818      	ldr	r0, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	339c      	adds	r3, #156	@ 0x9c
 80023aa:	f240 424c 	movw	r2, #1100	@ 0x44c
 80023ae:	4619      	mov	r1, r3
 80023b0:	f002 fa41 	bl	8004836 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(_sim->hardware.hdma, DMA_IT_HT);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	685b      	ldr	r3, [r3, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0204 	bic.w	r2, r2, #4
 80023c6:	601a      	str	r2, [r3, #0]

	return StartModuleService(_sim);
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 f805 	bl	80023d8 <StartModuleService>
 80023ce:	4603      	mov	r3, r0
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <StartModuleService>:

/*
 *
 * */
int StartModuleService(sim7600_t *_sim)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
//			_sim->ModulePower = 0;
//			return SIM7600_ERROR;
//		}
//	}

	if (ConnectToModule(_sim) == SIM7600_OK)
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f819 	bl	8002418 <ConnectToModule>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d10c      	bne.n	8002406 <StartModuleService+0x2e>
	{
		_sim->ModuleConnect = 1;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2201      	movs	r2, #1
 80023f0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	{
		_sim->ModuleConnect = 0;
		return SIM7600_ERROR;
	}

	CheckSimConnect(_sim);
 80023f4:	6878      	ldr	r0, [r7, #4]
 80023f6:	f000 f8b1 	bl	800255c <CheckSimConnect>
	SIM_Delay(4000);
 80023fa:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80023fe:	f000 ff1b 	bl	8003238 <HAL_Delay>

	return SIM7600_OK;
 8002402:	2301      	movs	r3, #1
 8002404:	e004      	b.n	8002410 <StartModuleService+0x38>
		_sim->ModuleConnect = 0;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		return SIM7600_ERROR;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}

08002418 <ConnectToModule>:
/*
 * When call this function, It'll send "AT" command to module
 * If connect to module complete, It'll responce "OK"
 * */
int ConnectToModule(sim7600_t *_sim)
{
 8002418:	b5b0      	push	{r4, r5, r7, lr}
 800241a:	b088      	sub	sp, #32
 800241c:	af04      	add	r7, sp, #16
 800241e:	6078      	str	r0, [r7, #4]
	//	Send AT
	int Check = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
	while (SendCommand(_sim, SIM_AT, SIM_OK, 1000, 1) == -1)
 8002424:	e01f      	b.n	8002466 <ConnectToModule+0x4e>
	{
		++Check;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	3301      	adds	r3, #1
 800242a:	60fb      	str	r3, [r7, #12]
		if (Check > 30)
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2b1e      	cmp	r3, #30
 8002430:	dd19      	ble.n	8002466 <ConnectToModule+0x4e>
		{
#ifdef SIM_Debug
			memset(_sim->response, 0, sizeof(_sim->response));
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002438:	2232      	movs	r2, #50	@ 0x32
 800243a:	2100      	movs	r1, #0
 800243c:	4618      	mov	r0, r3
 800243e:	f005 f839 	bl	80074b4 <memset>
			strcpy(_sim->response, "Send AT error");
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002448:	4a3d      	ldr	r2, [pc, #244]	@ (8002540 <ConnectToModule+0x128>)
 800244a:	461c      	mov	r4, r3
 800244c:	4613      	mov	r3, r2
 800244e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8002450:	6020      	str	r0, [r4, #0]
 8002452:	6061      	str	r1, [r4, #4]
 8002454:	60a2      	str	r2, [r4, #8]
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	81a3      	strh	r3, [r4, #12]
#endif
			_sim->ModuleConnect = 0;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			return SIM7600_ERROR;
 8002462:	2300      	movs	r3, #0
 8002464:	e068      	b.n	8002538 <ConnectToModule+0x120>
	while (SendCommand(_sim, SIM_AT, SIM_OK, 1000, 1) == -1)
 8002466:	2301      	movs	r3, #1
 8002468:	9302      	str	r3, [sp, #8]
 800246a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800246e:	f04f 0300 	mov.w	r3, #0
 8002472:	e9cd 2300 	strd	r2, r3, [sp]
 8002476:	4a33      	ldr	r2, [pc, #204]	@ (8002544 <ConnectToModule+0x12c>)
 8002478:	4933      	ldr	r1, [pc, #204]	@ (8002548 <ConnectToModule+0x130>)
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ff2e 	bl	80022dc <SendCommand>
 8002480:	4603      	mov	r3, r0
 8002482:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002486:	d0ce      	beq.n	8002426 <ConnectToModule+0xe>
		}
	}
#ifdef SIM_Debug
	memset(_sim->response, 0, sizeof(_sim->response));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800248e:	2232      	movs	r2, #50	@ 0x32
 8002490:	2100      	movs	r1, #0
 8002492:	4618      	mov	r0, r3
 8002494:	f005 f80e 	bl	80074b4 <memset>
	strcpy(_sim->response, "Send AT OK");
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800249e:	492b      	ldr	r1, [pc, #172]	@ (800254c <ConnectToModule+0x134>)
 80024a0:	461a      	mov	r2, r3
 80024a2:	460b      	mov	r3, r1
 80024a4:	cb03      	ldmia	r3!, {r0, r1}
 80024a6:	6010      	str	r0, [r2, #0]
 80024a8:	6051      	str	r1, [r2, #4]
 80024aa:	8819      	ldrh	r1, [r3, #0]
 80024ac:	789b      	ldrb	r3, [r3, #2]
 80024ae:	8111      	strh	r1, [r2, #8]
 80024b0:	7293      	strb	r3, [r2, #10]
#endif

	// Send ATE0
	if (SendCommand(_sim, SIM_ATE0, SIM_OK, 1000, 1) != -1)
 80024b2:	2301      	movs	r3, #1
 80024b4:	9302      	str	r3, [sp, #8]
 80024b6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80024ba:	f04f 0300 	mov.w	r3, #0
 80024be:	e9cd 2300 	strd	r2, r3, [sp]
 80024c2:	4a20      	ldr	r2, [pc, #128]	@ (8002544 <ConnectToModule+0x12c>)
 80024c4:	4922      	ldr	r1, [pc, #136]	@ (8002550 <ConnectToModule+0x138>)
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f7ff ff08 	bl	80022dc <SendCommand>
 80024cc:	4603      	mov	r3, r0
 80024ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80024d2:	d019      	beq.n	8002508 <ConnectToModule+0xf0>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80024da:	2232      	movs	r2, #50	@ 0x32
 80024dc:	2100      	movs	r1, #0
 80024de:	4618      	mov	r0, r3
 80024e0:	f004 ffe8 	bl	80074b4 <memset>
		strcpy(_sim->response, "Send ATE0 OK");
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80024ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002554 <ConnectToModule+0x13c>)
 80024ec:	461c      	mov	r4, r3
 80024ee:	4613      	mov	r3, r2
 80024f0:	cb07      	ldmia	r3!, {r0, r1, r2}
 80024f2:	6020      	str	r0, [r4, #0]
 80024f4:	6061      	str	r1, [r4, #4]
 80024f6:	60a2      	str	r2, [r4, #8]
 80024f8:	781b      	ldrb	r3, [r3, #0]
 80024fa:	7323      	strb	r3, [r4, #12]
		strcpy(_sim->response, "Send ATE0 error");
#endif
		_sim->ModuleConnect = 0;
		return SIM7600_ERROR;
	}
	_sim->ModuleConnect = 1;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2201      	movs	r2, #1
 8002500:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
	return SIM7600_OK;
 8002504:	2301      	movs	r3, #1
 8002506:	e017      	b.n	8002538 <ConnectToModule+0x120>
		memset(_sim->response, 0, sizeof(_sim->response));
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800250e:	2232      	movs	r2, #50	@ 0x32
 8002510:	2100      	movs	r1, #0
 8002512:	4618      	mov	r0, r3
 8002514:	f004 ffce 	bl	80074b4 <memset>
		strcpy(_sim->response, "Send ATE0 error");
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800251e:	4a0e      	ldr	r2, [pc, #56]	@ (8002558 <ConnectToModule+0x140>)
 8002520:	461c      	mov	r4, r3
 8002522:	4615      	mov	r5, r2
 8002524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002526:	6020      	str	r0, [r4, #0]
 8002528:	6061      	str	r1, [r4, #4]
 800252a:	60a2      	str	r2, [r4, #8]
 800252c:	60e3      	str	r3, [r4, #12]
		_sim->ModuleConnect = 0;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
		return SIM7600_ERROR;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bdb0      	pop	{r4, r5, r7, pc}
 8002540:	0800aa74 	.word	0x0800aa74
 8002544:	0800aa84 	.word	0x0800aa84
 8002548:	0800aa8c 	.word	0x0800aa8c
 800254c:	0800aa94 	.word	0x0800aa94
 8002550:	0800aaa0 	.word	0x0800aaa0
 8002554:	0800aaa8 	.word	0x0800aaa8
 8002558:	0800aab8 	.word	0x0800aab8

0800255c <CheckSimConnect>:

/*
 * This function'll check the sim card connection.
 * */
int CheckSimConnect(sim7600_t *_sim)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b087      	sub	sp, #28
 8002560:	af04      	add	r7, sp, #16
 8002562:	6078      	str	r0, [r7, #4]
	//		strcpy(_sim->response,"SETUP HOTSWAP LEVEL ERROR");
	// #endif
	//		return SIM7600_ERROR;
	//	}
	//	Check SIM connect
	if (SendCommand(_sim, "AT+CPIN?\r\n", "+CPIN: READY", 1000, 1) == -1)
 8002564:	2301      	movs	r3, #1
 8002566:	9302      	str	r3, [sp, #8]
 8002568:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800256c:	f04f 0300 	mov.w	r3, #0
 8002570:	e9cd 2300 	strd	r2, r3, [sp]
 8002574:	4a20      	ldr	r2, [pc, #128]	@ (80025f8 <CheckSimConnect+0x9c>)
 8002576:	4921      	ldr	r1, [pc, #132]	@ (80025fc <CheckSimConnect+0xa0>)
 8002578:	6878      	ldr	r0, [r7, #4]
 800257a:	f7ff feaf 	bl	80022dc <SendCommand>
 800257e:	4603      	mov	r3, r0
 8002580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002584:	d117      	bne.n	80025b6 <CheckSimConnect+0x5a>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800258c:	2232      	movs	r2, #50	@ 0x32
 800258e:	2100      	movs	r1, #0
 8002590:	4618      	mov	r0, r3
 8002592:	f004 ff8f 	bl	80074b4 <memset>
		strcpy(_sim->response, "NO SIM");
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800259c:	4a18      	ldr	r2, [pc, #96]	@ (8002600 <CheckSimConnect+0xa4>)
 800259e:	6810      	ldr	r0, [r2, #0]
 80025a0:	6018      	str	r0, [r3, #0]
 80025a2:	8891      	ldrh	r1, [r2, #4]
 80025a4:	7992      	ldrb	r2, [r2, #6]
 80025a6:	8099      	strh	r1, [r3, #4]
 80025a8:	719a      	strb	r2, [r3, #6]
#endif
		_sim->SimConnect = 0;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
		return SIM7600_ERROR;
 80025b2:	2300      	movs	r3, #0
 80025b4:	e01b      	b.n	80025ee <CheckSimConnect+0x92>
	}

#ifdef SIM_Debug
	memset(_sim->response, 0, sizeof(_sim->response));
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80025bc:	2232      	movs	r2, #50	@ 0x32
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f004 ff77 	bl	80074b4 <memset>
	strcpy(_sim->response, "SIM CONNECTED");
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80025cc:	4a0d      	ldr	r2, [pc, #52]	@ (8002604 <CheckSimConnect+0xa8>)
 80025ce:	461c      	mov	r4, r3
 80025d0:	4613      	mov	r3, r2
 80025d2:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025d4:	6020      	str	r0, [r4, #0]
 80025d6:	6061      	str	r1, [r4, #4]
 80025d8:	60a2      	str	r2, [r4, #8]
 80025da:	881b      	ldrh	r3, [r3, #0]
 80025dc:	81a3      	strh	r3, [r4, #12]
#endif

	GetPhoneNumber(_sim);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f812 	bl	8002608 <GetPhoneNumber>

	_sim->SimConnect = 1;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
	return SIM7600_OK;
 80025ec:	2301      	movs	r3, #1
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd90      	pop	{r4, r7, pc}
 80025f6:	bf00      	nop
 80025f8:	0800aac8 	.word	0x0800aac8
 80025fc:	0800aad8 	.word	0x0800aad8
 8002600:	0800aae4 	.word	0x0800aae4
 8002604:	0800aaec 	.word	0x0800aaec

08002608 <GetPhoneNumber>:

// Get SIMCardPhoneNumber
int GetPhoneNumber(sim7600_t *_sim)
{
 8002608:	b5b0      	push	{r4, r5, r7, lr}
 800260a:	b09c      	sub	sp, #112	@ 0x70
 800260c:	af04      	add	r7, sp, #16
 800260e:	6078      	str	r0, [r7, #4]
	int foundRes = SendCommand(_sim, "AT+CNUM\r\n", "+CNUM:", 2000, 0);
 8002610:	2300      	movs	r3, #0
 8002612:	9302      	str	r3, [sp, #8]
 8002614:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	e9cd 2300 	strd	r2, r3, [sp]
 8002620:	4a61      	ldr	r2, [pc, #388]	@ (80027a8 <GetPhoneNumber+0x1a0>)
 8002622:	4962      	ldr	r1, [pc, #392]	@ (80027ac <GetPhoneNumber+0x1a4>)
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff fe59 	bl	80022dc <SendCommand>
 800262a:	64b8      	str	r0, [r7, #72]	@ 0x48
	if (foundRes == -1)
 800262c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800262e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002632:	d11e      	bne.n	8002672 <GetPhoneNumber+0x6a>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800263a:	2232      	movs	r2, #50	@ 0x32
 800263c:	2100      	movs	r1, #0
 800263e:	4618      	mov	r0, r3
 8002640:	f004 ff38 	bl	80074b4 <memset>
		strcpy(_sim->response, "Get Phone Number ERROR");
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800264a:	4a59      	ldr	r2, [pc, #356]	@ (80027b0 <GetPhoneNumber+0x1a8>)
 800264c:	461c      	mov	r4, r3
 800264e:	4615      	mov	r5, r2
 8002650:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002652:	6020      	str	r0, [r4, #0]
 8002654:	6061      	str	r1, [r4, #4]
 8002656:	60a2      	str	r2, [r4, #8]
 8002658:	60e3      	str	r3, [r4, #12]
 800265a:	6828      	ldr	r0, [r5, #0]
 800265c:	6120      	str	r0, [r4, #16]
 800265e:	88ab      	ldrh	r3, [r5, #4]
 8002660:	79aa      	ldrb	r2, [r5, #6]
 8002662:	82a3      	strh	r3, [r4, #20]
 8002664:	4613      	mov	r3, r2
 8002666:	75a3      	strb	r3, [r4, #22]
#endif
		ClearBuffer(_sim);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f7ff fd56 	bl	800211a <ClearBuffer>
		return SIM7600_ERROR;
 800266e:	2300      	movs	r3, #0
 8002670:	e096      	b.n	80027a0 <GetPhoneNumber+0x198>
	}

	char DataResponseStr[60];
	int count = 0;
 8002672:	2300      	movs	r3, #0
 8002674:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for (int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i)
 8002676:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002678:	65bb      	str	r3, [r7, #88]	@ 0x58
 800267a:	e017      	b.n	80026ac <GetPhoneNumber+0xa4>
	{
		if (_sim->buffer[i] == '\r')
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002680:	4413      	add	r3, r2
 8002682:	339c      	adds	r3, #156	@ 0x9c
 8002684:	781b      	ldrb	r3, [r3, #0]
 8002686:	2b0d      	cmp	r3, #13
 8002688:	d016      	beq.n	80026b8 <GetPhoneNumber+0xb0>
			break;
		DataResponseStr[count] = _sim->buffer[i];
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800268e:	4413      	add	r3, r2
 8002690:	339c      	adds	r3, #156	@ 0x9c
 8002692:	7819      	ldrb	r1, [r3, #0]
 8002694:	f107 020c 	add.w	r2, r7, #12
 8002698:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800269a:	4413      	add	r3, r2
 800269c:	460a      	mov	r2, r1
 800269e:	701a      	strb	r2, [r3, #0]
		++count;
 80026a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026a2:	3301      	adds	r3, #1
 80026a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for (int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i)
 80026a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026a8:	3301      	adds	r3, #1
 80026aa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80026ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80026ae:	f240 424c 	movw	r2, #1100	@ 0x44c
 80026b2:	4293      	cmp	r3, r2
 80026b4:	dde2      	ble.n	800267c <GetPhoneNumber+0x74>
 80026b6:	e000      	b.n	80026ba <GetPhoneNumber+0xb2>
			break;
 80026b8:	bf00      	nop
	}
#ifdef SIM_Debug
	memset(_sim->response, 0, sizeof(_sim->response));
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80026c0:	2232      	movs	r2, #50	@ 0x32
 80026c2:	2100      	movs	r1, #0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f004 fef5 	bl	80074b4 <memset>
	strcpy(_sim->DebugResponceStr, DataResponseStr);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f203 5386 	addw	r3, r3, #1414	@ 0x586
 80026d0:	f107 020c 	add.w	r2, r7, #12
 80026d4:	4611      	mov	r1, r2
 80026d6:	4618      	mov	r0, r3
 80026d8:	f004 ff87 	bl	80075ea <strcpy>
#endif

	int AnalysisPointer = 0;
 80026dc:	2300      	movs	r3, #0
 80026de:	657b      	str	r3, [r7, #84]	@ 0x54
	count = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for (int i = AnalysisPointer; i <= 60; ++i)
 80026e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80026e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80026e8:	e01f      	b.n	800272a <GetPhoneNumber+0x122>
	{
		if (DataResponseStr[i] == '\"')
 80026ea:	f107 020c 	add.w	r2, r7, #12
 80026ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80026f0:	4413      	add	r3, r2
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	2b22      	cmp	r3, #34	@ 0x22
 80026f6:	d102      	bne.n	80026fe <GetPhoneNumber+0xf6>
			++count;
 80026f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026fa:	3301      	adds	r3, #1
 80026fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
		if (count == 3)
 80026fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002700:	2b03      	cmp	r3, #3
 8002702:	d10f      	bne.n	8002724 <GetPhoneNumber+0x11c>
		{
			if (DataResponseStr[i + 1] == '0')
 8002704:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002706:	3301      	adds	r3, #1
 8002708:	3360      	adds	r3, #96	@ 0x60
 800270a:	443b      	add	r3, r7
 800270c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8002710:	2b30      	cmp	r3, #48	@ 0x30
 8002712:	d103      	bne.n	800271c <GetPhoneNumber+0x114>
				AnalysisPointer = i + 2;
 8002714:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002716:	3302      	adds	r3, #2
 8002718:	657b      	str	r3, [r7, #84]	@ 0x54
			else
				AnalysisPointer = i + 4;
			break;
 800271a:	e009      	b.n	8002730 <GetPhoneNumber+0x128>
				AnalysisPointer = i + 4;
 800271c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800271e:	3304      	adds	r3, #4
 8002720:	657b      	str	r3, [r7, #84]	@ 0x54
			break;
 8002722:	e005      	b.n	8002730 <GetPhoneNumber+0x128>
	for (int i = AnalysisPointer; i <= 60; ++i)
 8002724:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002726:	3301      	adds	r3, #1
 8002728:	653b      	str	r3, [r7, #80]	@ 0x50
 800272a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800272c:	2b3c      	cmp	r3, #60	@ 0x3c
 800272e:	dddc      	ble.n	80026ea <GetPhoneNumber+0xe2>
		}
	}
	count = 1;
 8002730:	2301      	movs	r3, #1
 8002732:	65fb      	str	r3, [r7, #92]	@ 0x5c
	memset(_sim->PhoneNumber, 0, strlen(_sim->PhoneNumber));
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 043c 	add.w	r4, r3, #60	@ 0x3c
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	333c      	adds	r3, #60	@ 0x3c
 800273e:	4618      	mov	r0, r3
 8002740:	f7fd fd06 	bl	8000150 <strlen>
 8002744:	4603      	mov	r3, r0
 8002746:	461a      	mov	r2, r3
 8002748:	2100      	movs	r1, #0
 800274a:	4620      	mov	r0, r4
 800274c:	f004 feb2 	bl	80074b4 <memset>
	_sim->PhoneNumber[0] = '0';
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2230      	movs	r2, #48	@ 0x30
 8002754:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

	for (int i = AnalysisPointer; i <= 60; ++i)
 8002758:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800275a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800275c:	e017      	b.n	800278e <GetPhoneNumber+0x186>
	{
		if (DataResponseStr[i] == '\"')
 800275e:	f107 020c 	add.w	r2, r7, #12
 8002762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002764:	4413      	add	r3, r2
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b22      	cmp	r3, #34	@ 0x22
 800276a:	d014      	beq.n	8002796 <GetPhoneNumber+0x18e>
			break;
		_sim->PhoneNumber[count] = DataResponseStr[i];
 800276c:	f107 020c 	add.w	r2, r7, #12
 8002770:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002772:	4413      	add	r3, r2
 8002774:	7819      	ldrb	r1, [r3, #0]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800277a:	4413      	add	r3, r2
 800277c:	333c      	adds	r3, #60	@ 0x3c
 800277e:	460a      	mov	r2, r1
 8002780:	701a      	strb	r2, [r3, #0]
		++count;
 8002782:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002784:	3301      	adds	r3, #1
 8002786:	65fb      	str	r3, [r7, #92]	@ 0x5c
	for (int i = AnalysisPointer; i <= 60; ++i)
 8002788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800278a:	3301      	adds	r3, #1
 800278c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800278e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002790:	2b3c      	cmp	r3, #60	@ 0x3c
 8002792:	dde4      	ble.n	800275e <GetPhoneNumber+0x156>
 8002794:	e000      	b.n	8002798 <GetPhoneNumber+0x190>
			break;
 8002796:	bf00      	nop
	}

	ClearBuffer(_sim);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f7ff fcbe 	bl	800211a <ClearBuffer>

	return SIM7600_OK;
 800279e:	2301      	movs	r3, #1
	//	int DKD;
	//	sscanf(DataResponseStr, "+CNUM: \"My Number\",\"%s\",%d", &_sim->PhoneNumber, DKD);
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3760      	adds	r7, #96	@ 0x60
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bdb0      	pop	{r4, r5, r7, pc}
 80027a8:	0800aafc 	.word	0x0800aafc
 80027ac:	0800ab04 	.word	0x0800ab04
 80027b0:	0800ab10 	.word	0x0800ab10

080027b4 <GetRSSI>:

/*
 * Get Signal RSSI Function
 * */
int GetRSSI(sim7600_t *_sim)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b099      	sub	sp, #100	@ 0x64
 80027b8:	af04      	add	r7, sp, #16
 80027ba:	6078      	str	r0, [r7, #4]
	int foundRes = SendCommand(_sim, "AT+CSQ\r\n", "+CSQ:", 2000, 0);
 80027bc:	2300      	movs	r3, #0
 80027be:	9302      	str	r3, [sp, #8]
 80027c0:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80027c4:	f04f 0300 	mov.w	r3, #0
 80027c8:	e9cd 2300 	strd	r2, r3, [sp]
 80027cc:	4a2d      	ldr	r2, [pc, #180]	@ (8002884 <GetRSSI+0xd0>)
 80027ce:	492e      	ldr	r1, [pc, #184]	@ (8002888 <GetRSSI+0xd4>)
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7ff fd83 	bl	80022dc <SendCommand>
 80027d6:	6478      	str	r0, [r7, #68]	@ 0x44
	if (foundRes == -1)
 80027d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80027de:	d11a      	bne.n	8002816 <GetRSSI+0x62>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80027e6:	2232      	movs	r2, #50	@ 0x32
 80027e8:	2100      	movs	r1, #0
 80027ea:	4618      	mov	r0, r3
 80027ec:	f004 fe62 	bl	80074b4 <memset>
		strcpy(_sim->response, "Get RSSI Error");
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80027f6:	4a25      	ldr	r2, [pc, #148]	@ (800288c <GetRSSI+0xd8>)
 80027f8:	461c      	mov	r4, r3
 80027fa:	4613      	mov	r3, r2
 80027fc:	cb07      	ldmia	r3!, {r0, r1, r2}
 80027fe:	6020      	str	r0, [r4, #0]
 8002800:	6061      	str	r1, [r4, #4]
 8002802:	60a2      	str	r2, [r4, #8]
 8002804:	881a      	ldrh	r2, [r3, #0]
 8002806:	789b      	ldrb	r3, [r3, #2]
 8002808:	81a2      	strh	r2, [r4, #12]
 800280a:	73a3      	strb	r3, [r4, #14]
#endif
		ClearBuffer(_sim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f7ff fc84 	bl	800211a <ClearBuffer>
		return SIM7600_ERROR;
 8002812:	2300      	movs	r3, #0
 8002814:	e031      	b.n	800287a <GetRSSI+0xc6>
	}

	char DataResponseStr[50];
	int count = 0;
 8002816:	2300      	movs	r3, #0
 8002818:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i)
 800281a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800281c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800281e:	e017      	b.n	8002850 <GetRSSI+0x9c>
	{
		if (_sim->buffer[i] == '\r')
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002824:	4413      	add	r3, r2
 8002826:	339c      	adds	r3, #156	@ 0x9c
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b0d      	cmp	r3, #13
 800282c:	d016      	beq.n	800285c <GetRSSI+0xa8>
			break;
		DataResponseStr[count] = _sim->buffer[i];
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002832:	4413      	add	r3, r2
 8002834:	339c      	adds	r3, #156	@ 0x9c
 8002836:	7819      	ldrb	r1, [r3, #0]
 8002838:	f107 0210 	add.w	r2, r7, #16
 800283c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800283e:	4413      	add	r3, r2
 8002840:	460a      	mov	r2, r1
 8002842:	701a      	strb	r2, [r3, #0]
		++count;
 8002844:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002846:	3301      	adds	r3, #1
 8002848:	64fb      	str	r3, [r7, #76]	@ 0x4c
	for (int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i)
 800284a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800284c:	3301      	adds	r3, #1
 800284e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002850:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002852:	f240 424c 	movw	r2, #1100	@ 0x44c
 8002856:	4293      	cmp	r3, r2
 8002858:	dde2      	ble.n	8002820 <GetRSSI+0x6c>
 800285a:	e000      	b.n	800285e <GetRSSI+0xaa>
			break;
 800285c:	bf00      	nop
	}

	int Ber;
	sscanf(DataResponseStr, "+CSQ: %d,%d", &_sim->RSSI, &Ber);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8002864:	f107 030c 	add.w	r3, r7, #12
 8002868:	f107 0010 	add.w	r0, r7, #16
 800286c:	4908      	ldr	r1, [pc, #32]	@ (8002890 <GetRSSI+0xdc>)
 800286e:	f003 fdef 	bl	8006450 <siscanf>
	ClearBuffer(_sim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff fc51 	bl	800211a <ClearBuffer>
#ifdef SIM_Debug
//		strcpy(_sim->response,"Get RSSI OK");
#endif

	return SIM7600_OK;
 8002878:	2301      	movs	r3, #1
}
 800287a:	4618      	mov	r0, r3
 800287c:	3754      	adds	r7, #84	@ 0x54
 800287e:	46bd      	mov	sp, r7
 8002880:	bd90      	pop	{r4, r7, pc}
 8002882:	bf00      	nop
 8002884:	0800ab98 	.word	0x0800ab98
 8002888:	0800aba0 	.word	0x0800aba0
 800288c:	0800abac 	.word	0x0800abac
 8002890:	0800abbc 	.word	0x0800abbc

08002894 <GetSignal>:

/*
 * Get SIMCOM Module's RSSI and analyze to 4 level signal
 * */
int GetSignal(sim7600_t *_sim)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b082      	sub	sp, #8
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
	if (GetRSSI(_sim) == SIM7600_OK)
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ff89 	bl	80027b4 <GetRSSI>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	f040 809c 	bne.w	80029e2 <GetSignal+0x14e>
	{
		if ((_sim->RSSI == 99) || (_sim->RSSI == 199) || (_sim->RSSI == 0) || (_sim->RSSI == 1) || (_sim->RSSI == 100) || (_sim->RSSI == 101))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	2b63      	cmp	r3, #99	@ 0x63
 80028b0:	d013      	beq.n	80028da <GetSignal+0x46>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b6:	2bc7      	cmp	r3, #199	@ 0xc7
 80028b8:	d00f      	beq.n	80028da <GetSignal+0x46>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <GetSignal+0x46>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d007      	beq.n	80028da <GetSignal+0x46>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ce:	2b64      	cmp	r3, #100	@ 0x64
 80028d0:	d003      	beq.n	80028da <GetSignal+0x46>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	2b65      	cmp	r3, #101	@ 0x65
 80028d8:	d107      	bne.n	80028ea <GetSignal+0x56>
		{
			_sim->Signal = 0;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	62da      	str	r2, [r3, #44]	@ 0x2c
			_sim->NetTech = 0;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
 80028e8:	e079      	b.n	80029de <GetSignal+0x14a>
		}
		else if ((_sim->RSSI >= 2) && (_sim->RSSI <= 31))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	dd38      	ble.n	8002964 <GetSignal+0xd0>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028f6:	2b1f      	cmp	r3, #31
 80028f8:	dc34      	bgt.n	8002964 <GetSignal+0xd0>
		{
			_sim->NetTech = 4;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2204      	movs	r2, #4
 80028fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if ((_sim->RSSI >= 2) && (_sim->RSSI <= 7))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	2b01      	cmp	r3, #1
 8002908:	dd07      	ble.n	800291a <GetSignal+0x86>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	2b07      	cmp	r3, #7
 8002910:	dc03      	bgt.n	800291a <GetSignal+0x86>
				_sim->Signal = 1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002918:	e023      	b.n	8002962 <GetSignal+0xce>
			else if ((_sim->RSSI >= 8) && (_sim->RSSI <= 15))
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291e:	2b07      	cmp	r3, #7
 8002920:	dd07      	ble.n	8002932 <GetSignal+0x9e>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	2b0f      	cmp	r3, #15
 8002928:	dc03      	bgt.n	8002932 <GetSignal+0x9e>
				_sim->Signal = 2;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2202      	movs	r2, #2
 800292e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002930:	e017      	b.n	8002962 <GetSignal+0xce>
			else if ((_sim->RSSI >= 16) && (_sim->RSSI <= 23))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	2b0f      	cmp	r3, #15
 8002938:	dd07      	ble.n	800294a <GetSignal+0xb6>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	2b17      	cmp	r3, #23
 8002940:	dc03      	bgt.n	800294a <GetSignal+0xb6>
				_sim->Signal = 3;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2203      	movs	r2, #3
 8002946:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002948:	e00b      	b.n	8002962 <GetSignal+0xce>
			else if ((_sim->RSSI >= 24) && (_sim->RSSI <= 31))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294e:	2b17      	cmp	r3, #23
 8002950:	dd44      	ble.n	80029dc <GetSignal+0x148>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002956:	2b1f      	cmp	r3, #31
 8002958:	dc40      	bgt.n	80029dc <GetSignal+0x148>
				_sim->Signal = 4;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2204      	movs	r2, #4
 800295e:	62da      	str	r2, [r3, #44]	@ 0x2c
			if ((_sim->RSSI >= 2) && (_sim->RSSI <= 7))
 8002960:	e03c      	b.n	80029dc <GetSignal+0x148>
 8002962:	e03b      	b.n	80029dc <GetSignal+0x148>
		}
		else if ((_sim->RSSI >= 102) && (_sim->RSSI <= 191))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002968:	2b65      	cmp	r3, #101	@ 0x65
 800296a:	dd38      	ble.n	80029de <GetSignal+0x14a>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	2bbf      	cmp	r3, #191	@ 0xbf
 8002972:	dc34      	bgt.n	80029de <GetSignal+0x14a>
		{
			_sim->NetTech = 3;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2203      	movs	r2, #3
 8002978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
			if ((_sim->RSSI >= 102) && (_sim->RSSI <= 122))
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002980:	2b65      	cmp	r3, #101	@ 0x65
 8002982:	dd07      	ble.n	8002994 <GetSignal+0x100>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002988:	2b7a      	cmp	r3, #122	@ 0x7a
 800298a:	dc03      	bgt.n	8002994 <GetSignal+0x100>
				_sim->Signal = 1;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002992:	e024      	b.n	80029de <GetSignal+0x14a>
			else if ((_sim->RSSI >= 123) && (_sim->RSSI <= 145))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	2b7a      	cmp	r3, #122	@ 0x7a
 800299a:	dd07      	ble.n	80029ac <GetSignal+0x118>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029a0:	2b91      	cmp	r3, #145	@ 0x91
 80029a2:	dc03      	bgt.n	80029ac <GetSignal+0x118>
				_sim->Signal = 2;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029aa:	e018      	b.n	80029de <GetSignal+0x14a>
			else if ((_sim->RSSI >= 146) && (_sim->RSSI <= 168))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b0:	2b91      	cmp	r3, #145	@ 0x91
 80029b2:	dd07      	ble.n	80029c4 <GetSignal+0x130>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	2ba8      	cmp	r3, #168	@ 0xa8
 80029ba:	dc03      	bgt.n	80029c4 <GetSignal+0x130>
				_sim->Signal = 3;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2203      	movs	r2, #3
 80029c0:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029c2:	e00c      	b.n	80029de <GetSignal+0x14a>
			else if ((_sim->RSSI >= 169) && (_sim->RSSI <= 191))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c8:	2ba8      	cmp	r3, #168	@ 0xa8
 80029ca:	dd08      	ble.n	80029de <GetSignal+0x14a>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	2bbf      	cmp	r3, #191	@ 0xbf
 80029d2:	dc04      	bgt.n	80029de <GetSignal+0x14a>
				_sim->Signal = 4;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2204      	movs	r2, #4
 80029d8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80029da:	e000      	b.n	80029de <GetSignal+0x14a>
			if ((_sim->RSSI >= 2) && (_sim->RSSI <= 7))
 80029dc:	bf00      	nop
		}
		return SIM7600_OK;
 80029de:	2301      	movs	r3, #1
 80029e0:	e000      	b.n	80029e4 <GetSignal+0x150>
	}
	return SIM7600_ERROR;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <InitHTTP>:
/*
 * Setup HTTP connect's function for SIMCOM Module
 * */

int InitHTTP(sim7600_t *_sim)
{
 80029ec:	b5b0      	push	{r4, r5, r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af04      	add	r7, sp, #16
 80029f2:	6078      	str	r0, [r7, #4]
#ifdef SIM_Debug
	memset(_sim->response, 0, sizeof(_sim->response));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80029fa:	2232      	movs	r2, #50	@ 0x32
 80029fc:	2100      	movs	r1, #0
 80029fe:	4618      	mov	r0, r3
 8002a00:	f004 fd58 	bl	80074b4 <memset>
	strcpy(_sim->response, "Init HTTP");
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002a0a:	4919      	ldr	r1, [pc, #100]	@ (8002a70 <InitHTTP+0x84>)
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	460b      	mov	r3, r1
 8002a10:	cb03      	ldmia	r3!, {r0, r1}
 8002a12:	6010      	str	r0, [r2, #0]
 8002a14:	6051      	str	r1, [r2, #4]
 8002a16:	881b      	ldrh	r3, [r3, #0]
 8002a18:	8113      	strh	r3, [r2, #8]
#endif
	if (SendCommand(_sim, "AT+HTTPINIT\r\n", SIM_OK, 2000, 1) == -1)
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	9302      	str	r3, [sp, #8]
 8002a1e:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002a22:	f04f 0300 	mov.w	r3, #0
 8002a26:	e9cd 2300 	strd	r2, r3, [sp]
 8002a2a:	4a12      	ldr	r2, [pc, #72]	@ (8002a74 <InitHTTP+0x88>)
 8002a2c:	4912      	ldr	r1, [pc, #72]	@ (8002a78 <InitHTTP+0x8c>)
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fc54 	bl	80022dc <SendCommand>
 8002a34:	4603      	mov	r3, r0
 8002a36:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002a3a:	d114      	bne.n	8002a66 <InitHTTP+0x7a>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002a42:	2232      	movs	r2, #50	@ 0x32
 8002a44:	2100      	movs	r1, #0
 8002a46:	4618      	mov	r0, r3
 8002a48:	f004 fd34 	bl	80074b4 <memset>
		strcpy(_sim->response, "Init HTTP error");
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002a52:	4a0a      	ldr	r2, [pc, #40]	@ (8002a7c <InitHTTP+0x90>)
 8002a54:	461c      	mov	r4, r3
 8002a56:	4615      	mov	r5, r2
 8002a58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a5a:	6020      	str	r0, [r4, #0]
 8002a5c:	6061      	str	r1, [r4, #4]
 8002a5e:	60a2      	str	r2, [r4, #8]
 8002a60:	60e3      	str	r3, [r4, #12]
#endif
		return SIM7600_ERROR;
 8002a62:	2300      	movs	r3, #0
 8002a64:	e000      	b.n	8002a68 <InitHTTP+0x7c>
	}
	return SIM7600_OK;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a70:	0800abc8 	.word	0x0800abc8
 8002a74:	0800aa84 	.word	0x0800aa84
 8002a78:	0800abd4 	.word	0x0800abd4
 8002a7c:	0800abe4 	.word	0x0800abe4

08002a80 <DeInitHTTP>:
/*
 * Deinit HTTP connect's function for SIMCOM Module
 * */

int DeInitHTTP(sim7600_t *_sim)
{
 8002a80:	b5b0      	push	{r4, r5, r7, lr}
 8002a82:	b086      	sub	sp, #24
 8002a84:	af04      	add	r7, sp, #16
 8002a86:	6078      	str	r0, [r7, #4]
	if (SendCommand(_sim, "AT+HTTPTERM\r\n", SIM_OK, 1000, 1) == -1)
 8002a88:	2301      	movs	r3, #1
 8002a8a:	9302      	str	r3, [sp, #8]
 8002a8c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002a90:	f04f 0300 	mov.w	r3, #0
 8002a94:	e9cd 2300 	strd	r2, r3, [sp]
 8002a98:	4a1c      	ldr	r2, [pc, #112]	@ (8002b0c <DeInitHTTP+0x8c>)
 8002a9a:	491d      	ldr	r1, [pc, #116]	@ (8002b10 <DeInitHTTP+0x90>)
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff fc1d 	bl	80022dc <SendCommand>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002aa8:	d114      	bne.n	8002ad4 <DeInitHTTP+0x54>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002ab0:	2232      	movs	r2, #50	@ 0x32
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f004 fcfd 	bl	80074b4 <memset>
		strcpy(_sim->response, "Stop HTTP error");
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002ac0:	4a14      	ldr	r2, [pc, #80]	@ (8002b14 <DeInitHTTP+0x94>)
 8002ac2:	461c      	mov	r4, r3
 8002ac4:	4615      	mov	r5, r2
 8002ac6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ac8:	6020      	str	r0, [r4, #0]
 8002aca:	6061      	str	r1, [r4, #4]
 8002acc:	60a2      	str	r2, [r4, #8]
 8002ace:	60e3      	str	r3, [r4, #12]
#endif
		return SIM7600_ERROR;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	e017      	b.n	8002b04 <DeInitHTTP+0x84>
	}

#ifdef SIM_Debug
	memset(_sim->response, 0, sizeof(_sim->response));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002ada:	2232      	movs	r2, #50	@ 0x32
 8002adc:	2100      	movs	r1, #0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f004 fce8 	bl	80074b4 <memset>
	strcpy(_sim->response, "Deinit HTTP completed");
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002aea:	4a0b      	ldr	r2, [pc, #44]	@ (8002b18 <DeInitHTTP+0x98>)
 8002aec:	461d      	mov	r5, r3
 8002aee:	4614      	mov	r4, r2
 8002af0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002af2:	6028      	str	r0, [r5, #0]
 8002af4:	6069      	str	r1, [r5, #4]
 8002af6:	60aa      	str	r2, [r5, #8]
 8002af8:	60eb      	str	r3, [r5, #12]
 8002afa:	6820      	ldr	r0, [r4, #0]
 8002afc:	6128      	str	r0, [r5, #16]
 8002afe:	88a3      	ldrh	r3, [r4, #4]
 8002b00:	82ab      	strh	r3, [r5, #20]
#endif
	return SIM7600_OK;
 8002b02:	2301      	movs	r3, #1
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3708      	adds	r7, #8
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bdb0      	pop	{r4, r5, r7, pc}
 8002b0c:	0800aa84 	.word	0x0800aa84
 8002b10:	0800abf4 	.word	0x0800abf4
 8002b14:	0800ac04 	.word	0x0800ac04
 8002b18:	0800ac14 	.word	0x0800ac14

08002b1c <SetupHTTPUrl>:
/*
 * Setup HTTP's URL
 * */

int SetupHTTPUrl(sim7600_t *_sim, char *url)
{
 8002b1c:	b5b0      	push	{r4, r5, r7, lr}
 8002b1e:	b0b8      	sub	sp, #224	@ 0xe0
 8002b20:	af04      	add	r7, sp, #16
 8002b22:	6078      	str	r0, [r7, #4]
 8002b24:	6039      	str	r1, [r7, #0]
#ifdef SIM_Debug
	memset(_sim->response, 0, sizeof(_sim->response));
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002b2c:	2232      	movs	r2, #50	@ 0x32
 8002b2e:	2100      	movs	r1, #0
 8002b30:	4618      	mov	r0, r3
 8002b32:	f004 fcbf 	bl	80074b4 <memset>
	strcpy(_sim->response, "Setup URL");
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002b3c:	4922      	ldr	r1, [pc, #136]	@ (8002bc8 <SetupHTTPUrl+0xac>)
 8002b3e:	461a      	mov	r2, r3
 8002b40:	460b      	mov	r3, r1
 8002b42:	cb03      	ldmia	r3!, {r0, r1}
 8002b44:	6010      	str	r0, [r2, #0]
 8002b46:	6051      	str	r1, [r2, #4]
 8002b48:	881b      	ldrh	r3, [r3, #0]
 8002b4a:	8113      	strh	r3, [r2, #8]
#endif
	char urlStr[200];
	memset(urlStr, 0, sizeof(urlStr));
 8002b4c:	f107 0308 	add.w	r3, r7, #8
 8002b50:	22c8      	movs	r2, #200	@ 0xc8
 8002b52:	2100      	movs	r1, #0
 8002b54:	4618      	mov	r0, r3
 8002b56:	f004 fcad 	bl	80074b4 <memset>
	sprintf(urlStr, "AT+HTTPPARA=\"URL\",\"%s\"\r\n", url);
 8002b5a:	f107 0308 	add.w	r3, r7, #8
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	491a      	ldr	r1, [pc, #104]	@ (8002bcc <SetupHTTPUrl+0xb0>)
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 fc54 	bl	8006410 <siprintf>
	if (SendCommand(_sim, urlStr, SIM_OK, 1000, 1) == -1)
 8002b68:	f107 0108 	add.w	r1, r7, #8
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	9302      	str	r3, [sp, #8]
 8002b70:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002b74:	f04f 0300 	mov.w	r3, #0
 8002b78:	e9cd 2300 	strd	r2, r3, [sp]
 8002b7c:	4a14      	ldr	r2, [pc, #80]	@ (8002bd0 <SetupHTTPUrl+0xb4>)
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fbac 	bl	80022dc <SendCommand>
 8002b84:	4603      	mov	r3, r0
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b8a:	d118      	bne.n	8002bbe <SetupHTTPUrl+0xa2>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002b92:	2232      	movs	r2, #50	@ 0x32
 8002b94:	2100      	movs	r1, #0
 8002b96:	4618      	mov	r0, r3
 8002b98:	f004 fc8c 	bl	80074b4 <memset>
		strcpy(_sim->response, "Setup HTTP URL error");
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002ba2:	4a0c      	ldr	r2, [pc, #48]	@ (8002bd4 <SetupHTTPUrl+0xb8>)
 8002ba4:	461d      	mov	r5, r3
 8002ba6:	4614      	mov	r4, r2
 8002ba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002baa:	6028      	str	r0, [r5, #0]
 8002bac:	6069      	str	r1, [r5, #4]
 8002bae:	60aa      	str	r2, [r5, #8]
 8002bb0:	60eb      	str	r3, [r5, #12]
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	6128      	str	r0, [r5, #16]
 8002bb6:	7923      	ldrb	r3, [r4, #4]
 8002bb8:	752b      	strb	r3, [r5, #20]
#endif
		return SIM7600_ERROR;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	e000      	b.n	8002bc0 <SetupHTTPUrl+0xa4>
	}
	return SIM7600_OK;
 8002bbe:	2301      	movs	r3, #1
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	37d0      	adds	r7, #208	@ 0xd0
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bdb0      	pop	{r4, r5, r7, pc}
 8002bc8:	0800ac2c 	.word	0x0800ac2c
 8002bcc:	0800ac38 	.word	0x0800ac38
 8002bd0:	0800aa84 	.word	0x0800aa84
 8002bd4:	0800ac54 	.word	0x0800ac54

08002bd8 <SuperviseHTTP>:
/*
 * Supervise HTTP error.
 * If have too much error, this function will automatically reset module
 * */
int SuperviseHTTP(sim7600_t *_sim, int ErrCheck)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af04      	add	r7, sp, #16
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
	if (ErrCheck == SIM7600_ERROR)
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d138      	bne.n	8002c5a <SuperviseHTTP+0x82>
	{
		if (((_sim->SimConnect == SIM_CARD_CONNECTED) && (_sim->Signal > 1)) || (SendCommand(_sim, SIM_AT, SIM_OK, 1000, 1) == -1))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d103      	bne.n	8002bfa <SuperviseHTTP+0x22>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	dc10      	bgt.n	8002c1c <SuperviseHTTP+0x44>
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	9302      	str	r3, [sp, #8]
 8002bfe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002c02:	f04f 0300 	mov.w	r3, #0
 8002c06:	e9cd 2300 	strd	r2, r3, [sp]
 8002c0a:	4a18      	ldr	r2, [pc, #96]	@ (8002c6c <SuperviseHTTP+0x94>)
 8002c0c:	4918      	ldr	r1, [pc, #96]	@ (8002c70 <SuperviseHTTP+0x98>)
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f7ff fb64 	bl	80022dc <SendCommand>
 8002c14:	4603      	mov	r3, r0
 8002c16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002c1a:	d11c      	bne.n	8002c56 <SuperviseHTTP+0x7e>
		{
			++_sim->SuperviseHTTPError;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			if (_sim->SuperviseHTTPError > MAX_HTTP_ERROR_COUNT)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	dd09      	ble.n	8002c48 <SuperviseHTTP+0x70>
			{
				printf("Max HTTP ERROR found, reset SIMCOM Module\r\n");
 8002c34:	480f      	ldr	r0, [pc, #60]	@ (8002c74 <SuperviseHTTP+0x9c>)
 8002c36:	f004 fc23 	bl	8007480 <puts>
				StartModuleService(_sim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fbcc 	bl	80023d8 <StartModuleService>
				_sim->SuperviseHTTPError = 0;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
			}
#ifdef SIM_Debug
			//		strcpy(_sim->response,"HTTP GET ERROR");
			++_sim->CountHTTPGetError;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f8d3 360c 	ldr.w	r3, [r3, #1548]	@ 0x60c
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	f8c3 260c 	str.w	r2, [r3, #1548]	@ 0x60c
#endif
		}

		return SIM7600_ERROR;
 8002c56:	2300      	movs	r3, #0
 8002c58:	e004      	b.n	8002c64 <SuperviseHTTP+0x8c>
	}

	_sim->SuperviseHTTPError = 0;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
	return SIM7600_OK;
 8002c62:	2301      	movs	r3, #1
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	3708      	adds	r7, #8
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	0800aa84 	.word	0x0800aa84
 8002c70:	0800aa8c 	.word	0x0800aa8c
 8002c74:	0800ac6c 	.word	0x0800ac6c

08002c78 <http_post>:

/*
 * HTTP POST FUNCTION
 * */
int http_post(sim7600_t *_sim, char *url, char *data)
{
 8002c78:	b5b0      	push	{r4, r5, r7, lr}
 8002c7a:	b0d0      	sub	sp, #320	@ 0x140
 8002c7c:	af04      	add	r7, sp, #16
 8002c7e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c82:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002c86:	6018      	str	r0, [r3, #0]
 8002c88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c8c:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8002c90:	6019      	str	r1, [r3, #0]
 8002c92:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002c96:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002c9a:	601a      	str	r2, [r3, #0]
	int ErrCheck = SIM7600_OK;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
#ifdef SIM_Debug
	memset(_sim->response, 0, sizeof(_sim->response));
 8002ca2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ca6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002cb0:	2232      	movs	r2, #50	@ 0x32
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 fbfd 	bl	80074b4 <memset>
	strcpy(_sim->response, "HTTP POST");
 8002cba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cbe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002cc8:	49ce      	ldr	r1, [pc, #824]	@ (8003004 <http_post+0x38c>)
 8002cca:	461a      	mov	r2, r3
 8002ccc:	460b      	mov	r3, r1
 8002cce:	cb03      	ldmia	r3!, {r0, r1}
 8002cd0:	6010      	str	r0, [r2, #0]
 8002cd2:	6051      	str	r1, [r2, #4]
 8002cd4:	881b      	ldrh	r3, [r3, #0]
 8002cd6:	8113      	strh	r3, [r2, #8]
#endif

	GetSignal(_sim);
 8002cd8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cdc:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ce0:	6818      	ldr	r0, [r3, #0]
 8002ce2:	f7ff fdd7 	bl	8002894 <GetSignal>
	if (_sim->Signal == 0)
 8002ce6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cea:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d121      	bne.n	8002d3a <http_post+0xc2>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 8002cf6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002cfa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002d04:	2232      	movs	r2, #50	@ 0x32
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f004 fbd3 	bl	80074b4 <memset>
		strcpy(_sim->response, "No Signal for POST");
 8002d0e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d12:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002d1c:	4aba      	ldr	r2, [pc, #744]	@ (8003008 <http_post+0x390>)
 8002d1e:	461d      	mov	r5, r3
 8002d20:	4614      	mov	r4, r2
 8002d22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d24:	6028      	str	r0, [r5, #0]
 8002d26:	6069      	str	r1, [r5, #4]
 8002d28:	60aa      	str	r2, [r5, #8]
 8002d2a:	60eb      	str	r3, [r5, #12]
 8002d2c:	8823      	ldrh	r3, [r4, #0]
 8002d2e:	78a2      	ldrb	r2, [r4, #2]
 8002d30:	822b      	strh	r3, [r5, #16]
 8002d32:	4613      	mov	r3, r2
 8002d34:	74ab      	strb	r3, [r5, #18]
#endif
		return SIM7600_SIGNAL_ERROR;
 8002d36:	2302      	movs	r3, #2
 8002d38:	e210      	b.n	800315c <http_post+0x4e4>
	}

	// Init HTTP
	if (InitHTTP(_sim) == SIM7600_ERROR)
 8002d3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d3e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d42:	6818      	ldr	r0, [r3, #0]
 8002d44:	f7ff fe52 	bl	80029ec <InitHTTP>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d103      	bne.n	8002d56 <http_post+0xde>
	{
		ErrCheck = SIM7600_ERROR;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		goto StopHttpPost;
 8002d54:	e1c2      	b.n	80030dc <http_post+0x464>
	}
	// Set URL for HTTP
	if (SetupHTTPUrl(_sim, url) == SIM7600_ERROR)
 8002d56:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d5a:	f5a3 7294 	sub.w	r2, r3, #296	@ 0x128
 8002d5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d62:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002d66:	6811      	ldr	r1, [r2, #0]
 8002d68:	6818      	ldr	r0, [r3, #0]
 8002d6a:	f7ff fed7 	bl	8002b1c <SetupHTTPUrl>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d103      	bne.n	8002d7c <http_post+0x104>
	{
		ErrCheck = SIM7600_ERROR;
 8002d74:	2300      	movs	r3, #0
 8002d76:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		goto StopHttpPost;
 8002d7a:	e1af      	b.n	80030dc <http_post+0x464>
	}

	if (SendCommand(_sim, "AT+HTTPPARA=\"CONTENT\",\"application/json\"\r\n", SIM_OK, 2000, 1) == -1)
 8002d7c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002d80:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 8002d84:	2301      	movs	r3, #1
 8002d86:	9302      	str	r3, [sp, #8]
 8002d88:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002d8c:	f04f 0300 	mov.w	r3, #0
 8002d90:	e9cd 2300 	strd	r2, r3, [sp]
 8002d94:	4a9d      	ldr	r2, [pc, #628]	@ (800300c <http_post+0x394>)
 8002d96:	499e      	ldr	r1, [pc, #632]	@ (8003010 <http_post+0x398>)
 8002d98:	6800      	ldr	r0, [r0, #0]
 8002d9a:	f7ff fa9f 	bl	80022dc <SendCommand>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002da4:	d123      	bne.n	8002dee <http_post+0x176>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 8002da6:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002daa:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002db4:	2232      	movs	r2, #50	@ 0x32
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f004 fb7b 	bl	80074b4 <memset>
		strcpy(_sim->response, "Set HTTPPARA ERROR");
 8002dbe:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002dc2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002dcc:	4a91      	ldr	r2, [pc, #580]	@ (8003014 <http_post+0x39c>)
 8002dce:	461d      	mov	r5, r3
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002dd4:	6028      	str	r0, [r5, #0]
 8002dd6:	6069      	str	r1, [r5, #4]
 8002dd8:	60aa      	str	r2, [r5, #8]
 8002dda:	60eb      	str	r3, [r5, #12]
 8002ddc:	8823      	ldrh	r3, [r4, #0]
 8002dde:	78a2      	ldrb	r2, [r4, #2]
 8002de0:	822b      	strh	r3, [r5, #16]
 8002de2:	4613      	mov	r3, r2
 8002de4:	74ab      	strb	r3, [r5, #18]
#endif
		ErrCheck = SIM7600_ERROR;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
		goto StopHttpPost;
 8002dec:	e176      	b.n	80030dc <http_post+0x464>
	}

	// Send HTTP DATA
	char httpDataStr[200];
	memset(httpDataStr, 0, sizeof(httpDataStr));
 8002dee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002df2:	22c8      	movs	r2, #200	@ 0xc8
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f004 fb5c 	bl	80074b4 <memset>

	int data_len = strlen(data);
 8002dfc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e00:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	f7fd f9a3 	bl	8000150 <strlen>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120

	sprintf(httpDataStr, "AT+HTTPDATA=%d,1000\r\n", data_len);
 8002e10:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002e14:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 8002e18:	497f      	ldr	r1, [pc, #508]	@ (8003018 <http_post+0x3a0>)
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f003 faf8 	bl	8006410 <siprintf>
#ifdef SIM_Debug
	strcpy(_sim->DebugStr, httpDataStr);
 8002e20:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e24:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f203 5322 	addw	r3, r3, #1314	@ 0x522
 8002e2e:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 8002e32:	4611      	mov	r1, r2
 8002e34:	4618      	mov	r0, r3
 8002e36:	f004 fbd8 	bl	80075ea <strcpy>
#endif
	SendCommand(_sim, httpDataStr, "DOWNLOAD", 2000, 1);
 8002e3a:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8002e3e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e42:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 8002e46:	2301      	movs	r3, #1
 8002e48:	9302      	str	r3, [sp, #8]
 8002e4a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e4e:	f04f 0300 	mov.w	r3, #0
 8002e52:	e9cd 2300 	strd	r2, r3, [sp]
 8002e56:	4a71      	ldr	r2, [pc, #452]	@ (800301c <http_post+0x3a4>)
 8002e58:	6800      	ldr	r0, [r0, #0]
 8002e5a:	f7ff fa3f 	bl	80022dc <SendCommand>
	SendCommand(_sim, data, SIM_OK, 2000, 1);
 8002e5e:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e62:	f5a3 7196 	sub.w	r1, r3, #300	@ 0x12c
 8002e66:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e6a:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 8002e6e:	2301      	movs	r3, #1
 8002e70:	9302      	str	r3, [sp, #8]
 8002e72:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002e76:	f04f 0300 	mov.w	r3, #0
 8002e7a:	e9cd 2300 	strd	r2, r3, [sp]
 8002e7e:	4a63      	ldr	r2, [pc, #396]	@ (800300c <http_post+0x394>)
 8002e80:	6809      	ldr	r1, [r1, #0]
 8002e82:	6800      	ldr	r0, [r0, #0]
 8002e84:	f7ff fa2a 	bl	80022dc <SendCommand>

	//	Send HTTP POST request
	int responce = SendCommandCheckTrueFalse(_sim, "AT+HTTPACTION=1\r\n", "+HTTPACTION: 1", SIM_ERROR, 30000, 0);
 8002e88:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002e8c:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 8002e90:	2300      	movs	r3, #0
 8002e92:	9302      	str	r3, [sp, #8]
 8002e94:	f247 5230 	movw	r2, #30000	@ 0x7530
 8002e98:	f04f 0300 	mov.w	r3, #0
 8002e9c:	e9cd 2300 	strd	r2, r3, [sp]
 8002ea0:	4b5f      	ldr	r3, [pc, #380]	@ (8003020 <http_post+0x3a8>)
 8002ea2:	4a60      	ldr	r2, [pc, #384]	@ (8003024 <http_post+0x3ac>)
 8002ea4:	4960      	ldr	r1, [pc, #384]	@ (8003028 <http_post+0x3b0>)
 8002ea6:	6800      	ldr	r0, [r0, #0]
 8002ea8:	f7ff fa3e 	bl	8002328 <SendCommandCheckTrueFalse>
 8002eac:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c

	if ((responce == -1) || (responce == 0))
 8002eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002eb8:	d003      	beq.n	8002ec2 <http_post+0x24a>
 8002eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d121      	bne.n	8002f06 <http_post+0x28e>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 8002ec2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ec6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002ed0:	2232      	movs	r2, #50	@ 0x32
 8002ed2:	2100      	movs	r1, #0
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f004 faed 	bl	80074b4 <memset>
		strcpy(_sim->response, "Send HTTP request error");
 8002eda:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002ede:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002ee8:	4a50      	ldr	r2, [pc, #320]	@ (800302c <http_post+0x3b4>)
 8002eea:	461d      	mov	r5, r3
 8002eec:	4614      	mov	r4, r2
 8002eee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ef0:	6028      	str	r0, [r5, #0]
 8002ef2:	6069      	str	r1, [r5, #4]
 8002ef4:	60aa      	str	r2, [r5, #8]
 8002ef6:	60eb      	str	r3, [r5, #12]
 8002ef8:	cc03      	ldmia	r4!, {r0, r1}
 8002efa:	6128      	str	r0, [r5, #16]
 8002efc:	6169      	str	r1, [r5, #20]
#endif
		ErrCheck = SIM7600_ERROR;
 8002efe:	2300      	movs	r3, #0
 8002f00:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8002f04:	e0e3      	b.n	80030ce <http_post+0x456>
	}
	else if (responce == 1)
 8002f06:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	f040 80df 	bne.w	80030ce <http_post+0x456>
	{
		int foundRes = WaitForResponse(_sim, "+HTTPACTION: 1", 100, 0);
 8002f10:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f14:	f5a3 7092 	sub.w	r0, r3, #292	@ 0x124
 8002f18:	2300      	movs	r3, #0
 8002f1a:	9300      	str	r3, [sp, #0]
 8002f1c:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002f20:	f04f 0300 	mov.w	r3, #0
 8002f24:	493f      	ldr	r1, [pc, #252]	@ (8003024 <http_post+0x3ac>)
 8002f26:	6800      	ldr	r0, [r0, #0]
 8002f28:	f7ff f915 	bl	8002156 <WaitForResponse>
 8002f2c:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
		if (foundRes == -1)
 8002f30:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002f38:	d121      	bne.n	8002f7e <http_post+0x306>
		{
#ifdef SIM_Debug
			memset(_sim->response, 0, sizeof(_sim->response));
 8002f3a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f3e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002f48:	2232      	movs	r2, #50	@ 0x32
 8002f4a:	2100      	movs	r1, #0
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f004 fab1 	bl	80074b4 <memset>
			strcpy(_sim->response, "Send HTTP request error");
 8002f52:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002f56:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8002f60:	4a32      	ldr	r2, [pc, #200]	@ (800302c <http_post+0x3b4>)
 8002f62:	461d      	mov	r5, r3
 8002f64:	4614      	mov	r4, r2
 8002f66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002f68:	6028      	str	r0, [r5, #0]
 8002f6a:	6069      	str	r1, [r5, #4]
 8002f6c:	60aa      	str	r2, [r5, #8]
 8002f6e:	60eb      	str	r3, [r5, #12]
 8002f70:	cc03      	ldmia	r4!, {r0, r1}
 8002f72:	6128      	str	r0, [r5, #16]
 8002f74:	6169      	str	r1, [r5, #20]
#endif
			ErrCheck = SIM7600_ERROR;
 8002f76:	2300      	movs	r3, #0
 8002f78:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
			goto StopHttpPost;
 8002f7c:	e0ae      	b.n	80030dc <http_post+0x464>
		}
		SIM_Delay(5);
 8002f7e:	2005      	movs	r0, #5
 8002f80:	f000 f95a 	bl	8003238 <HAL_Delay>

		char DataResponseStr[50];
		memset(DataResponseStr, 0, sizeof(DataResponseStr));
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	2232      	movs	r2, #50	@ 0x32
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f004 fa91 	bl	80074b4 <memset>
		int count = 0;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
		for (int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i)
 8002f98:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8002f9c:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002fa0:	e028      	b.n	8002ff4 <http_post+0x37c>
		{
			if (_sim->buffer[i] == '\r')
 8002fa2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002fa6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fb0:	4413      	add	r3, r2
 8002fb2:	339c      	adds	r3, #156	@ 0x9c
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b0d      	cmp	r3, #13
 8002fb8:	d03a      	beq.n	8003030 <http_post+0x3b8>
				break;
			DataResponseStr[count] = _sim->buffer[i];
 8002fba:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002fbe:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002fc2:	681a      	ldr	r2, [r3, #0]
 8002fc4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fc8:	4413      	add	r3, r2
 8002fca:	339c      	adds	r3, #156	@ 0x9c
 8002fcc:	7819      	ldrb	r1, [r3, #0]
 8002fce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8002fd2:	f5a3 728e 	sub.w	r2, r3, #284	@ 0x11c
 8002fd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002fda:	4413      	add	r3, r2
 8002fdc:	460a      	mov	r2, r1
 8002fde:	701a      	strb	r2, [r3, #0]
			++count;
 8002fe0:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
		for (int i = foundRes; i <= SIM_RX_BUFF_SIZE; ++i)
 8002fea:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002fee:	3301      	adds	r3, #1
 8002ff0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002ff4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002ff8:	f240 424c 	movw	r2, #1100	@ 0x44c
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	ddd0      	ble.n	8002fa2 <http_post+0x32a>
 8003000:	e017      	b.n	8003032 <http_post+0x3ba>
 8003002:	bf00      	nop
 8003004:	0800ac98 	.word	0x0800ac98
 8003008:	0800aca4 	.word	0x0800aca4
 800300c:	0800aa84 	.word	0x0800aa84
 8003010:	0800acb8 	.word	0x0800acb8
 8003014:	0800ace4 	.word	0x0800ace4
 8003018:	0800acf8 	.word	0x0800acf8
 800301c:	0800ad10 	.word	0x0800ad10
 8003020:	0800ad1c 	.word	0x0800ad1c
 8003024:	0800ad24 	.word	0x0800ad24
 8003028:	0800ad34 	.word	0x0800ad34
 800302c:	0800ad48 	.word	0x0800ad48
				break;
 8003030:	bf00      	nop
		}

		int DataResponseLen = -1;
 8003032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003036:	64fb      	str	r3, [r7, #76]	@ 0x4c

		int analysisHttpCode = -1;
 8003038:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800303c:	64bb      	str	r3, [r7, #72]	@ 0x48

		sscanf(DataResponseStr, "+HTTPACTION: 1,%d,%d", &analysisHttpCode, &DataResponseLen);
 800303e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8003042:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8003046:	f107 0014 	add.w	r0, r7, #20
 800304a:	4947      	ldr	r1, [pc, #284]	@ (8003168 <http_post+0x4f0>)
 800304c:	f003 fa00 	bl	8006450 <siscanf>

#ifdef SIM_Debug
		strcpy(_sim->DebugResponceStr, DataResponseStr);
 8003050:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003054:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f203 5386 	addw	r3, r3, #1414	@ 0x586
 800305e:	f107 0214 	add.w	r2, r7, #20
 8003062:	4611      	mov	r1, r2
 8003064:	4618      	mov	r0, r3
 8003066:	f004 fac0 	bl	80075ea <strcpy>
		_sim->DebugHTTPPostCode = analysisHttpCode;
 800306a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800306c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003070:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f8c3 2610 	str.w	r2, [r3, #1552]	@ 0x610
		_sim->DebugHTTPGetDataLen = DataResponseLen;
 800307a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800307c:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003080:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f8c3 2604 	str.w	r2, [r3, #1540]	@ 0x604
#endif

		if (analysisHttpCode != 200)
 800308a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800308c:	2bc8      	cmp	r3, #200	@ 0xc8
 800308e:	d01e      	beq.n	80030ce <http_post+0x456>
		{
#ifdef SIM_Debug
			memset(_sim->response, 0, sizeof(_sim->response));
 8003090:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 8003094:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 800309e:	2232      	movs	r2, #50	@ 0x32
 80030a0:	2100      	movs	r1, #0
 80030a2:	4618      	mov	r0, r3
 80030a4:	f004 fa06 	bl	80074b4 <memset>
			strcpy(_sim->response, "HTTP POST error");
 80030a8:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80030ac:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 80030b6:	4a2d      	ldr	r2, [pc, #180]	@ (800316c <http_post+0x4f4>)
 80030b8:	461c      	mov	r4, r3
 80030ba:	4615      	mov	r5, r2
 80030bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80030be:	6020      	str	r0, [r4, #0]
 80030c0:	6061      	str	r1, [r4, #4]
 80030c2:	60a2      	str	r2, [r4, #8]
 80030c4:	60e3      	str	r3, [r4, #12]
#endif
			ErrCheck = SIM7600_ERROR;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
			goto StopHttpPost;
 80030cc:	e006      	b.n	80030dc <http_post+0x464>
		}
	}

	ClearBuffer(_sim);
 80030ce:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80030d2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	f7ff f81f 	bl	800211a <ClearBuffer>

	//	Stop HTTP request
StopHttpPost:
	DeInitHTTP(_sim);
 80030dc:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80030e0:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	f7ff fccb 	bl	8002a80 <DeInitHTTP>
	if (ErrCheck == SIM7600_OK)
 80030ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d12a      	bne.n	8003148 <http_post+0x4d0>
	{
#ifdef SIM_Debug
		memset(_sim->response, 0, sizeof(_sim->response));
 80030f2:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 80030f6:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8003100:	2232      	movs	r2, #50	@ 0x32
 8003102:	2100      	movs	r1, #0
 8003104:	4618      	mov	r0, r3
 8003106:	f004 f9d5 	bl	80074b4 <memset>
		strcpy(_sim->response, "HTTP POST OK");
 800310a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800310e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f503 639e 	add.w	r3, r3, #1264	@ 0x4f0
 8003118:	4a15      	ldr	r2, [pc, #84]	@ (8003170 <http_post+0x4f8>)
 800311a:	461c      	mov	r4, r3
 800311c:	4613      	mov	r3, r2
 800311e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8003120:	6020      	str	r0, [r4, #0]
 8003122:	6061      	str	r1, [r4, #4]
 8003124:	60a2      	str	r2, [r4, #8]
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	7323      	strb	r3, [r4, #12]
		++_sim->CountHTTPGetOK;
 800312a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800312e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f8d3 3608 	ldr.w	r3, [r3, #1544]	@ 0x608
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800313e:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f8c3 2608 	str.w	r2, [r3, #1544]	@ 0x608
#endif
	}
	return SuperviseHTTP(_sim, ErrCheck);
 8003148:	f507 7398 	add.w	r3, r7, #304	@ 0x130
 800314c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003150:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8003154:	6818      	ldr	r0, [r3, #0]
 8003156:	f7ff fd3f 	bl	8002bd8 <SuperviseHTTP>
 800315a:	4603      	mov	r3, r0
}
 800315c:	4618      	mov	r0, r3
 800315e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003162:	46bd      	mov	sp, r7
 8003164:	bdb0      	pop	{r4, r5, r7, pc}
 8003166:	bf00      	nop
 8003168:	0800ad60 	.word	0x0800ad60
 800316c:	0800ad78 	.word	0x0800ad78
 8003170:	0800ad88 	.word	0x0800ad88

08003174 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003178:	4b08      	ldr	r3, [pc, #32]	@ (800319c <HAL_Init+0x28>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a07      	ldr	r2, [pc, #28]	@ (800319c <HAL_Init+0x28>)
 800317e:	f043 0310 	orr.w	r3, r3, #16
 8003182:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003184:	2003      	movs	r0, #3
 8003186:	f000 f947 	bl	8003418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800318a:	200f      	movs	r0, #15
 800318c:	f000 f808 	bl	80031a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003190:	f7fe f9e0 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003194:	2300      	movs	r3, #0
}
 8003196:	4618      	mov	r0, r3
 8003198:	bd80      	pop	{r7, pc}
 800319a:	bf00      	nop
 800319c:	40022000 	.word	0x40022000

080031a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80031a8:	4b12      	ldr	r3, [pc, #72]	@ (80031f4 <HAL_InitTick+0x54>)
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	4b12      	ldr	r3, [pc, #72]	@ (80031f8 <HAL_InitTick+0x58>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	4619      	mov	r1, r3
 80031b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80031b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80031ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 f95f 	bl	8003482 <HAL_SYSTICK_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d001      	beq.n	80031ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e00e      	b.n	80031ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2b0f      	cmp	r3, #15
 80031d2:	d80a      	bhi.n	80031ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80031d4:	2200      	movs	r2, #0
 80031d6:	6879      	ldr	r1, [r7, #4]
 80031d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80031dc:	f000 f927 	bl	800342e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80031e0:	4a06      	ldr	r2, [pc, #24]	@ (80031fc <HAL_InitTick+0x5c>)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
 80031e8:	e000      	b.n	80031ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80031ea:	2301      	movs	r3, #1
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	3708      	adds	r7, #8
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	20000000 	.word	0x20000000
 80031f8:	20000030 	.word	0x20000030
 80031fc:	2000002c 	.word	0x2000002c

08003200 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003200:	b480      	push	{r7}
 8003202:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003204:	4b05      	ldr	r3, [pc, #20]	@ (800321c <HAL_IncTick+0x1c>)
 8003206:	781b      	ldrb	r3, [r3, #0]
 8003208:	461a      	mov	r2, r3
 800320a:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <HAL_IncTick+0x20>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4413      	add	r3, r2
 8003210:	4a03      	ldr	r2, [pc, #12]	@ (8003220 <HAL_IncTick+0x20>)
 8003212:	6013      	str	r3, [r2, #0]
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	bc80      	pop	{r7}
 800321a:	4770      	bx	lr
 800321c:	20000030 	.word	0x20000030
 8003220:	20000acc 	.word	0x20000acc

08003224 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return uwTick;
 8003228:	4b02      	ldr	r3, [pc, #8]	@ (8003234 <HAL_GetTick+0x10>)
 800322a:	681b      	ldr	r3, [r3, #0]
}
 800322c:	4618      	mov	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	bc80      	pop	{r7}
 8003232:	4770      	bx	lr
 8003234:	20000acc 	.word	0x20000acc

08003238 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003240:	f7ff fff0 	bl	8003224 <HAL_GetTick>
 8003244:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003250:	d005      	beq.n	800325e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003252:	4b0a      	ldr	r3, [pc, #40]	@ (800327c <HAL_Delay+0x44>)
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	461a      	mov	r2, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	4413      	add	r3, r2
 800325c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800325e:	bf00      	nop
 8003260:	f7ff ffe0 	bl	8003224 <HAL_GetTick>
 8003264:	4602      	mov	r2, r0
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	1ad3      	subs	r3, r2, r3
 800326a:	68fa      	ldr	r2, [r7, #12]
 800326c:	429a      	cmp	r2, r3
 800326e:	d8f7      	bhi.n	8003260 <HAL_Delay+0x28>
  {
  }
}
 8003270:	bf00      	nop
 8003272:	bf00      	nop
 8003274:	3710      	adds	r7, #16
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000030 	.word	0x20000030

08003280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003290:	4b0c      	ldr	r3, [pc, #48]	@ (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800329c:	4013      	ands	r3, r2
 800329e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80032ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80032b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80032b2:	4a04      	ldr	r2, [pc, #16]	@ (80032c4 <__NVIC_SetPriorityGrouping+0x44>)
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	60d3      	str	r3, [r2, #12]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032cc:	4b04      	ldr	r3, [pc, #16]	@ (80032e0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	0a1b      	lsrs	r3, r3, #8
 80032d2:	f003 0307 	and.w	r3, r3, #7
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	46bd      	mov	sp, r7
 80032da:	bc80      	pop	{r7}
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000ed00 	.word	0xe000ed00

080032e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	db0b      	blt.n	800330e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032f6:	79fb      	ldrb	r3, [r7, #7]
 80032f8:	f003 021f 	and.w	r2, r3, #31
 80032fc:	4906      	ldr	r1, [pc, #24]	@ (8003318 <__NVIC_EnableIRQ+0x34>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	095b      	lsrs	r3, r3, #5
 8003304:	2001      	movs	r0, #1
 8003306:	fa00 f202 	lsl.w	r2, r0, r2
 800330a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	bc80      	pop	{r7}
 8003316:	4770      	bx	lr
 8003318:	e000e100 	.word	0xe000e100

0800331c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	4603      	mov	r3, r0
 8003324:	6039      	str	r1, [r7, #0]
 8003326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800332c:	2b00      	cmp	r3, #0
 800332e:	db0a      	blt.n	8003346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	b2da      	uxtb	r2, r3
 8003334:	490c      	ldr	r1, [pc, #48]	@ (8003368 <__NVIC_SetPriority+0x4c>)
 8003336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800333a:	0112      	lsls	r2, r2, #4
 800333c:	b2d2      	uxtb	r2, r2
 800333e:	440b      	add	r3, r1
 8003340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003344:	e00a      	b.n	800335c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	4908      	ldr	r1, [pc, #32]	@ (800336c <__NVIC_SetPriority+0x50>)
 800334c:	79fb      	ldrb	r3, [r7, #7]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	3b04      	subs	r3, #4
 8003354:	0112      	lsls	r2, r2, #4
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	440b      	add	r3, r1
 800335a:	761a      	strb	r2, [r3, #24]
}
 800335c:	bf00      	nop
 800335e:	370c      	adds	r7, #12
 8003360:	46bd      	mov	sp, r7
 8003362:	bc80      	pop	{r7}
 8003364:	4770      	bx	lr
 8003366:	bf00      	nop
 8003368:	e000e100 	.word	0xe000e100
 800336c:	e000ed00 	.word	0xe000ed00

08003370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003370:	b480      	push	{r7}
 8003372:	b089      	sub	sp, #36	@ 0x24
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	60b9      	str	r1, [r7, #8]
 800337a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f003 0307 	and.w	r3, r3, #7
 8003382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f1c3 0307 	rsb	r3, r3, #7
 800338a:	2b04      	cmp	r3, #4
 800338c:	bf28      	it	cs
 800338e:	2304      	movcs	r3, #4
 8003390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	3304      	adds	r3, #4
 8003396:	2b06      	cmp	r3, #6
 8003398:	d902      	bls.n	80033a0 <NVIC_EncodePriority+0x30>
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	3b03      	subs	r3, #3
 800339e:	e000      	b.n	80033a2 <NVIC_EncodePriority+0x32>
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80033a8:	69bb      	ldr	r3, [r7, #24]
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	401a      	ands	r2, r3
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033b8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80033bc:	697b      	ldr	r3, [r7, #20]
 80033be:	fa01 f303 	lsl.w	r3, r1, r3
 80033c2:	43d9      	mvns	r1, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033c8:	4313      	orrs	r3, r2
         );
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3724      	adds	r7, #36	@ 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bc80      	pop	{r7}
 80033d2:	4770      	bx	lr

080033d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b082      	sub	sp, #8
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	3b01      	subs	r3, #1
 80033e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80033e4:	d301      	bcc.n	80033ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033e6:	2301      	movs	r3, #1
 80033e8:	e00f      	b.n	800340a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033ea:	4a0a      	ldr	r2, [pc, #40]	@ (8003414 <SysTick_Config+0x40>)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033f2:	210f      	movs	r1, #15
 80033f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033f8:	f7ff ff90 	bl	800331c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033fc:	4b05      	ldr	r3, [pc, #20]	@ (8003414 <SysTick_Config+0x40>)
 80033fe:	2200      	movs	r2, #0
 8003400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003402:	4b04      	ldr	r3, [pc, #16]	@ (8003414 <SysTick_Config+0x40>)
 8003404:	2207      	movs	r2, #7
 8003406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	e000e010 	.word	0xe000e010

08003418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003420:	6878      	ldr	r0, [r7, #4]
 8003422:	f7ff ff2d 	bl	8003280 <__NVIC_SetPriorityGrouping>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}

0800342e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	4603      	mov	r3, r0
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
 800343a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800343c:	2300      	movs	r3, #0
 800343e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003440:	f7ff ff42 	bl	80032c8 <__NVIC_GetPriorityGrouping>
 8003444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003446:	687a      	ldr	r2, [r7, #4]
 8003448:	68b9      	ldr	r1, [r7, #8]
 800344a:	6978      	ldr	r0, [r7, #20]
 800344c:	f7ff ff90 	bl	8003370 <NVIC_EncodePriority>
 8003450:	4602      	mov	r2, r0
 8003452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003456:	4611      	mov	r1, r2
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff5f 	bl	800331c <__NVIC_SetPriority>
}
 800345e:	bf00      	nop
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	4603      	mov	r3, r0
 800346e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003474:	4618      	mov	r0, r3
 8003476:	f7ff ff35 	bl	80032e4 <__NVIC_EnableIRQ>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}

08003482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003482:	b580      	push	{r7, lr}
 8003484:	b082      	sub	sp, #8
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f7ff ffa2 	bl	80033d4 <SysTick_Config>
 8003490:	4603      	mov	r3, r0
}
 8003492:	4618      	mov	r0, r3
 8003494:	3708      	adds	r7, #8
 8003496:	46bd      	mov	sp, r7
 8003498:	bd80      	pop	{r7, pc}
	...

0800349c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034a4:	2300      	movs	r3, #0
 80034a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d101      	bne.n	80034b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e043      	b.n	800353a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	461a      	mov	r2, r3
 80034b8:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <HAL_DMA_Init+0xa8>)
 80034ba:	4413      	add	r3, r2
 80034bc:	4a22      	ldr	r2, [pc, #136]	@ (8003548 <HAL_DMA_Init+0xac>)
 80034be:	fba2 2303 	umull	r2, r3, r2, r3
 80034c2:	091b      	lsrs	r3, r3, #4
 80034c4:	009a      	lsls	r2, r3, #2
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a1f      	ldr	r2, [pc, #124]	@ (800354c <HAL_DMA_Init+0xb0>)
 80034ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80034e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80034ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80034f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	69db      	ldr	r3, [r3, #28]
 8003512:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	bc80      	pop	{r7}
 8003542:	4770      	bx	lr
 8003544:	bffdfff8 	.word	0xbffdfff8
 8003548:	cccccccd 	.word	0xcccccccd
 800354c:	40020000 	.word	0x40020000

08003550 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
 800355c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800355e:	2300      	movs	r3, #0
 8003560:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_DMA_Start_IT+0x20>
 800356c:	2302      	movs	r3, #2
 800356e:	e04b      	b.n	8003608 <HAL_DMA_Start_IT+0xb8>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b01      	cmp	r3, #1
 8003582:	d13a      	bne.n	80035fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2202      	movs	r2, #2
 8003588:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681a      	ldr	r2, [r3, #0]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f022 0201 	bic.w	r2, r2, #1
 80035a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	68b9      	ldr	r1, [r7, #8]
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f000 f9eb 	bl	8003984 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d008      	beq.n	80035c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f042 020e 	orr.w	r2, r2, #14
 80035c4:	601a      	str	r2, [r3, #0]
 80035c6:	e00f      	b.n	80035e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0204 	bic.w	r2, r2, #4
 80035d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 020a 	orr.w	r2, r2, #10
 80035e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	681a      	ldr	r2, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	601a      	str	r2, [r3, #0]
 80035f8:	e005      	b.n	8003606 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003602:	2302      	movs	r3, #2
 8003604:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003606:	7dfb      	ldrb	r3, [r7, #23]
}
 8003608:	4618      	mov	r0, r3
 800360a:	3718      	adds	r7, #24
 800360c:	46bd      	mov	sp, r7
 800360e:	bd80      	pop	{r7, pc}

08003610 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003618:	2300      	movs	r3, #0
 800361a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8003622:	b2db      	uxtb	r3, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d008      	beq.n	800363a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2204      	movs	r2, #4
 800362c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2200      	movs	r2, #0
 8003632:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e020      	b.n	800367c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f022 020e 	bic.w	r2, r2, #14
 8003648:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	681a      	ldr	r2, [r3, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f022 0201 	bic.w	r2, r2, #1
 8003658:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003662:	2101      	movs	r1, #1
 8003664:	fa01 f202 	lsl.w	r2, r1, r2
 8003668:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2200      	movs	r2, #0
 8003676:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800367a:	7bfb      	ldrb	r3, [r7, #15]
}
 800367c:	4618      	mov	r0, r3
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	bc80      	pop	{r7}
 8003684:	4770      	bx	lr
	...

08003688 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003690:	2300      	movs	r3, #0
 8003692:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b02      	cmp	r3, #2
 800369e:	d005      	beq.n	80036ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2204      	movs	r2, #4
 80036a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	73fb      	strb	r3, [r7, #15]
 80036aa:	e051      	b.n	8003750 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 020e 	bic.w	r2, r2, #14
 80036ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f022 0201 	bic.w	r2, r2, #1
 80036ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a22      	ldr	r2, [pc, #136]	@ (800375c <HAL_DMA_Abort_IT+0xd4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d029      	beq.n	800372a <HAL_DMA_Abort_IT+0xa2>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a21      	ldr	r2, [pc, #132]	@ (8003760 <HAL_DMA_Abort_IT+0xd8>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d022      	beq.n	8003726 <HAL_DMA_Abort_IT+0x9e>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a1f      	ldr	r2, [pc, #124]	@ (8003764 <HAL_DMA_Abort_IT+0xdc>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d01a      	beq.n	8003720 <HAL_DMA_Abort_IT+0x98>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003768 <HAL_DMA_Abort_IT+0xe0>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d012      	beq.n	800371a <HAL_DMA_Abort_IT+0x92>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a1c      	ldr	r2, [pc, #112]	@ (800376c <HAL_DMA_Abort_IT+0xe4>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d00a      	beq.n	8003714 <HAL_DMA_Abort_IT+0x8c>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1b      	ldr	r2, [pc, #108]	@ (8003770 <HAL_DMA_Abort_IT+0xe8>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d102      	bne.n	800370e <HAL_DMA_Abort_IT+0x86>
 8003708:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800370c:	e00e      	b.n	800372c <HAL_DMA_Abort_IT+0xa4>
 800370e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003712:	e00b      	b.n	800372c <HAL_DMA_Abort_IT+0xa4>
 8003714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003718:	e008      	b.n	800372c <HAL_DMA_Abort_IT+0xa4>
 800371a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800371e:	e005      	b.n	800372c <HAL_DMA_Abort_IT+0xa4>
 8003720:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003724:	e002      	b.n	800372c <HAL_DMA_Abort_IT+0xa4>
 8003726:	2310      	movs	r3, #16
 8003728:	e000      	b.n	800372c <HAL_DMA_Abort_IT+0xa4>
 800372a:	2301      	movs	r3, #1
 800372c:	4a11      	ldr	r2, [pc, #68]	@ (8003774 <HAL_DMA_Abort_IT+0xec>)
 800372e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800374c:	6878      	ldr	r0, [r7, #4]
 800374e:	4798      	blx	r3
    } 
  }
  return status;
 8003750:	7bfb      	ldrb	r3, [r7, #15]
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40020008 	.word	0x40020008
 8003760:	4002001c 	.word	0x4002001c
 8003764:	40020030 	.word	0x40020030
 8003768:	40020044 	.word	0x40020044
 800376c:	40020058 	.word	0x40020058
 8003770:	4002006c 	.word	0x4002006c
 8003774:	40020000 	.word	0x40020000

08003778 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b084      	sub	sp, #16
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003794:	2204      	movs	r2, #4
 8003796:	409a      	lsls	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4013      	ands	r3, r2
 800379c:	2b00      	cmp	r3, #0
 800379e:	d04f      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc8>
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0304 	and.w	r3, r3, #4
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d04a      	beq.n	8003840 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0320 	and.w	r3, r3, #32
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d107      	bne.n	80037c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f022 0204 	bic.w	r2, r2, #4
 80037c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a66      	ldr	r2, [pc, #408]	@ (8003968 <HAL_DMA_IRQHandler+0x1f0>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d029      	beq.n	8003826 <HAL_DMA_IRQHandler+0xae>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a65      	ldr	r2, [pc, #404]	@ (800396c <HAL_DMA_IRQHandler+0x1f4>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <HAL_DMA_IRQHandler+0xaa>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a63      	ldr	r2, [pc, #396]	@ (8003970 <HAL_DMA_IRQHandler+0x1f8>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d01a      	beq.n	800381c <HAL_DMA_IRQHandler+0xa4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a62      	ldr	r2, [pc, #392]	@ (8003974 <HAL_DMA_IRQHandler+0x1fc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d012      	beq.n	8003816 <HAL_DMA_IRQHandler+0x9e>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a60      	ldr	r2, [pc, #384]	@ (8003978 <HAL_DMA_IRQHandler+0x200>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00a      	beq.n	8003810 <HAL_DMA_IRQHandler+0x98>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a5f      	ldr	r2, [pc, #380]	@ (800397c <HAL_DMA_IRQHandler+0x204>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d102      	bne.n	800380a <HAL_DMA_IRQHandler+0x92>
 8003804:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003808:	e00e      	b.n	8003828 <HAL_DMA_IRQHandler+0xb0>
 800380a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800380e:	e00b      	b.n	8003828 <HAL_DMA_IRQHandler+0xb0>
 8003810:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8003814:	e008      	b.n	8003828 <HAL_DMA_IRQHandler+0xb0>
 8003816:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800381a:	e005      	b.n	8003828 <HAL_DMA_IRQHandler+0xb0>
 800381c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003820:	e002      	b.n	8003828 <HAL_DMA_IRQHandler+0xb0>
 8003822:	2340      	movs	r3, #64	@ 0x40
 8003824:	e000      	b.n	8003828 <HAL_DMA_IRQHandler+0xb0>
 8003826:	2304      	movs	r3, #4
 8003828:	4a55      	ldr	r2, [pc, #340]	@ (8003980 <HAL_DMA_IRQHandler+0x208>)
 800382a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8094 	beq.w	800395e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800383a:	6878      	ldr	r0, [r7, #4]
 800383c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800383e:	e08e      	b.n	800395e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003844:	2202      	movs	r2, #2
 8003846:	409a      	lsls	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	4013      	ands	r3, r2
 800384c:	2b00      	cmp	r3, #0
 800384e:	d056      	beq.n	80038fe <HAL_DMA_IRQHandler+0x186>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f003 0302 	and.w	r3, r3, #2
 8003856:	2b00      	cmp	r3, #0
 8003858:	d051      	beq.n	80038fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 020a 	bic.w	r2, r2, #10
 8003876:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2201      	movs	r2, #1
 800387c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4a38      	ldr	r2, [pc, #224]	@ (8003968 <HAL_DMA_IRQHandler+0x1f0>)
 8003886:	4293      	cmp	r3, r2
 8003888:	d029      	beq.n	80038de <HAL_DMA_IRQHandler+0x166>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a37      	ldr	r2, [pc, #220]	@ (800396c <HAL_DMA_IRQHandler+0x1f4>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d022      	beq.n	80038da <HAL_DMA_IRQHandler+0x162>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a35      	ldr	r2, [pc, #212]	@ (8003970 <HAL_DMA_IRQHandler+0x1f8>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d01a      	beq.n	80038d4 <HAL_DMA_IRQHandler+0x15c>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a34      	ldr	r2, [pc, #208]	@ (8003974 <HAL_DMA_IRQHandler+0x1fc>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d012      	beq.n	80038ce <HAL_DMA_IRQHandler+0x156>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a32      	ldr	r2, [pc, #200]	@ (8003978 <HAL_DMA_IRQHandler+0x200>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00a      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x150>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a31      	ldr	r2, [pc, #196]	@ (800397c <HAL_DMA_IRQHandler+0x204>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d102      	bne.n	80038c2 <HAL_DMA_IRQHandler+0x14a>
 80038bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80038c0:	e00e      	b.n	80038e0 <HAL_DMA_IRQHandler+0x168>
 80038c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80038c6:	e00b      	b.n	80038e0 <HAL_DMA_IRQHandler+0x168>
 80038c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80038cc:	e008      	b.n	80038e0 <HAL_DMA_IRQHandler+0x168>
 80038ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80038d2:	e005      	b.n	80038e0 <HAL_DMA_IRQHandler+0x168>
 80038d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80038d8:	e002      	b.n	80038e0 <HAL_DMA_IRQHandler+0x168>
 80038da:	2320      	movs	r3, #32
 80038dc:	e000      	b.n	80038e0 <HAL_DMA_IRQHandler+0x168>
 80038de:	2302      	movs	r3, #2
 80038e0:	4a27      	ldr	r2, [pc, #156]	@ (8003980 <HAL_DMA_IRQHandler+0x208>)
 80038e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d034      	beq.n	800395e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80038fc:	e02f      	b.n	800395e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003902:	2208      	movs	r2, #8
 8003904:	409a      	lsls	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	4013      	ands	r3, r2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d028      	beq.n	8003960 <HAL_DMA_IRQHandler+0x1e8>
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f003 0308 	and.w	r3, r3, #8
 8003914:	2b00      	cmp	r3, #0
 8003916:	d023      	beq.n	8003960 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 020e 	bic.w	r2, r2, #14
 8003926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003930:	2101      	movs	r1, #1
 8003932:	fa01 f202 	lsl.w	r2, r1, r2
 8003936:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2201      	movs	r2, #1
 8003942:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	2b00      	cmp	r3, #0
 8003954:	d004      	beq.n	8003960 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	4798      	blx	r3
    }
  }
  return;
 800395e:	bf00      	nop
 8003960:	bf00      	nop
}
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	40020008 	.word	0x40020008
 800396c:	4002001c 	.word	0x4002001c
 8003970:	40020030 	.word	0x40020030
 8003974:	40020044 	.word	0x40020044
 8003978:	40020058 	.word	0x40020058
 800397c:	4002006c 	.word	0x4002006c
 8003980:	40020000 	.word	0x40020000

08003984 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003984:	b480      	push	{r7}
 8003986:	b085      	sub	sp, #20
 8003988:	af00      	add	r7, sp, #0
 800398a:	60f8      	str	r0, [r7, #12]
 800398c:	60b9      	str	r1, [r7, #8]
 800398e:	607a      	str	r2, [r7, #4]
 8003990:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800399a:	2101      	movs	r1, #1
 800399c:	fa01 f202 	lsl.w	r2, r1, r2
 80039a0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	683a      	ldr	r2, [r7, #0]
 80039a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b10      	cmp	r3, #16
 80039b0:	d108      	bne.n	80039c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80039c2:	e007      	b.n	80039d4 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	68ba      	ldr	r2, [r7, #8]
 80039ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	60da      	str	r2, [r3, #12]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	bc80      	pop	{r7}
 80039dc:	4770      	bx	lr
	...

080039e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b08b      	sub	sp, #44	@ 0x2c
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80039ea:	2300      	movs	r3, #0
 80039ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80039ee:	2300      	movs	r3, #0
 80039f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039f2:	e169      	b.n	8003cc8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80039f4:	2201      	movs	r2, #1
 80039f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039f8:	fa02 f303 	lsl.w	r3, r2, r3
 80039fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	69fa      	ldr	r2, [r7, #28]
 8003a04:	4013      	ands	r3, r2
 8003a06:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	f040 8158 	bne.w	8003cc2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	4a9a      	ldr	r2, [pc, #616]	@ (8003c80 <HAL_GPIO_Init+0x2a0>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d05e      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a1c:	4a98      	ldr	r2, [pc, #608]	@ (8003c80 <HAL_GPIO_Init+0x2a0>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d875      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a22:	4a98      	ldr	r2, [pc, #608]	@ (8003c84 <HAL_GPIO_Init+0x2a4>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d058      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a28:	4a96      	ldr	r2, [pc, #600]	@ (8003c84 <HAL_GPIO_Init+0x2a4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d86f      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a2e:	4a96      	ldr	r2, [pc, #600]	@ (8003c88 <HAL_GPIO_Init+0x2a8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d052      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a34:	4a94      	ldr	r2, [pc, #592]	@ (8003c88 <HAL_GPIO_Init+0x2a8>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d869      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a3a:	4a94      	ldr	r2, [pc, #592]	@ (8003c8c <HAL_GPIO_Init+0x2ac>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	d04c      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a40:	4a92      	ldr	r2, [pc, #584]	@ (8003c8c <HAL_GPIO_Init+0x2ac>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d863      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a46:	4a92      	ldr	r2, [pc, #584]	@ (8003c90 <HAL_GPIO_Init+0x2b0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d046      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
 8003a4c:	4a90      	ldr	r2, [pc, #576]	@ (8003c90 <HAL_GPIO_Init+0x2b0>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d85d      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a52:	2b12      	cmp	r3, #18
 8003a54:	d82a      	bhi.n	8003aac <HAL_GPIO_Init+0xcc>
 8003a56:	2b12      	cmp	r3, #18
 8003a58:	d859      	bhi.n	8003b0e <HAL_GPIO_Init+0x12e>
 8003a5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003a60 <HAL_GPIO_Init+0x80>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003adb 	.word	0x08003adb
 8003a64:	08003ab5 	.word	0x08003ab5
 8003a68:	08003ac7 	.word	0x08003ac7
 8003a6c:	08003b09 	.word	0x08003b09
 8003a70:	08003b0f 	.word	0x08003b0f
 8003a74:	08003b0f 	.word	0x08003b0f
 8003a78:	08003b0f 	.word	0x08003b0f
 8003a7c:	08003b0f 	.word	0x08003b0f
 8003a80:	08003b0f 	.word	0x08003b0f
 8003a84:	08003b0f 	.word	0x08003b0f
 8003a88:	08003b0f 	.word	0x08003b0f
 8003a8c:	08003b0f 	.word	0x08003b0f
 8003a90:	08003b0f 	.word	0x08003b0f
 8003a94:	08003b0f 	.word	0x08003b0f
 8003a98:	08003b0f 	.word	0x08003b0f
 8003a9c:	08003b0f 	.word	0x08003b0f
 8003aa0:	08003b0f 	.word	0x08003b0f
 8003aa4:	08003abd 	.word	0x08003abd
 8003aa8:	08003ad1 	.word	0x08003ad1
 8003aac:	4a79      	ldr	r2, [pc, #484]	@ (8003c94 <HAL_GPIO_Init+0x2b4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ab2:	e02c      	b.n	8003b0e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	623b      	str	r3, [r7, #32]
          break;
 8003aba:	e029      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	3304      	adds	r3, #4
 8003ac2:	623b      	str	r3, [r7, #32]
          break;
 8003ac4:	e024      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	3308      	adds	r3, #8
 8003acc:	623b      	str	r3, [r7, #32]
          break;
 8003ace:	e01f      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	330c      	adds	r3, #12
 8003ad6:	623b      	str	r3, [r7, #32]
          break;
 8003ad8:	e01a      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d102      	bne.n	8003ae8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003ae2:	2304      	movs	r3, #4
 8003ae4:	623b      	str	r3, [r7, #32]
          break;
 8003ae6:	e013      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	689b      	ldr	r3, [r3, #8]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d105      	bne.n	8003afc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003af0:	2308      	movs	r3, #8
 8003af2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	69fa      	ldr	r2, [r7, #28]
 8003af8:	611a      	str	r2, [r3, #16]
          break;
 8003afa:	e009      	b.n	8003b10 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003afc:	2308      	movs	r3, #8
 8003afe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	69fa      	ldr	r2, [r7, #28]
 8003b04:	615a      	str	r2, [r3, #20]
          break;
 8003b06:	e003      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	623b      	str	r3, [r7, #32]
          break;
 8003b0c:	e000      	b.n	8003b10 <HAL_GPIO_Init+0x130>
          break;
 8003b0e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	2bff      	cmp	r3, #255	@ 0xff
 8003b14:	d801      	bhi.n	8003b1a <HAL_GPIO_Init+0x13a>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	e001      	b.n	8003b1e <HAL_GPIO_Init+0x13e>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	3304      	adds	r3, #4
 8003b1e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	2bff      	cmp	r3, #255	@ 0xff
 8003b24:	d802      	bhi.n	8003b2c <HAL_GPIO_Init+0x14c>
 8003b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	e002      	b.n	8003b32 <HAL_GPIO_Init+0x152>
 8003b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b2e:	3b08      	subs	r3, #8
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	210f      	movs	r1, #15
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b40:	43db      	mvns	r3, r3
 8003b42:	401a      	ands	r2, r3
 8003b44:	6a39      	ldr	r1, [r7, #32]
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	fa01 f303 	lsl.w	r3, r1, r3
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	f000 80b1 	beq.w	8003cc2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003b60:	4b4d      	ldr	r3, [pc, #308]	@ (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	4a4c      	ldr	r2, [pc, #304]	@ (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b66:	f043 0301 	orr.w	r3, r3, #1
 8003b6a:	6193      	str	r3, [r2, #24]
 8003b6c:	4b4a      	ldr	r3, [pc, #296]	@ (8003c98 <HAL_GPIO_Init+0x2b8>)
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f003 0301 	and.w	r3, r3, #1
 8003b74:	60bb      	str	r3, [r7, #8]
 8003b76:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b78:	4a48      	ldr	r2, [pc, #288]	@ (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b7c:	089b      	lsrs	r3, r3, #2
 8003b7e:	3302      	adds	r3, #2
 8003b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b84:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	220f      	movs	r2, #15
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	68fa      	ldr	r2, [r7, #12]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a40      	ldr	r2, [pc, #256]	@ (8003ca0 <HAL_GPIO_Init+0x2c0>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d013      	beq.n	8003bcc <HAL_GPIO_Init+0x1ec>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	4a3f      	ldr	r2, [pc, #252]	@ (8003ca4 <HAL_GPIO_Init+0x2c4>)
 8003ba8:	4293      	cmp	r3, r2
 8003baa:	d00d      	beq.n	8003bc8 <HAL_GPIO_Init+0x1e8>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a3e      	ldr	r2, [pc, #248]	@ (8003ca8 <HAL_GPIO_Init+0x2c8>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d007      	beq.n	8003bc4 <HAL_GPIO_Init+0x1e4>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a3d      	ldr	r2, [pc, #244]	@ (8003cac <HAL_GPIO_Init+0x2cc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <HAL_GPIO_Init+0x1e0>
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e006      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc0:	2304      	movs	r3, #4
 8003bc2:	e004      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e002      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e000      	b.n	8003bce <HAL_GPIO_Init+0x1ee>
 8003bcc:	2300      	movs	r3, #0
 8003bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bd0:	f002 0203 	and.w	r2, r2, #3
 8003bd4:	0092      	lsls	r2, r2, #2
 8003bd6:	4093      	lsls	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003bde:	492f      	ldr	r1, [pc, #188]	@ (8003c9c <HAL_GPIO_Init+0x2bc>)
 8003be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003be2:	089b      	lsrs	r3, r3, #2
 8003be4:	3302      	adds	r3, #2
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d006      	beq.n	8003c06 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	492c      	ldr	r1, [pc, #176]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003bfe:	69bb      	ldr	r3, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	608b      	str	r3, [r1, #8]
 8003c04:	e006      	b.n	8003c14 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c06:	4b2a      	ldr	r3, [pc, #168]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	43db      	mvns	r3, r3
 8003c0e:	4928      	ldr	r1, [pc, #160]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d006      	beq.n	8003c2e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c20:	4b23      	ldr	r3, [pc, #140]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c22:	68da      	ldr	r2, [r3, #12]
 8003c24:	4922      	ldr	r1, [pc, #136]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	60cb      	str	r3, [r1, #12]
 8003c2c:	e006      	b.n	8003c3c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c2e:	4b20      	ldr	r3, [pc, #128]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c30:	68da      	ldr	r2, [r3, #12]
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	43db      	mvns	r3, r3
 8003c36:	491e      	ldr	r1, [pc, #120]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d006      	beq.n	8003c56 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003c48:	4b19      	ldr	r3, [pc, #100]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	4918      	ldr	r1, [pc, #96]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	604b      	str	r3, [r1, #4]
 8003c54:	e006      	b.n	8003c64 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003c56:	4b16      	ldr	r3, [pc, #88]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	4914      	ldr	r1, [pc, #80]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c60:	4013      	ands	r3, r2
 8003c62:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d021      	beq.n	8003cb4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003c70:	4b0f      	ldr	r3, [pc, #60]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	490e      	ldr	r1, [pc, #56]	@ (8003cb0 <HAL_GPIO_Init+0x2d0>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	600b      	str	r3, [r1, #0]
 8003c7c:	e021      	b.n	8003cc2 <HAL_GPIO_Init+0x2e2>
 8003c7e:	bf00      	nop
 8003c80:	10320000 	.word	0x10320000
 8003c84:	10310000 	.word	0x10310000
 8003c88:	10220000 	.word	0x10220000
 8003c8c:	10210000 	.word	0x10210000
 8003c90:	10120000 	.word	0x10120000
 8003c94:	10110000 	.word	0x10110000
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40010000 	.word	0x40010000
 8003ca0:	40010800 	.word	0x40010800
 8003ca4:	40010c00 	.word	0x40010c00
 8003ca8:	40011000 	.word	0x40011000
 8003cac:	40011400 	.word	0x40011400
 8003cb0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce4 <HAL_GPIO_Init+0x304>)
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	43db      	mvns	r3, r3
 8003cbc:	4909      	ldr	r1, [pc, #36]	@ (8003ce4 <HAL_GPIO_Init+0x304>)
 8003cbe:	4013      	ands	r3, r2
 8003cc0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cce:	fa22 f303 	lsr.w	r3, r2, r3
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f47f ae8e 	bne.w	80039f4 <HAL_GPIO_Init+0x14>
  }
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	372c      	adds	r7, #44	@ 0x2c
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr
 8003ce4:	40010400 	.word	0x40010400

08003ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b083      	sub	sp, #12
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	807b      	strh	r3, [r7, #2]
 8003cf4:	4613      	mov	r3, r2
 8003cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cf8:	787b      	ldrb	r3, [r7, #1]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d003      	beq.n	8003d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cfe:	887a      	ldrh	r2, [r7, #2]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003d04:	e003      	b.n	8003d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003d06:	887b      	ldrh	r3, [r7, #2]
 8003d08:	041a      	lsls	r2, r3, #16
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	611a      	str	r2, [r3, #16]
}
 8003d0e:	bf00      	nop
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bc80      	pop	{r7}
 8003d16:	4770      	bx	lr

08003d18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b086      	sub	sp, #24
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d101      	bne.n	8003d2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e272      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0301 	and.w	r3, r3, #1
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f000 8087 	beq.w	8003e46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d38:	4b92      	ldr	r3, [pc, #584]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f003 030c 	and.w	r3, r3, #12
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d00c      	beq.n	8003d5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d44:	4b8f      	ldr	r3, [pc, #572]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f003 030c 	and.w	r3, r3, #12
 8003d4c:	2b08      	cmp	r3, #8
 8003d4e:	d112      	bne.n	8003d76 <HAL_RCC_OscConfig+0x5e>
 8003d50:	4b8c      	ldr	r3, [pc, #560]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d5c:	d10b      	bne.n	8003d76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d5e:	4b89      	ldr	r3, [pc, #548]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d06c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x12c>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d168      	bne.n	8003e44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e24c      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d7e:	d106      	bne.n	8003d8e <HAL_RCC_OscConfig+0x76>
 8003d80:	4b80      	ldr	r3, [pc, #512]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a7f      	ldr	r2, [pc, #508]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d86:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d8a:	6013      	str	r3, [r2, #0]
 8003d8c:	e02e      	b.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10c      	bne.n	8003db0 <HAL_RCC_OscConfig+0x98>
 8003d96:	4b7b      	ldr	r3, [pc, #492]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a7a      	ldr	r2, [pc, #488]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003d9c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003da0:	6013      	str	r3, [r2, #0]
 8003da2:	4b78      	ldr	r3, [pc, #480]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a77      	ldr	r2, [pc, #476]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003da8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e01d      	b.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	685b      	ldr	r3, [r3, #4]
 8003db4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003db8:	d10c      	bne.n	8003dd4 <HAL_RCC_OscConfig+0xbc>
 8003dba:	4b72      	ldr	r3, [pc, #456]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a71      	ldr	r2, [pc, #452]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dc0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003dc4:	6013      	str	r3, [r2, #0]
 8003dc6:	4b6f      	ldr	r3, [pc, #444]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4a6e      	ldr	r2, [pc, #440]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	e00b      	b.n	8003dec <HAL_RCC_OscConfig+0xd4>
 8003dd4:	4b6b      	ldr	r3, [pc, #428]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a6a      	ldr	r2, [pc, #424]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003dda:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dde:	6013      	str	r3, [r2, #0]
 8003de0:	4b68      	ldr	r3, [pc, #416]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a67      	ldr	r2, [pc, #412]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003de6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003dea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d013      	beq.n	8003e1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003df4:	f7ff fa16 	bl	8003224 <HAL_GetTick>
 8003df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dfa:	e008      	b.n	8003e0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfc:	f7ff fa12 	bl	8003224 <HAL_GetTick>
 8003e00:	4602      	mov	r2, r0
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	2b64      	cmp	r3, #100	@ 0x64
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e200      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e0e:	4b5d      	ldr	r3, [pc, #372]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d0f0      	beq.n	8003dfc <HAL_RCC_OscConfig+0xe4>
 8003e1a:	e014      	b.n	8003e46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7ff fa02 	bl	8003224 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e24:	f7ff f9fe 	bl	8003224 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b64      	cmp	r3, #100	@ 0x64
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e1ec      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e36:	4b53      	ldr	r3, [pc, #332]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x10c>
 8003e42:	e000      	b.n	8003e46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d063      	beq.n	8003f1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e52:	4b4c      	ldr	r3, [pc, #304]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	f003 030c 	and.w	r3, r3, #12
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d00b      	beq.n	8003e76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e5e:	4b49      	ldr	r3, [pc, #292]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e60:	685b      	ldr	r3, [r3, #4]
 8003e62:	f003 030c 	and.w	r3, r3, #12
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d11c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x18c>
 8003e6a:	4b46      	ldr	r3, [pc, #280]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d116      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e76:	4b43      	ldr	r3, [pc, #268]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0302 	and.w	r3, r3, #2
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x176>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d001      	beq.n	8003e8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e1c0      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b3d      	ldr	r3, [pc, #244]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	00db      	lsls	r3, r3, #3
 8003e9c:	4939      	ldr	r1, [pc, #228]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ea2:	e03a      	b.n	8003f1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	691b      	ldr	r3, [r3, #16]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d020      	beq.n	8003eee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003eac:	4b36      	ldr	r3, [pc, #216]	@ (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003eae:	2201      	movs	r2, #1
 8003eb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb2:	f7ff f9b7 	bl	8003224 <HAL_GetTick>
 8003eb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	e008      	b.n	8003ecc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eba:	f7ff f9b3 	bl	8003224 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	2b02      	cmp	r3, #2
 8003ec6:	d901      	bls.n	8003ecc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ec8:	2303      	movs	r3, #3
 8003eca:	e1a1      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d0f0      	beq.n	8003eba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed8:	4b2a      	ldr	r3, [pc, #168]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	00db      	lsls	r3, r3, #3
 8003ee6:	4927      	ldr	r1, [pc, #156]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	600b      	str	r3, [r1, #0]
 8003eec:	e015      	b.n	8003f1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eee:	4b26      	ldr	r3, [pc, #152]	@ (8003f88 <HAL_RCC_OscConfig+0x270>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef4:	f7ff f996 	bl	8003224 <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	e008      	b.n	8003f0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003efc:	f7ff f992 	bl	8003224 <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d901      	bls.n	8003f0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e180      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f0e:	4b1d      	ldr	r3, [pc, #116]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0302 	and.w	r3, r3, #2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1f0      	bne.n	8003efc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 0308 	and.w	r3, r3, #8
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d03a      	beq.n	8003f9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	699b      	ldr	r3, [r3, #24]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d019      	beq.n	8003f62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f2e:	4b17      	ldr	r3, [pc, #92]	@ (8003f8c <HAL_RCC_OscConfig+0x274>)
 8003f30:	2201      	movs	r2, #1
 8003f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f34:	f7ff f976 	bl	8003224 <HAL_GetTick>
 8003f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	e008      	b.n	8003f4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f3c:	f7ff f972 	bl	8003224 <HAL_GetTick>
 8003f40:	4602      	mov	r2, r0
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	1ad3      	subs	r3, r2, r3
 8003f46:	2b02      	cmp	r3, #2
 8003f48:	d901      	bls.n	8003f4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e160      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8003f84 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d0f0      	beq.n	8003f3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f5a:	2001      	movs	r0, #1
 8003f5c:	f000 face 	bl	80044fc <RCC_Delay>
 8003f60:	e01c      	b.n	8003f9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f62:	4b0a      	ldr	r3, [pc, #40]	@ (8003f8c <HAL_RCC_OscConfig+0x274>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f68:	f7ff f95c 	bl	8003224 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f6e:	e00f      	b.n	8003f90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f70:	f7ff f958 	bl	8003224 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d908      	bls.n	8003f90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e146      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
 8003f82:	bf00      	nop
 8003f84:	40021000 	.word	0x40021000
 8003f88:	42420000 	.word	0x42420000
 8003f8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f90:	4b92      	ldr	r3, [pc, #584]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	f003 0302 	and.w	r3, r3, #2
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1e9      	bne.n	8003f70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0304 	and.w	r3, r3, #4
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80a6 	beq.w	80040f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003faa:	2300      	movs	r3, #0
 8003fac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fae:	4b8b      	ldr	r3, [pc, #556]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8003fb0:	69db      	ldr	r3, [r3, #28]
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d10d      	bne.n	8003fd6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fba:	4b88      	ldr	r3, [pc, #544]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	4a87      	ldr	r2, [pc, #540]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8003fc0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fc4:	61d3      	str	r3, [r2, #28]
 8003fc6:	4b85      	ldr	r3, [pc, #532]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8003fc8:	69db      	ldr	r3, [r3, #28]
 8003fca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd6:	4b82      	ldr	r3, [pc, #520]	@ (80041e0 <HAL_RCC_OscConfig+0x4c8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d118      	bne.n	8004014 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fe2:	4b7f      	ldr	r3, [pc, #508]	@ (80041e0 <HAL_RCC_OscConfig+0x4c8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80041e0 <HAL_RCC_OscConfig+0x4c8>)
 8003fe8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fee:	f7ff f919 	bl	8003224 <HAL_GetTick>
 8003ff2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff4:	e008      	b.n	8004008 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ff6:	f7ff f915 	bl	8003224 <HAL_GetTick>
 8003ffa:	4602      	mov	r2, r0
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	1ad3      	subs	r3, r2, r3
 8004000:	2b64      	cmp	r3, #100	@ 0x64
 8004002:	d901      	bls.n	8004008 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004004:	2303      	movs	r3, #3
 8004006:	e103      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004008:	4b75      	ldr	r3, [pc, #468]	@ (80041e0 <HAL_RCC_OscConfig+0x4c8>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004010:	2b00      	cmp	r3, #0
 8004012:	d0f0      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d106      	bne.n	800402a <HAL_RCC_OscConfig+0x312>
 800401c:	4b6f      	ldr	r3, [pc, #444]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 800401e:	6a1b      	ldr	r3, [r3, #32]
 8004020:	4a6e      	ldr	r2, [pc, #440]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004022:	f043 0301 	orr.w	r3, r3, #1
 8004026:	6213      	str	r3, [r2, #32]
 8004028:	e02d      	b.n	8004086 <HAL_RCC_OscConfig+0x36e>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10c      	bne.n	800404c <HAL_RCC_OscConfig+0x334>
 8004032:	4b6a      	ldr	r3, [pc, #424]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	4a69      	ldr	r2, [pc, #420]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004038:	f023 0301 	bic.w	r3, r3, #1
 800403c:	6213      	str	r3, [r2, #32]
 800403e:	4b67      	ldr	r3, [pc, #412]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004040:	6a1b      	ldr	r3, [r3, #32]
 8004042:	4a66      	ldr	r2, [pc, #408]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004044:	f023 0304 	bic.w	r3, r3, #4
 8004048:	6213      	str	r3, [r2, #32]
 800404a:	e01c      	b.n	8004086 <HAL_RCC_OscConfig+0x36e>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	2b05      	cmp	r3, #5
 8004052:	d10c      	bne.n	800406e <HAL_RCC_OscConfig+0x356>
 8004054:	4b61      	ldr	r3, [pc, #388]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a60      	ldr	r2, [pc, #384]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 800405a:	f043 0304 	orr.w	r3, r3, #4
 800405e:	6213      	str	r3, [r2, #32]
 8004060:	4b5e      	ldr	r3, [pc, #376]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004062:	6a1b      	ldr	r3, [r3, #32]
 8004064:	4a5d      	ldr	r2, [pc, #372]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004066:	f043 0301 	orr.w	r3, r3, #1
 800406a:	6213      	str	r3, [r2, #32]
 800406c:	e00b      	b.n	8004086 <HAL_RCC_OscConfig+0x36e>
 800406e:	4b5b      	ldr	r3, [pc, #364]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	4a5a      	ldr	r2, [pc, #360]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004074:	f023 0301 	bic.w	r3, r3, #1
 8004078:	6213      	str	r3, [r2, #32]
 800407a:	4b58      	ldr	r3, [pc, #352]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	4a57      	ldr	r2, [pc, #348]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004080:	f023 0304 	bic.w	r3, r3, #4
 8004084:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d015      	beq.n	80040ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800408e:	f7ff f8c9 	bl	8003224 <HAL_GetTick>
 8004092:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004094:	e00a      	b.n	80040ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004096:	f7ff f8c5 	bl	8003224 <HAL_GetTick>
 800409a:	4602      	mov	r2, r0
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	1ad3      	subs	r3, r2, r3
 80040a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e0b1      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040ac:	4b4b      	ldr	r3, [pc, #300]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 80040ae:	6a1b      	ldr	r3, [r3, #32]
 80040b0:	f003 0302 	and.w	r3, r3, #2
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d0ee      	beq.n	8004096 <HAL_RCC_OscConfig+0x37e>
 80040b8:	e014      	b.n	80040e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ba:	f7ff f8b3 	bl	8003224 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040c0:	e00a      	b.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040c2:	f7ff f8af 	bl	8003224 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e09b      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040d8:	4b40      	ldr	r3, [pc, #256]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 80040da:	6a1b      	ldr	r3, [r3, #32]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d1ee      	bne.n	80040c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80040e4:	7dfb      	ldrb	r3, [r7, #23]
 80040e6:	2b01      	cmp	r3, #1
 80040e8:	d105      	bne.n	80040f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040ea:	4b3c      	ldr	r3, [pc, #240]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 80040ec:	69db      	ldr	r3, [r3, #28]
 80040ee:	4a3b      	ldr	r2, [pc, #236]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 80040f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80040f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	69db      	ldr	r3, [r3, #28]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	f000 8087 	beq.w	800420e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004100:	4b36      	ldr	r3, [pc, #216]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f003 030c 	and.w	r3, r3, #12
 8004108:	2b08      	cmp	r3, #8
 800410a:	d061      	beq.n	80041d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	69db      	ldr	r3, [r3, #28]
 8004110:	2b02      	cmp	r3, #2
 8004112:	d146      	bne.n	80041a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004114:	4b33      	ldr	r3, [pc, #204]	@ (80041e4 <HAL_RCC_OscConfig+0x4cc>)
 8004116:	2200      	movs	r2, #0
 8004118:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800411a:	f7ff f883 	bl	8003224 <HAL_GetTick>
 800411e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004120:	e008      	b.n	8004134 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004122:	f7ff f87f 	bl	8003224 <HAL_GetTick>
 8004126:	4602      	mov	r2, r0
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	1ad3      	subs	r3, r2, r3
 800412c:	2b02      	cmp	r3, #2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e06d      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004134:	4b29      	ldr	r3, [pc, #164]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1f0      	bne.n	8004122 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6a1b      	ldr	r3, [r3, #32]
 8004144:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004148:	d108      	bne.n	800415c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800414a:	4b24      	ldr	r3, [pc, #144]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	4921      	ldr	r1, [pc, #132]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004158:	4313      	orrs	r3, r2
 800415a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800415c:	4b1f      	ldr	r3, [pc, #124]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6a19      	ldr	r1, [r3, #32]
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800416c:	430b      	orrs	r3, r1
 800416e:	491b      	ldr	r1, [pc, #108]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004170:	4313      	orrs	r3, r2
 8004172:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004174:	4b1b      	ldr	r3, [pc, #108]	@ (80041e4 <HAL_RCC_OscConfig+0x4cc>)
 8004176:	2201      	movs	r2, #1
 8004178:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800417a:	f7ff f853 	bl	8003224 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004182:	f7ff f84f 	bl	8003224 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e03d      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004194:	4b11      	ldr	r3, [pc, #68]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d0f0      	beq.n	8004182 <HAL_RCC_OscConfig+0x46a>
 80041a0:	e035      	b.n	800420e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041a2:	4b10      	ldr	r3, [pc, #64]	@ (80041e4 <HAL_RCC_OscConfig+0x4cc>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041a8:	f7ff f83c 	bl	8003224 <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b0:	f7ff f838 	bl	8003224 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e026      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041c2:	4b06      	ldr	r3, [pc, #24]	@ (80041dc <HAL_RCC_OscConfig+0x4c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x498>
 80041ce:	e01e      	b.n	800420e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	2b01      	cmp	r3, #1
 80041d6:	d107      	bne.n	80041e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e019      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
 80041dc:	40021000 	.word	0x40021000
 80041e0:	40007000 	.word	0x40007000
 80041e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041e8:	4b0b      	ldr	r3, [pc, #44]	@ (8004218 <HAL_RCC_OscConfig+0x500>)
 80041ea:	685b      	ldr	r3, [r3, #4]
 80041ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a1b      	ldr	r3, [r3, #32]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d106      	bne.n	800420a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004206:	429a      	cmp	r2, r3
 8004208:	d001      	beq.n	800420e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e000      	b.n	8004210 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800420e:	2300      	movs	r3, #0
}
 8004210:	4618      	mov	r0, r3
 8004212:	3718      	adds	r7, #24
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	40021000 	.word	0x40021000

0800421c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b084      	sub	sp, #16
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d101      	bne.n	8004230 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e0d0      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004230:	4b6a      	ldr	r3, [pc, #424]	@ (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0307 	and.w	r3, r3, #7
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d910      	bls.n	8004260 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423e:	4b67      	ldr	r3, [pc, #412]	@ (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 0207 	bic.w	r2, r3, #7
 8004246:	4965      	ldr	r1, [pc, #404]	@ (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	4313      	orrs	r3, r2
 800424c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800424e:	4b63      	ldr	r3, [pc, #396]	@ (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 0307 	and.w	r3, r3, #7
 8004256:	683a      	ldr	r2, [r7, #0]
 8004258:	429a      	cmp	r2, r3
 800425a:	d001      	beq.n	8004260 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	e0b8      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d020      	beq.n	80042ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004278:	4b59      	ldr	r3, [pc, #356]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	4a58      	ldr	r2, [pc, #352]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800427e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004282:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0308 	and.w	r3, r3, #8
 800428c:	2b00      	cmp	r3, #0
 800428e:	d005      	beq.n	800429c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004290:	4b53      	ldr	r3, [pc, #332]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	4a52      	ldr	r2, [pc, #328]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004296:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800429a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800429c:	4b50      	ldr	r3, [pc, #320]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	494d      	ldr	r1, [pc, #308]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042aa:	4313      	orrs	r3, r2
 80042ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d040      	beq.n	800433c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d107      	bne.n	80042d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042c2:	4b47      	ldr	r3, [pc, #284]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d115      	bne.n	80042fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	e07f      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2b02      	cmp	r3, #2
 80042d8:	d107      	bne.n	80042ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042da:	4b41      	ldr	r3, [pc, #260]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d109      	bne.n	80042fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e073      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042ea:	4b3d      	ldr	r3, [pc, #244]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e06b      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042fa:	4b39      	ldr	r3, [pc, #228]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	f023 0203 	bic.w	r2, r3, #3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	4936      	ldr	r1, [pc, #216]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004308:	4313      	orrs	r3, r2
 800430a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800430c:	f7fe ff8a 	bl	8003224 <HAL_GetTick>
 8004310:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004312:	e00a      	b.n	800432a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004314:	f7fe ff86 	bl	8003224 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004322:	4293      	cmp	r3, r2
 8004324:	d901      	bls.n	800432a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e053      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800432a:	4b2d      	ldr	r3, [pc, #180]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	f003 020c 	and.w	r2, r3, #12
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	009b      	lsls	r3, r3, #2
 8004338:	429a      	cmp	r2, r3
 800433a:	d1eb      	bne.n	8004314 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800433c:	4b27      	ldr	r3, [pc, #156]	@ (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	429a      	cmp	r2, r3
 8004348:	d210      	bcs.n	800436c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800434a:	4b24      	ldr	r3, [pc, #144]	@ (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f023 0207 	bic.w	r2, r3, #7
 8004352:	4922      	ldr	r1, [pc, #136]	@ (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	4313      	orrs	r3, r2
 8004358:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800435a:	4b20      	ldr	r3, [pc, #128]	@ (80043dc <HAL_RCC_ClockConfig+0x1c0>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 0307 	and.w	r3, r3, #7
 8004362:	683a      	ldr	r2, [r7, #0]
 8004364:	429a      	cmp	r2, r3
 8004366:	d001      	beq.n	800436c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e032      	b.n	80043d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0304 	and.w	r3, r3, #4
 8004374:	2b00      	cmp	r3, #0
 8004376:	d008      	beq.n	800438a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004378:	4b19      	ldr	r3, [pc, #100]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 800437a:	685b      	ldr	r3, [r3, #4]
 800437c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	68db      	ldr	r3, [r3, #12]
 8004384:	4916      	ldr	r1, [pc, #88]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d009      	beq.n	80043aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004396:	4b12      	ldr	r3, [pc, #72]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	00db      	lsls	r3, r3, #3
 80043a4:	490e      	ldr	r1, [pc, #56]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043aa:	f000 f821 	bl	80043f0 <HAL_RCC_GetSysClockFreq>
 80043ae:	4602      	mov	r2, r0
 80043b0:	4b0b      	ldr	r3, [pc, #44]	@ (80043e0 <HAL_RCC_ClockConfig+0x1c4>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	091b      	lsrs	r3, r3, #4
 80043b6:	f003 030f 	and.w	r3, r3, #15
 80043ba:	490a      	ldr	r1, [pc, #40]	@ (80043e4 <HAL_RCC_ClockConfig+0x1c8>)
 80043bc:	5ccb      	ldrb	r3, [r1, r3]
 80043be:	fa22 f303 	lsr.w	r3, r2, r3
 80043c2:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <HAL_RCC_ClockConfig+0x1cc>)
 80043c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043c6:	4b09      	ldr	r3, [pc, #36]	@ (80043ec <HAL_RCC_ClockConfig+0x1d0>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4618      	mov	r0, r3
 80043cc:	f7fe fee8 	bl	80031a0 <HAL_InitTick>

  return HAL_OK;
 80043d0:	2300      	movs	r3, #0
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}
 80043da:	bf00      	nop
 80043dc:	40022000 	.word	0x40022000
 80043e0:	40021000 	.word	0x40021000
 80043e4:	0800aea0 	.word	0x0800aea0
 80043e8:	20000000 	.word	0x20000000
 80043ec:	2000002c 	.word	0x2000002c

080043f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80043f6:	2300      	movs	r3, #0
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	2300      	movs	r3, #0
 80043fc:	60bb      	str	r3, [r7, #8]
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
 8004402:	2300      	movs	r3, #0
 8004404:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004406:	2300      	movs	r3, #0
 8004408:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800440a:	4b1e      	ldr	r3, [pc, #120]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x94>)
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 030c 	and.w	r3, r3, #12
 8004416:	2b04      	cmp	r3, #4
 8004418:	d002      	beq.n	8004420 <HAL_RCC_GetSysClockFreq+0x30>
 800441a:	2b08      	cmp	r3, #8
 800441c:	d003      	beq.n	8004426 <HAL_RCC_GetSysClockFreq+0x36>
 800441e:	e027      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004420:	4b19      	ldr	r3, [pc, #100]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x98>)
 8004422:	613b      	str	r3, [r7, #16]
      break;
 8004424:	e027      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	0c9b      	lsrs	r3, r3, #18
 800442a:	f003 030f 	and.w	r3, r3, #15
 800442e:	4a17      	ldr	r2, [pc, #92]	@ (800448c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004430:	5cd3      	ldrb	r3, [r2, r3]
 8004432:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800443e:	4b11      	ldr	r3, [pc, #68]	@ (8004484 <HAL_RCC_GetSysClockFreq+0x94>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	0c5b      	lsrs	r3, r3, #17
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	4a11      	ldr	r2, [pc, #68]	@ (8004490 <HAL_RCC_GetSysClockFreq+0xa0>)
 800444a:	5cd3      	ldrb	r3, [r2, r3]
 800444c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	4a0d      	ldr	r2, [pc, #52]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x98>)
 8004452:	fb03 f202 	mul.w	r2, r3, r2
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	617b      	str	r3, [r7, #20]
 800445e:	e004      	b.n	800446a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004464:	fb02 f303 	mul.w	r3, r2, r3
 8004468:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	613b      	str	r3, [r7, #16]
      break;
 800446e:	e002      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b05      	ldr	r3, [pc, #20]	@ (8004488 <HAL_RCC_GetSysClockFreq+0x98>)
 8004472:	613b      	str	r3, [r7, #16]
      break;
 8004474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004476:	693b      	ldr	r3, [r7, #16]
}
 8004478:	4618      	mov	r0, r3
 800447a:	371c      	adds	r7, #28
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	40021000 	.word	0x40021000
 8004488:	007a1200 	.word	0x007a1200
 800448c:	0800aeb8 	.word	0x0800aeb8
 8004490:	0800aec8 	.word	0x0800aec8
 8004494:	003d0900 	.word	0x003d0900

08004498 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800449c:	4b02      	ldr	r3, [pc, #8]	@ (80044a8 <HAL_RCC_GetHCLKFreq+0x10>)
 800449e:	681b      	ldr	r3, [r3, #0]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr
 80044a8:	20000000 	.word	0x20000000

080044ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80044b0:	f7ff fff2 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044b4:	4602      	mov	r2, r0
 80044b6:	4b05      	ldr	r3, [pc, #20]	@ (80044cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	0a1b      	lsrs	r3, r3, #8
 80044bc:	f003 0307 	and.w	r3, r3, #7
 80044c0:	4903      	ldr	r1, [pc, #12]	@ (80044d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044c2:	5ccb      	ldrb	r3, [r1, r3]
 80044c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40021000 	.word	0x40021000
 80044d0:	0800aeb0 	.word	0x0800aeb0

080044d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80044d8:	f7ff ffde 	bl	8004498 <HAL_RCC_GetHCLKFreq>
 80044dc:	4602      	mov	r2, r0
 80044de:	4b05      	ldr	r3, [pc, #20]	@ (80044f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	0adb      	lsrs	r3, r3, #11
 80044e4:	f003 0307 	and.w	r3, r3, #7
 80044e8:	4903      	ldr	r1, [pc, #12]	@ (80044f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ea:	5ccb      	ldrb	r3, [r1, r3]
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	0800aeb0 	.word	0x0800aeb0

080044fc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80044fc:	b480      	push	{r7}
 80044fe:	b085      	sub	sp, #20
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004504:	4b0a      	ldr	r3, [pc, #40]	@ (8004530 <RCC_Delay+0x34>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a0a      	ldr	r2, [pc, #40]	@ (8004534 <RCC_Delay+0x38>)
 800450a:	fba2 2303 	umull	r2, r3, r2, r3
 800450e:	0a5b      	lsrs	r3, r3, #9
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	fb02 f303 	mul.w	r3, r2, r3
 8004516:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004518:	bf00      	nop
  }
  while (Delay --);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	1e5a      	subs	r2, r3, #1
 800451e:	60fa      	str	r2, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d1f9      	bne.n	8004518 <RCC_Delay+0x1c>
}
 8004524:	bf00      	nop
 8004526:	bf00      	nop
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr
 8004530:	20000000 	.word	0x20000000
 8004534:	10624dd3 	.word	0x10624dd3

08004538 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d101      	bne.n	800454a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e042      	b.n	80045d0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004550:	b2db      	uxtb	r3, r3
 8004552:	2b00      	cmp	r3, #0
 8004554:	d106      	bne.n	8004564 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f7fd f82a 	bl	80015b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2224      	movs	r2, #36	@ 0x24
 8004568:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800457a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f001 f84d 	bl	800561c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004590:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	695a      	ldr	r2, [r3, #20]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68da      	ldr	r2, [r3, #12]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80045b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2220      	movs	r2, #32
 80045c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b08a      	sub	sp, #40	@ 0x28
 80045dc:	af02      	add	r7, sp, #8
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	603b      	str	r3, [r7, #0]
 80045e4:	4613      	mov	r3, r2
 80045e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80045e8:	2300      	movs	r3, #0
 80045ea:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80045f2:	b2db      	uxtb	r3, r3
 80045f4:	2b20      	cmp	r3, #32
 80045f6:	d175      	bne.n	80046e4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_UART_Transmit+0x2c>
 80045fe:	88fb      	ldrh	r3, [r7, #6]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d101      	bne.n	8004608 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e06e      	b.n	80046e6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2221      	movs	r2, #33	@ 0x21
 8004612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004616:	f7fe fe05 	bl	8003224 <HAL_GetTick>
 800461a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	88fa      	ldrh	r2, [r7, #6]
 8004620:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	88fa      	ldrh	r2, [r7, #6]
 8004626:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004630:	d108      	bne.n	8004644 <HAL_UART_Transmit+0x6c>
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	691b      	ldr	r3, [r3, #16]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d104      	bne.n	8004644 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800463a:	2300      	movs	r3, #0
 800463c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	61bb      	str	r3, [r7, #24]
 8004642:	e003      	b.n	800464c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004648:	2300      	movs	r3, #0
 800464a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800464c:	e02e      	b.n	80046ac <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	9300      	str	r3, [sp, #0]
 8004652:	697b      	ldr	r3, [r7, #20]
 8004654:	2200      	movs	r2, #0
 8004656:	2180      	movs	r1, #128	@ 0x80
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fcf0 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d005      	beq.n	8004670 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2220      	movs	r2, #32
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e03a      	b.n	80046e6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004670:	69fb      	ldr	r3, [r7, #28]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d10b      	bne.n	800468e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	881b      	ldrh	r3, [r3, #0]
 800467a:	461a      	mov	r2, r3
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004684:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	3302      	adds	r3, #2
 800468a:	61bb      	str	r3, [r7, #24]
 800468c:	e007      	b.n	800469e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3301      	adds	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	3b01      	subs	r3, #1
 80046a6:	b29a      	uxth	r2, r3
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046b0:	b29b      	uxth	r3, r3
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d1cb      	bne.n	800464e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	9300      	str	r3, [sp, #0]
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	2200      	movs	r2, #0
 80046be:	2140      	movs	r1, #64	@ 0x40
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 fcbc 	bl	800503e <UART_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e006      	b.n	80046e6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80046e0:	2300      	movs	r3, #0
 80046e2:	e000      	b.n	80046e6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80046e4:	2302      	movs	r3, #2
  }
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3720      	adds	r7, #32
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}

080046ee <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80046ee:	b580      	push	{r7, lr}
 80046f0:	b084      	sub	sp, #16
 80046f2:	af00      	add	r7, sp, #0
 80046f4:	60f8      	str	r0, [r7, #12]
 80046f6:	60b9      	str	r1, [r7, #8]
 80046f8:	4613      	mov	r3, r2
 80046fa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b20      	cmp	r3, #32
 8004706:	d112      	bne.n	800472e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d002      	beq.n	8004714 <HAL_UART_Receive_IT+0x26>
 800470e:	88fb      	ldrh	r3, [r7, #6]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e00b      	b.n	8004730 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800471e:	88fb      	ldrh	r3, [r7, #6]
 8004720:	461a      	mov	r2, r3
 8004722:	68b9      	ldr	r1, [r7, #8]
 8004724:	68f8      	ldr	r0, [r7, #12]
 8004726:	f000 fce3 	bl	80050f0 <UART_Start_Receive_IT>
 800472a:	4603      	mov	r3, r0
 800472c:	e000      	b.n	8004730 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800472e:	2302      	movs	r3, #2
  }
}
 8004730:	4618      	mov	r0, r3
 8004732:	3710      	adds	r7, #16
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b090      	sub	sp, #64	@ 0x40
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004740:	2300      	movs	r3, #0
 8004742:	63fb      	str	r3, [r7, #60]	@ 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	695b      	ldr	r3, [r3, #20]
 800474a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800474e:	2b00      	cmp	r3, #0
 8004750:	bf14      	ite	ne
 8004752:	2301      	movne	r3, #1
 8004754:	2300      	moveq	r3, #0
 8004756:	b2db      	uxtb	r3, r3
 8004758:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b21      	cmp	r3, #33	@ 0x21
 8004764:	d128      	bne.n	80047b8 <HAL_UART_DMAStop+0x80>
 8004766:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004768:	2b00      	cmp	r3, #0
 800476a:	d025      	beq.n	80047b8 <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3314      	adds	r3, #20
 8004772:	627b      	str	r3, [r7, #36]	@ 0x24
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004776:	e853 3f00 	ldrex	r3, [r3]
 800477a:	623b      	str	r3, [r7, #32]
   return(result);
 800477c:	6a3b      	ldr	r3, [r7, #32]
 800477e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004782:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3314      	adds	r3, #20
 800478a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800478c:	633a      	str	r2, [r7, #48]	@ 0x30
 800478e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004790:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004792:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004794:	e841 2300 	strex	r3, r2, [r1]
 8004798:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800479a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479c:	2b00      	cmp	r3, #0
 800479e:	d1e5      	bne.n	800476c <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d004      	beq.n	80047b2 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7fe ff2f 	bl	8003610 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fd70 	bl	8005298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695b      	ldr	r3, [r3, #20]
 80047be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	bf14      	ite	ne
 80047c6:	2301      	movne	r3, #1
 80047c8:	2300      	moveq	r3, #0
 80047ca:	b2db      	uxtb	r3, r3
 80047cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047d4:	b2db      	uxtb	r3, r3
 80047d6:	2b22      	cmp	r3, #34	@ 0x22
 80047d8:	d128      	bne.n	800482c <HAL_UART_DMAStop+0xf4>
 80047da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d025      	beq.n	800482c <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	3314      	adds	r3, #20
 80047e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	e853 3f00 	ldrex	r3, [r3]
 80047ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80047f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3314      	adds	r3, #20
 80047fe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004800:	61fa      	str	r2, [r7, #28]
 8004802:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	69fa      	ldr	r2, [r7, #28]
 8004808:	e841 2300 	strex	r3, r2, [r1]
 800480c:	617b      	str	r3, [r7, #20]
   return(result);
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d1e5      	bne.n	80047e0 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004818:	2b00      	cmp	r3, #0
 800481a:	d004      	beq.n	8004826 <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fef5 	bl	8003610 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fd5d 	bl	80052e6 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3740      	adds	r7, #64	@ 0x40
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}

08004836 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b08c      	sub	sp, #48	@ 0x30
 800483a:	af00      	add	r7, sp, #0
 800483c:	60f8      	str	r0, [r7, #12]
 800483e:	60b9      	str	r1, [r7, #8]
 8004840:	4613      	mov	r3, r2
 8004842:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b20      	cmp	r3, #32
 800484e:	d146      	bne.n	80048de <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d002      	beq.n	800485c <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004856:	88fb      	ldrh	r3, [r7, #6]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e03f      	b.n	80048e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2201      	movs	r2, #1
 8004864:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2200      	movs	r2, #0
 800486a:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800486c:	88fb      	ldrh	r3, [r7, #6]
 800486e:	461a      	mov	r2, r3
 8004870:	68b9      	ldr	r1, [r7, #8]
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f000 fc76 	bl	8005164 <UART_Start_Receive_DMA>
 8004878:	4603      	mov	r3, r0
 800487a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004882:	2b01      	cmp	r3, #1
 8004884:	d125      	bne.n	80048d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004886:	2300      	movs	r3, #0
 8004888:	613b      	str	r3, [r7, #16]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	613b      	str	r3, [r7, #16]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	613b      	str	r3, [r7, #16]
 800489a:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a4:	69bb      	ldr	r3, [r7, #24]
 80048a6:	e853 3f00 	ldrex	r3, [r3]
 80048aa:	617b      	str	r3, [r7, #20]
   return(result);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	f043 0310 	orr.w	r3, r3, #16
 80048b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	330c      	adds	r3, #12
 80048ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80048bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80048be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c0:	6a39      	ldr	r1, [r7, #32]
 80048c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c4:	e841 2300 	strex	r3, r2, [r1]
 80048c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80048ca:	69fb      	ldr	r3, [r7, #28]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1e5      	bne.n	800489c <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80048d0:	e002      	b.n	80048d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80048d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80048dc:	e000      	b.n	80048e0 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80048de:	2302      	movs	r3, #2
  }
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3730      	adds	r7, #48	@ 0x30
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b0ba      	sub	sp, #232	@ 0xe8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800490e:	2300      	movs	r3, #0
 8004910:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004914:	2300      	movs	r3, #0
 8004916:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800491a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004926:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10f      	bne.n	800494e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800492e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004932:	f003 0320 	and.w	r3, r3, #32
 8004936:	2b00      	cmp	r3, #0
 8004938:	d009      	beq.n	800494e <HAL_UART_IRQHandler+0x66>
 800493a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800493e:	f003 0320 	and.w	r3, r3, #32
 8004942:	2b00      	cmp	r3, #0
 8004944:	d003      	beq.n	800494e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 fdaa 	bl	80054a0 <UART_Receive_IT>
      return;
 800494c:	e25b      	b.n	8004e06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800494e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80de 	beq.w	8004b14 <HAL_UART_IRQHandler+0x22c>
 8004958:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800495c:	f003 0301 	and.w	r3, r3, #1
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004964:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004968:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800496c:	2b00      	cmp	r3, #0
 800496e:	f000 80d1 	beq.w	8004b14 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004972:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00b      	beq.n	8004996 <HAL_UART_IRQHandler+0xae>
 800497e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004982:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004986:	2b00      	cmp	r3, #0
 8004988:	d005      	beq.n	8004996 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800498e:	f043 0201 	orr.w	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004996:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800499a:	f003 0304 	and.w	r3, r3, #4
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d00b      	beq.n	80049ba <HAL_UART_IRQHandler+0xd2>
 80049a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049b2:	f043 0202 	orr.w	r2, r3, #2
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00b      	beq.n	80049de <HAL_UART_IRQHandler+0xf6>
 80049c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d005      	beq.n	80049de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d011      	beq.n	8004a0e <HAL_UART_IRQHandler+0x126>
 80049ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049ee:	f003 0320 	and.w	r3, r3, #32
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d105      	bne.n	8004a02 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80049f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049fa:	f003 0301 	and.w	r3, r3, #1
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d005      	beq.n	8004a0e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a06:	f043 0208 	orr.w	r2, r3, #8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	f000 81f2 	beq.w	8004dfc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a1c:	f003 0320 	and.w	r3, r3, #32
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d008      	beq.n	8004a36 <HAL_UART_IRQHandler+0x14e>
 8004a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a28:	f003 0320 	and.w	r3, r3, #32
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d002      	beq.n	8004a36 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fd35 	bl	80054a0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	695b      	ldr	r3, [r3, #20]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	bf14      	ite	ne
 8004a44:	2301      	movne	r3, #1
 8004a46:	2300      	moveq	r3, #0
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a52:	f003 0308 	and.w	r3, r3, #8
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <HAL_UART_IRQHandler+0x17a>
 8004a5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d04f      	beq.n	8004b02 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 fc3f 	bl	80052e6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	695b      	ldr	r3, [r3, #20]
 8004a6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d041      	beq.n	8004afa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	3314      	adds	r3, #20
 8004a7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a80:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004a84:	e853 3f00 	ldrex	r3, [r3]
 8004a88:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004a8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004a90:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004a94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004aa2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004aa6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004aae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004ab2:	e841 2300 	strex	r3, r2, [r1]
 8004ab6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004aba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d1d9      	bne.n	8004a76 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d013      	beq.n	8004af2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ace:	4a7e      	ldr	r2, [pc, #504]	@ (8004cc8 <HAL_UART_IRQHandler+0x3e0>)
 8004ad0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fdd6 	bl	8003688 <HAL_DMA_Abort_IT>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d016      	beq.n	8004b10 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004aec:	4610      	mov	r0, r2
 8004aee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af0:	e00e      	b.n	8004b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f000 f99c 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004af8:	e00a      	b.n	8004b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f998 	bl	8004e30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	e006      	b.n	8004b10 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f994 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004b0e:	e175      	b.n	8004dfc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	bf00      	nop
    return;
 8004b12:	e173      	b.n	8004dfc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	f040 814f 	bne.w	8004dbc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b22:	f003 0310 	and.w	r3, r3, #16
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	f000 8148 	beq.w	8004dbc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b30:	f003 0310 	and.w	r3, r3, #16
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	f000 8141 	beq.w	8004dbc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	60bb      	str	r3, [r7, #8]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	60bb      	str	r3, [r7, #8]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80b6 	beq.w	8004ccc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b6c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	f000 8145 	beq.w	8004e00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	f080 813e 	bcs.w	8004e00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b8a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b20      	cmp	r3, #32
 8004b94:	f000 8088 	beq.w	8004ca8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	330c      	adds	r3, #12
 8004b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004bae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004bb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004bb6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	330c      	adds	r3, #12
 8004bc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004bc4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bc8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bcc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004bd0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004bd4:	e841 2300 	strex	r3, r2, [r1]
 8004bd8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d1d9      	bne.n	8004b98 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3314      	adds	r3, #20
 8004bea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004bee:	e853 3f00 	ldrex	r3, [r3]
 8004bf2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004bf4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004bf6:	f023 0301 	bic.w	r3, r3, #1
 8004bfa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	3314      	adds	r3, #20
 8004c04:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004c08:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004c0c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004c10:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004c14:	e841 2300 	strex	r3, r2, [r1]
 8004c18:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004c1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d1e1      	bne.n	8004be4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3314      	adds	r3, #20
 8004c26:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004c2a:	e853 3f00 	ldrex	r3, [r3]
 8004c2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004c30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004c32:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	3314      	adds	r3, #20
 8004c40:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c44:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004c46:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c48:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004c4a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004c4c:	e841 2300 	strex	r3, r2, [r1]
 8004c50:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004c52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d1e3      	bne.n	8004c20 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2220      	movs	r2, #32
 8004c5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	330c      	adds	r3, #12
 8004c6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c70:	e853 3f00 	ldrex	r3, [r3]
 8004c74:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004c76:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004c78:	f023 0310 	bic.w	r3, r3, #16
 8004c7c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	330c      	adds	r3, #12
 8004c86:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004c8a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004c8c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c8e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004c90:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004c92:	e841 2300 	strex	r3, r2, [r1]
 8004c96:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004c98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1e3      	bne.n	8004c66 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fcb4 	bl	8003610 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2202      	movs	r2, #2
 8004cac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cb6:	b29b      	uxth	r3, r3
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	b29b      	uxth	r3, r3
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fc fa94 	bl	80011ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cc4:	e09c      	b.n	8004e00 <HAL_UART_IRQHandler+0x518>
 8004cc6:	bf00      	nop
 8004cc8:	080053ab 	.word	0x080053ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004cd4:	b29b      	uxth	r3, r3
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	f000 808e 	beq.w	8004e04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ce8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8089 	beq.w	8004e04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cfc:	e853 3f00 	ldrex	r3, [r3]
 8004d00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004d02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d04:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d08:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	330c      	adds	r3, #12
 8004d12:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004d16:	647a      	str	r2, [r7, #68]	@ 0x44
 8004d18:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004d1c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004d1e:	e841 2300 	strex	r3, r2, [r1]
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004d24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1e3      	bne.n	8004cf2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	3314      	adds	r3, #20
 8004d30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d34:	e853 3f00 	ldrex	r3, [r3]
 8004d38:	623b      	str	r3, [r7, #32]
   return(result);
 8004d3a:	6a3b      	ldr	r3, [r7, #32]
 8004d3c:	f023 0301 	bic.w	r3, r3, #1
 8004d40:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004d4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d56:	e841 2300 	strex	r3, r2, [r1]
 8004d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1e3      	bne.n	8004d2a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	330c      	adds	r3, #12
 8004d76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	e853 3f00 	ldrex	r3, [r3]
 8004d7e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0310 	bic.w	r3, r3, #16
 8004d86:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	330c      	adds	r3, #12
 8004d90:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004d94:	61fa      	str	r2, [r7, #28]
 8004d96:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d98:	69b9      	ldr	r1, [r7, #24]
 8004d9a:	69fa      	ldr	r2, [r7, #28]
 8004d9c:	e841 2300 	strex	r3, r2, [r1]
 8004da0:	617b      	str	r3, [r7, #20]
   return(result);
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1e3      	bne.n	8004d70 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004db2:	4619      	mov	r1, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7fc fa19 	bl	80011ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dba:	e023      	b.n	8004e04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d009      	beq.n	8004ddc <HAL_UART_IRQHandler+0x4f4>
 8004dc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fafc 	bl	80053d2 <UART_Transmit_IT>
    return;
 8004dda:	e014      	b.n	8004e06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004ddc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00e      	beq.n	8004e06 <HAL_UART_IRQHandler+0x51e>
 8004de8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d008      	beq.n	8004e06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 fb3b 	bl	8005470 <UART_EndTransmit_IT>
    return;
 8004dfa:	e004      	b.n	8004e06 <HAL_UART_IRQHandler+0x51e>
    return;
 8004dfc:	bf00      	nop
 8004dfe:	e002      	b.n	8004e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e00:	bf00      	nop
 8004e02:	e000      	b.n	8004e06 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e04:	bf00      	nop
  }
}
 8004e06:	37e8      	adds	r7, #232	@ 0xe8
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bc80      	pop	{r7}
 8004e1c:	4770      	bx	lr

08004e1e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bc80      	pop	{r7}
 8004e2e:	4770      	bx	lr

08004e30 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b083      	sub	sp, #12
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e38:	bf00      	nop
 8004e3a:	370c      	adds	r7, #12
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bc80      	pop	{r7}
 8004e40:	4770      	bx	lr

08004e42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b09c      	sub	sp, #112	@ 0x70
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0320 	and.w	r3, r3, #32
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d172      	bne.n	8004f44 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e60:	2200      	movs	r2, #0
 8004e62:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	330c      	adds	r3, #12
 8004e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e6e:	e853 3f00 	ldrex	r3, [r3]
 8004e72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	330c      	adds	r3, #12
 8004e82:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004e84:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e86:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e8c:	e841 2300 	strex	r3, r2, [r1]
 8004e90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e5      	bne.n	8004e64 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	3314      	adds	r3, #20
 8004e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	e853 3f00 	ldrex	r3, [r3]
 8004ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eaa:	f023 0301 	bic.w	r3, r3, #1
 8004eae:	667b      	str	r3, [r7, #100]	@ 0x64
 8004eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3314      	adds	r3, #20
 8004eb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004eb8:	647a      	str	r2, [r7, #68]	@ 0x44
 8004eba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ec0:	e841 2300 	strex	r3, r2, [r1]
 8004ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d1e5      	bne.n	8004e98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	3314      	adds	r3, #20
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	623b      	str	r3, [r7, #32]
   return(result);
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ee2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	3314      	adds	r3, #20
 8004eea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004eec:	633a      	str	r2, [r7, #48]	@ 0x30
 8004eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e5      	bne.n	8004ecc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f02:	2220      	movs	r2, #32
 8004f04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d119      	bne.n	8004f44 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	330c      	adds	r3, #12
 8004f16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	e853 3f00 	ldrex	r3, [r3]
 8004f1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0310 	bic.w	r3, r3, #16
 8004f26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	330c      	adds	r3, #12
 8004f2e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004f30:	61fa      	str	r2, [r7, #28]
 8004f32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f34:	69b9      	ldr	r1, [r7, #24]
 8004f36:	69fa      	ldr	r2, [r7, #28]
 8004f38:	e841 2300 	strex	r3, r2, [r1]
 8004f3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d1e5      	bne.n	8004f10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f46:	2200      	movs	r2, #0
 8004f48:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d106      	bne.n	8004f60 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004f54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f56:	4619      	mov	r1, r3
 8004f58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f5a:	f7fc f947 	bl	80011ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f5e:	e002      	b.n	8004f66 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004f60:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004f62:	f7fc f931 	bl	80011c8 <HAL_UART_RxCpltCallback>
}
 8004f66:	bf00      	nop
 8004f68:	3770      	adds	r7, #112	@ 0x70
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}

08004f6e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f6e:	b580      	push	{r7, lr}
 8004f70:	b084      	sub	sp, #16
 8004f72:	af00      	add	r7, sp, #0
 8004f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f86:	2b01      	cmp	r3, #1
 8004f88:	d108      	bne.n	8004f9c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	b29b      	uxth	r3, r3
 8004f92:	4619      	mov	r1, r3
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f7fc f929 	bl	80011ec <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004f9a:	e002      	b.n	8004fa2 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004f9c:	68f8      	ldr	r0, [r7, #12]
 8004f9e:	f7ff ff3e 	bl	8004e1e <HAL_UART_RxHalfCpltCallback>
}
 8004fa2:	bf00      	nop
 8004fa4:	3710      	adds	r7, #16
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b084      	sub	sp, #16
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fba:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695b      	ldr	r3, [r3, #20]
 8004fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	bf14      	ite	ne
 8004fca:	2301      	movne	r3, #1
 8004fcc:	2300      	moveq	r3, #0
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2b21      	cmp	r3, #33	@ 0x21
 8004fdc:	d108      	bne.n	8004ff0 <UART_DMAError+0x46>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004fea:	68b8      	ldr	r0, [r7, #8]
 8004fec:	f000 f954 	bl	8005298 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	695b      	ldr	r3, [r3, #20]
 8004ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	bf14      	ite	ne
 8004ffe:	2301      	movne	r3, #1
 8005000:	2300      	moveq	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b22      	cmp	r3, #34	@ 0x22
 8005010:	d108      	bne.n	8005024 <UART_DMAError+0x7a>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005018:	68bb      	ldr	r3, [r7, #8]
 800501a:	2200      	movs	r2, #0
 800501c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800501e:	68b8      	ldr	r0, [r7, #8]
 8005020:	f000 f961 	bl	80052e6 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005028:	f043 0210 	orr.w	r2, r3, #16
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005030:	68b8      	ldr	r0, [r7, #8]
 8005032:	f7ff fefd 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005036:	bf00      	nop
 8005038:	3710      	adds	r7, #16
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800503e:	b580      	push	{r7, lr}
 8005040:	b086      	sub	sp, #24
 8005042:	af00      	add	r7, sp, #0
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800504e:	e03b      	b.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005050:	6a3b      	ldr	r3, [r7, #32]
 8005052:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005056:	d037      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005058:	f7fe f8e4 	bl	8003224 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	6a3a      	ldr	r2, [r7, #32]
 8005064:	429a      	cmp	r2, r3
 8005066:	d302      	bcc.n	800506e <UART_WaitOnFlagUntilTimeout+0x30>
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e03a      	b.n	80050e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	f003 0304 	and.w	r3, r3, #4
 800507c:	2b00      	cmp	r3, #0
 800507e:	d023      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	2b80      	cmp	r3, #128	@ 0x80
 8005084:	d020      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	2b40      	cmp	r3, #64	@ 0x40
 800508a:	d01d      	beq.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0308 	and.w	r3, r3, #8
 8005096:	2b08      	cmp	r3, #8
 8005098:	d116      	bne.n	80050c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	617b      	str	r3, [r7, #20]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	617b      	str	r3, [r7, #20]
 80050ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 f918 	bl	80052e6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2208      	movs	r2, #8
 80050ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	2200      	movs	r2, #0
 80050c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e00f      	b.n	80050e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	681a      	ldr	r2, [r3, #0]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	68ba      	ldr	r2, [r7, #8]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	bf0c      	ite	eq
 80050d8:	2301      	moveq	r3, #1
 80050da:	2300      	movne	r3, #0
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	461a      	mov	r2, r3
 80050e0:	79fb      	ldrb	r3, [r7, #7]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d0b4      	beq.n	8005050 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3718      	adds	r7, #24
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	68ba      	ldr	r2, [r7, #8]
 8005102:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	88fa      	ldrh	r2, [r7, #6]
 8005108:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	88fa      	ldrh	r2, [r7, #6]
 800510e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2222      	movs	r2, #34	@ 0x22
 800511a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d007      	beq.n	8005136 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005134:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	695a      	ldr	r2, [r3, #20]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f042 0220 	orr.w	r2, r2, #32
 8005154:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005156:	2300      	movs	r3, #0
}
 8005158:	4618      	mov	r0, r3
 800515a:	3714      	adds	r7, #20
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr
	...

08005164 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b098      	sub	sp, #96	@ 0x60
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	4613      	mov	r3, r2
 8005170:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8005172:	68ba      	ldr	r2, [r7, #8]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	88fa      	ldrh	r2, [r7, #6]
 800517c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2200      	movs	r2, #0
 8005182:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2222      	movs	r2, #34	@ 0x22
 8005188:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005190:	4a3e      	ldr	r2, [pc, #248]	@ (800528c <UART_Start_Receive_DMA+0x128>)
 8005192:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005198:	4a3d      	ldr	r2, [pc, #244]	@ (8005290 <UART_Start_Receive_DMA+0x12c>)
 800519a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a0:	4a3c      	ldr	r2, [pc, #240]	@ (8005294 <UART_Start_Receive_DMA+0x130>)
 80051a2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a8:	2200      	movs	r2, #0
 80051aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80051ac:	f107 0308 	add.w	r3, r7, #8
 80051b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	3304      	adds	r3, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80051c0:	681a      	ldr	r2, [r3, #0]
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	f7fe f9c4 	bl	8003550 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	613b      	str	r3, [r7, #16]
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	613b      	str	r3, [r7, #16]
 80051dc:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d019      	beq.n	800521a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	330c      	adds	r3, #12
 80051ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80051f0:	e853 3f00 	ldrex	r3, [r3]
 80051f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80051f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051fc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	330c      	adds	r3, #12
 8005204:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005206:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8005208:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800520a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800520c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800520e:	e841 2300 	strex	r3, r2, [r1]
 8005212:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005214:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1e5      	bne.n	80051e6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	3314      	adds	r3, #20
 8005220:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005224:	e853 3f00 	ldrex	r3, [r3]
 8005228:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800522a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800522c:	f043 0301 	orr.w	r3, r3, #1
 8005230:	657b      	str	r3, [r7, #84]	@ 0x54
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	3314      	adds	r3, #20
 8005238:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800523a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800523c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800523e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005240:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005242:	e841 2300 	strex	r3, r2, [r1]
 8005246:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800524a:	2b00      	cmp	r3, #0
 800524c:	d1e5      	bne.n	800521a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	3314      	adds	r3, #20
 8005254:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	e853 3f00 	ldrex	r3, [r3]
 800525c:	617b      	str	r3, [r7, #20]
   return(result);
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005264:	653b      	str	r3, [r7, #80]	@ 0x50
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	3314      	adds	r3, #20
 800526c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800526e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005270:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005272:	6a39      	ldr	r1, [r7, #32]
 8005274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005276:	e841 2300 	strex	r3, r2, [r1]
 800527a:	61fb      	str	r3, [r7, #28]
   return(result);
 800527c:	69fb      	ldr	r3, [r7, #28]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1e5      	bne.n	800524e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3760      	adds	r7, #96	@ 0x60
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	08004e43 	.word	0x08004e43
 8005290:	08004f6f 	.word	0x08004f6f
 8005294:	08004fab 	.word	0x08004fab

08005298 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005298:	b480      	push	{r7}
 800529a:	b089      	sub	sp, #36	@ 0x24
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	330c      	adds	r3, #12
 80052a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	e853 3f00 	ldrex	r3, [r3]
 80052ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80052b6:	61fb      	str	r3, [r7, #28]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	330c      	adds	r3, #12
 80052be:	69fa      	ldr	r2, [r7, #28]
 80052c0:	61ba      	str	r2, [r7, #24]
 80052c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052c4:	6979      	ldr	r1, [r7, #20]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	e841 2300 	strex	r3, r2, [r1]
 80052cc:	613b      	str	r3, [r7, #16]
   return(result);
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d1e5      	bne.n	80052a0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80052dc:	bf00      	nop
 80052de:	3724      	adds	r7, #36	@ 0x24
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bc80      	pop	{r7}
 80052e4:	4770      	bx	lr

080052e6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052e6:	b480      	push	{r7}
 80052e8:	b095      	sub	sp, #84	@ 0x54
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	330c      	adds	r3, #12
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f8:	e853 3f00 	ldrex	r3, [r3]
 80052fc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005304:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	330c      	adds	r3, #12
 800530c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800530e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005310:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005312:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005314:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005316:	e841 2300 	strex	r3, r2, [r1]
 800531a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800531c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800531e:	2b00      	cmp	r3, #0
 8005320:	d1e5      	bne.n	80052ee <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	3314      	adds	r3, #20
 8005328:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	e853 3f00 	ldrex	r3, [r3]
 8005330:	61fb      	str	r3, [r7, #28]
   return(result);
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	f023 0301 	bic.w	r3, r3, #1
 8005338:	64bb      	str	r3, [r7, #72]	@ 0x48
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3314      	adds	r3, #20
 8005340:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005342:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005344:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005346:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005348:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1e5      	bne.n	8005322 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535a:	2b01      	cmp	r3, #1
 800535c:	d119      	bne.n	8005392 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	330c      	adds	r3, #12
 8005364:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	e853 3f00 	ldrex	r3, [r3]
 800536c:	60bb      	str	r3, [r7, #8]
   return(result);
 800536e:	68bb      	ldr	r3, [r7, #8]
 8005370:	f023 0310 	bic.w	r3, r3, #16
 8005374:	647b      	str	r3, [r7, #68]	@ 0x44
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	330c      	adds	r3, #12
 800537c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800537e:	61ba      	str	r2, [r7, #24]
 8005380:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005382:	6979      	ldr	r1, [r7, #20]
 8005384:	69ba      	ldr	r2, [r7, #24]
 8005386:	e841 2300 	strex	r3, r2, [r1]
 800538a:	613b      	str	r3, [r7, #16]
   return(result);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d1e5      	bne.n	800535e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053a0:	bf00      	nop
 80053a2:	3754      	adds	r7, #84	@ 0x54
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b084      	sub	sp, #16
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	2200      	movs	r2, #0
 80053bc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	2200      	movs	r2, #0
 80053c2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053c4:	68f8      	ldr	r0, [r7, #12]
 80053c6:	f7ff fd33 	bl	8004e30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053ca:	bf00      	nop
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053d2:	b480      	push	{r7}
 80053d4:	b085      	sub	sp, #20
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b21      	cmp	r3, #33	@ 0x21
 80053e4:	d13e      	bne.n	8005464 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	689b      	ldr	r3, [r3, #8]
 80053ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ee:	d114      	bne.n	800541a <UART_Transmit_IT+0x48>
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	691b      	ldr	r3, [r3, #16]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d110      	bne.n	800541a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a1b      	ldr	r3, [r3, #32]
 80053fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	881b      	ldrh	r3, [r3, #0]
 8005402:	461a      	mov	r2, r3
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800540c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6a1b      	ldr	r3, [r3, #32]
 8005412:	1c9a      	adds	r2, r3, #2
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]
 8005418:	e008      	b.n	800542c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6a1b      	ldr	r3, [r3, #32]
 800541e:	1c59      	adds	r1, r3, #1
 8005420:	687a      	ldr	r2, [r7, #4]
 8005422:	6211      	str	r1, [r2, #32]
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29b      	uxth	r3, r3
 8005436:	687a      	ldr	r2, [r7, #4]
 8005438:	4619      	mov	r1, r3
 800543a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10f      	bne.n	8005460 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800544e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800545e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005460:	2300      	movs	r3, #0
 8005462:	e000      	b.n	8005466 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005464:	2302      	movs	r3, #2
  }
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68da      	ldr	r2, [r3, #12]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005486:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2220      	movs	r2, #32
 800548c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005490:	6878      	ldr	r0, [r7, #4]
 8005492:	f7ff fcbb 	bl	8004e0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005496:	2300      	movs	r3, #0
}
 8005498:	4618      	mov	r0, r3
 800549a:	3708      	adds	r7, #8
 800549c:	46bd      	mov	sp, r7
 800549e:	bd80      	pop	{r7, pc}

080054a0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b08c      	sub	sp, #48	@ 0x30
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054ae:	b2db      	uxtb	r3, r3
 80054b0:	2b22      	cmp	r3, #34	@ 0x22
 80054b2:	f040 80ae 	bne.w	8005612 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054be:	d117      	bne.n	80054f0 <UART_Receive_IT+0x50>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	691b      	ldr	r3, [r3, #16]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d113      	bne.n	80054f0 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054c8:	2300      	movs	r3, #0
 80054ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054d0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	b29b      	uxth	r3, r3
 80054da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054de:	b29a      	uxth	r2, r3
 80054e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054e2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e8:	1c9a      	adds	r2, r3, #2
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80054ee:	e026      	b.n	800553e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80054f6:	2300      	movs	r3, #0
 80054f8:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005502:	d007      	beq.n	8005514 <UART_Receive_IT+0x74>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <UART_Receive_IT+0x82>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d106      	bne.n	8005522 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	b2da      	uxtb	r2, r3
 800551c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800551e:	701a      	strb	r2, [r3, #0]
 8005520:	e008      	b.n	8005534 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	b2db      	uxtb	r3, r3
 800552a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800552e:	b2da      	uxtb	r2, r3
 8005530:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005532:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	1c5a      	adds	r2, r3, #1
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005542:	b29b      	uxth	r3, r3
 8005544:	3b01      	subs	r3, #1
 8005546:	b29b      	uxth	r3, r3
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	4619      	mov	r1, r3
 800554c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800554e:	2b00      	cmp	r3, #0
 8005550:	d15d      	bne.n	800560e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f022 0220 	bic.w	r2, r2, #32
 8005560:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005570:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2220      	movs	r2, #32
 8005586:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005594:	2b01      	cmp	r3, #1
 8005596:	d135      	bne.n	8005604 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	330c      	adds	r3, #12
 80055a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	e853 3f00 	ldrex	r3, [r3]
 80055ac:	613b      	str	r3, [r7, #16]
   return(result);
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	f023 0310 	bic.w	r3, r3, #16
 80055b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	330c      	adds	r3, #12
 80055bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055be:	623a      	str	r2, [r7, #32]
 80055c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055c2:	69f9      	ldr	r1, [r7, #28]
 80055c4:	6a3a      	ldr	r2, [r7, #32]
 80055c6:	e841 2300 	strex	r3, r2, [r1]
 80055ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80055cc:	69bb      	ldr	r3, [r7, #24]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d1e5      	bne.n	800559e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f003 0310 	and.w	r3, r3, #16
 80055dc:	2b10      	cmp	r3, #16
 80055de:	d10a      	bne.n	80055f6 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055e0:	2300      	movs	r3, #0
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	60fb      	str	r3, [r7, #12]
 80055f4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fb fdf5 	bl	80011ec <HAL_UARTEx_RxEventCallback>
 8005602:	e002      	b.n	800560a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f7fb fddf 	bl	80011c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800560a:	2300      	movs	r3, #0
 800560c:	e002      	b.n	8005614 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800560e:	2300      	movs	r3, #0
 8005610:	e000      	b.n	8005614 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
  }
}
 8005614:	4618      	mov	r0, r3
 8005616:	3730      	adds	r7, #48	@ 0x30
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68da      	ldr	r2, [r3, #12]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	430a      	orrs	r2, r1
 8005638:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	689a      	ldr	r2, [r3, #8]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	691b      	ldr	r3, [r3, #16]
 8005642:	431a      	orrs	r2, r3
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	695b      	ldr	r3, [r3, #20]
 8005648:	4313      	orrs	r3, r2
 800564a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005656:	f023 030c 	bic.w	r3, r3, #12
 800565a:	687a      	ldr	r2, [r7, #4]
 800565c:	6812      	ldr	r2, [r2, #0]
 800565e:	68b9      	ldr	r1, [r7, #8]
 8005660:	430b      	orrs	r3, r1
 8005662:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	695b      	ldr	r3, [r3, #20]
 800566a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	699a      	ldr	r2, [r3, #24]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a2c      	ldr	r2, [pc, #176]	@ (8005730 <UART_SetConfig+0x114>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d103      	bne.n	800568c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005684:	f7fe ff26 	bl	80044d4 <HAL_RCC_GetPCLK2Freq>
 8005688:	60f8      	str	r0, [r7, #12]
 800568a:	e002      	b.n	8005692 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800568c:	f7fe ff0e 	bl	80044ac <HAL_RCC_GetPCLK1Freq>
 8005690:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009a      	lsls	r2, r3, #2
 800569c:	441a      	add	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	009b      	lsls	r3, r3, #2
 80056a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056a8:	4a22      	ldr	r2, [pc, #136]	@ (8005734 <UART_SetConfig+0x118>)
 80056aa:	fba2 2303 	umull	r2, r3, r2, r3
 80056ae:	095b      	lsrs	r3, r3, #5
 80056b0:	0119      	lsls	r1, r3, #4
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	4613      	mov	r3, r2
 80056b6:	009b      	lsls	r3, r3, #2
 80056b8:	4413      	add	r3, r2
 80056ba:	009a      	lsls	r2, r3, #2
 80056bc:	441a      	add	r2, r3
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056c8:	4b1a      	ldr	r3, [pc, #104]	@ (8005734 <UART_SetConfig+0x118>)
 80056ca:	fba3 0302 	umull	r0, r3, r3, r2
 80056ce:	095b      	lsrs	r3, r3, #5
 80056d0:	2064      	movs	r0, #100	@ 0x64
 80056d2:	fb00 f303 	mul.w	r3, r0, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	011b      	lsls	r3, r3, #4
 80056da:	3332      	adds	r3, #50	@ 0x32
 80056dc:	4a15      	ldr	r2, [pc, #84]	@ (8005734 <UART_SetConfig+0x118>)
 80056de:	fba2 2303 	umull	r2, r3, r2, r3
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80056e8:	4419      	add	r1, r3
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4613      	mov	r3, r2
 80056ee:	009b      	lsls	r3, r3, #2
 80056f0:	4413      	add	r3, r2
 80056f2:	009a      	lsls	r2, r3, #2
 80056f4:	441a      	add	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005700:	4b0c      	ldr	r3, [pc, #48]	@ (8005734 <UART_SetConfig+0x118>)
 8005702:	fba3 0302 	umull	r0, r3, r3, r2
 8005706:	095b      	lsrs	r3, r3, #5
 8005708:	2064      	movs	r0, #100	@ 0x64
 800570a:	fb00 f303 	mul.w	r3, r0, r3
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	011b      	lsls	r3, r3, #4
 8005712:	3332      	adds	r3, #50	@ 0x32
 8005714:	4a07      	ldr	r2, [pc, #28]	@ (8005734 <UART_SetConfig+0x118>)
 8005716:	fba2 2303 	umull	r2, r3, r2, r3
 800571a:	095b      	lsrs	r3, r3, #5
 800571c:	f003 020f 	and.w	r2, r3, #15
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	440a      	add	r2, r1
 8005726:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005728:	bf00      	nop
 800572a:	3710      	adds	r7, #16
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	40013800 	.word	0x40013800
 8005734:	51eb851f 	.word	0x51eb851f

08005738 <__cvt>:
 8005738:	2b00      	cmp	r3, #0
 800573a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800573e:	461d      	mov	r5, r3
 8005740:	bfbb      	ittet	lt
 8005742:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8005746:	461d      	movlt	r5, r3
 8005748:	2300      	movge	r3, #0
 800574a:	232d      	movlt	r3, #45	@ 0x2d
 800574c:	b088      	sub	sp, #32
 800574e:	4614      	mov	r4, r2
 8005750:	bfb8      	it	lt
 8005752:	4614      	movlt	r4, r2
 8005754:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005756:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8005758:	7013      	strb	r3, [r2, #0]
 800575a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800575c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005760:	f023 0820 	bic.w	r8, r3, #32
 8005764:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005768:	d005      	beq.n	8005776 <__cvt+0x3e>
 800576a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800576e:	d100      	bne.n	8005772 <__cvt+0x3a>
 8005770:	3601      	adds	r6, #1
 8005772:	2302      	movs	r3, #2
 8005774:	e000      	b.n	8005778 <__cvt+0x40>
 8005776:	2303      	movs	r3, #3
 8005778:	aa07      	add	r2, sp, #28
 800577a:	9204      	str	r2, [sp, #16]
 800577c:	aa06      	add	r2, sp, #24
 800577e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005782:	e9cd 3600 	strd	r3, r6, [sp]
 8005786:	4622      	mov	r2, r4
 8005788:	462b      	mov	r3, r5
 800578a:	f001 ffc9 	bl	8007720 <_dtoa_r>
 800578e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005792:	4607      	mov	r7, r0
 8005794:	d119      	bne.n	80057ca <__cvt+0x92>
 8005796:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005798:	07db      	lsls	r3, r3, #31
 800579a:	d50e      	bpl.n	80057ba <__cvt+0x82>
 800579c:	eb00 0906 	add.w	r9, r0, r6
 80057a0:	2200      	movs	r2, #0
 80057a2:	2300      	movs	r3, #0
 80057a4:	4620      	mov	r0, r4
 80057a6:	4629      	mov	r1, r5
 80057a8:	f7fb f8fe 	bl	80009a8 <__aeabi_dcmpeq>
 80057ac:	b108      	cbz	r0, 80057b2 <__cvt+0x7a>
 80057ae:	f8cd 901c 	str.w	r9, [sp, #28]
 80057b2:	2230      	movs	r2, #48	@ 0x30
 80057b4:	9b07      	ldr	r3, [sp, #28]
 80057b6:	454b      	cmp	r3, r9
 80057b8:	d31e      	bcc.n	80057f8 <__cvt+0xc0>
 80057ba:	4638      	mov	r0, r7
 80057bc:	9b07      	ldr	r3, [sp, #28]
 80057be:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80057c0:	1bdb      	subs	r3, r3, r7
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	b008      	add	sp, #32
 80057c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057ca:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80057ce:	eb00 0906 	add.w	r9, r0, r6
 80057d2:	d1e5      	bne.n	80057a0 <__cvt+0x68>
 80057d4:	7803      	ldrb	r3, [r0, #0]
 80057d6:	2b30      	cmp	r3, #48	@ 0x30
 80057d8:	d10a      	bne.n	80057f0 <__cvt+0xb8>
 80057da:	2200      	movs	r2, #0
 80057dc:	2300      	movs	r3, #0
 80057de:	4620      	mov	r0, r4
 80057e0:	4629      	mov	r1, r5
 80057e2:	f7fb f8e1 	bl	80009a8 <__aeabi_dcmpeq>
 80057e6:	b918      	cbnz	r0, 80057f0 <__cvt+0xb8>
 80057e8:	f1c6 0601 	rsb	r6, r6, #1
 80057ec:	f8ca 6000 	str.w	r6, [sl]
 80057f0:	f8da 3000 	ldr.w	r3, [sl]
 80057f4:	4499      	add	r9, r3
 80057f6:	e7d3      	b.n	80057a0 <__cvt+0x68>
 80057f8:	1c59      	adds	r1, r3, #1
 80057fa:	9107      	str	r1, [sp, #28]
 80057fc:	701a      	strb	r2, [r3, #0]
 80057fe:	e7d9      	b.n	80057b4 <__cvt+0x7c>

08005800 <__exponent>:
 8005800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005802:	2900      	cmp	r1, #0
 8005804:	bfb6      	itet	lt
 8005806:	232d      	movlt	r3, #45	@ 0x2d
 8005808:	232b      	movge	r3, #43	@ 0x2b
 800580a:	4249      	neglt	r1, r1
 800580c:	2909      	cmp	r1, #9
 800580e:	7002      	strb	r2, [r0, #0]
 8005810:	7043      	strb	r3, [r0, #1]
 8005812:	dd29      	ble.n	8005868 <__exponent+0x68>
 8005814:	f10d 0307 	add.w	r3, sp, #7
 8005818:	461d      	mov	r5, r3
 800581a:	270a      	movs	r7, #10
 800581c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005820:	461a      	mov	r2, r3
 8005822:	fb07 1416 	mls	r4, r7, r6, r1
 8005826:	3430      	adds	r4, #48	@ 0x30
 8005828:	f802 4c01 	strb.w	r4, [r2, #-1]
 800582c:	460c      	mov	r4, r1
 800582e:	2c63      	cmp	r4, #99	@ 0x63
 8005830:	4631      	mov	r1, r6
 8005832:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8005836:	dcf1      	bgt.n	800581c <__exponent+0x1c>
 8005838:	3130      	adds	r1, #48	@ 0x30
 800583a:	1e94      	subs	r4, r2, #2
 800583c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005840:	4623      	mov	r3, r4
 8005842:	1c41      	adds	r1, r0, #1
 8005844:	42ab      	cmp	r3, r5
 8005846:	d30a      	bcc.n	800585e <__exponent+0x5e>
 8005848:	f10d 0309 	add.w	r3, sp, #9
 800584c:	1a9b      	subs	r3, r3, r2
 800584e:	42ac      	cmp	r4, r5
 8005850:	bf88      	it	hi
 8005852:	2300      	movhi	r3, #0
 8005854:	3302      	adds	r3, #2
 8005856:	4403      	add	r3, r0
 8005858:	1a18      	subs	r0, r3, r0
 800585a:	b003      	add	sp, #12
 800585c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800585e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005862:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005866:	e7ed      	b.n	8005844 <__exponent+0x44>
 8005868:	2330      	movs	r3, #48	@ 0x30
 800586a:	3130      	adds	r1, #48	@ 0x30
 800586c:	7083      	strb	r3, [r0, #2]
 800586e:	70c1      	strb	r1, [r0, #3]
 8005870:	1d03      	adds	r3, r0, #4
 8005872:	e7f1      	b.n	8005858 <__exponent+0x58>

08005874 <_printf_float>:
 8005874:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005878:	b091      	sub	sp, #68	@ 0x44
 800587a:	460c      	mov	r4, r1
 800587c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005880:	4616      	mov	r6, r2
 8005882:	461f      	mov	r7, r3
 8005884:	4605      	mov	r5, r0
 8005886:	f001 fe1d 	bl	80074c4 <_localeconv_r>
 800588a:	6803      	ldr	r3, [r0, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	9308      	str	r3, [sp, #32]
 8005890:	f7fa fc5e 	bl	8000150 <strlen>
 8005894:	2300      	movs	r3, #0
 8005896:	930e      	str	r3, [sp, #56]	@ 0x38
 8005898:	f8d8 3000 	ldr.w	r3, [r8]
 800589c:	9009      	str	r0, [sp, #36]	@ 0x24
 800589e:	3307      	adds	r3, #7
 80058a0:	f023 0307 	bic.w	r3, r3, #7
 80058a4:	f103 0208 	add.w	r2, r3, #8
 80058a8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80058ac:	f8d4 b000 	ldr.w	fp, [r4]
 80058b0:	f8c8 2000 	str.w	r2, [r8]
 80058b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058b8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80058bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80058be:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80058c2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80058ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80058ce:	4b9c      	ldr	r3, [pc, #624]	@ (8005b40 <_printf_float+0x2cc>)
 80058d0:	f7fb f89c 	bl	8000a0c <__aeabi_dcmpun>
 80058d4:	bb70      	cbnz	r0, 8005934 <_printf_float+0xc0>
 80058d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80058da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80058de:	4b98      	ldr	r3, [pc, #608]	@ (8005b40 <_printf_float+0x2cc>)
 80058e0:	f7fb f876 	bl	80009d0 <__aeabi_dcmple>
 80058e4:	bb30      	cbnz	r0, 8005934 <_printf_float+0xc0>
 80058e6:	2200      	movs	r2, #0
 80058e8:	2300      	movs	r3, #0
 80058ea:	4640      	mov	r0, r8
 80058ec:	4649      	mov	r1, r9
 80058ee:	f7fb f865 	bl	80009bc <__aeabi_dcmplt>
 80058f2:	b110      	cbz	r0, 80058fa <_printf_float+0x86>
 80058f4:	232d      	movs	r3, #45	@ 0x2d
 80058f6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058fa:	4a92      	ldr	r2, [pc, #584]	@ (8005b44 <_printf_float+0x2d0>)
 80058fc:	4b92      	ldr	r3, [pc, #584]	@ (8005b48 <_printf_float+0x2d4>)
 80058fe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005902:	bf94      	ite	ls
 8005904:	4690      	movls	r8, r2
 8005906:	4698      	movhi	r8, r3
 8005908:	2303      	movs	r3, #3
 800590a:	f04f 0900 	mov.w	r9, #0
 800590e:	6123      	str	r3, [r4, #16]
 8005910:	f02b 0304 	bic.w	r3, fp, #4
 8005914:	6023      	str	r3, [r4, #0]
 8005916:	4633      	mov	r3, r6
 8005918:	4621      	mov	r1, r4
 800591a:	4628      	mov	r0, r5
 800591c:	9700      	str	r7, [sp, #0]
 800591e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005920:	f000 f9d4 	bl	8005ccc <_printf_common>
 8005924:	3001      	adds	r0, #1
 8005926:	f040 8090 	bne.w	8005a4a <_printf_float+0x1d6>
 800592a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800592e:	b011      	add	sp, #68	@ 0x44
 8005930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005934:	4642      	mov	r2, r8
 8005936:	464b      	mov	r3, r9
 8005938:	4640      	mov	r0, r8
 800593a:	4649      	mov	r1, r9
 800593c:	f7fb f866 	bl	8000a0c <__aeabi_dcmpun>
 8005940:	b148      	cbz	r0, 8005956 <_printf_float+0xe2>
 8005942:	464b      	mov	r3, r9
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfb8      	it	lt
 8005948:	232d      	movlt	r3, #45	@ 0x2d
 800594a:	4a80      	ldr	r2, [pc, #512]	@ (8005b4c <_printf_float+0x2d8>)
 800594c:	bfb8      	it	lt
 800594e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005952:	4b7f      	ldr	r3, [pc, #508]	@ (8005b50 <_printf_float+0x2dc>)
 8005954:	e7d3      	b.n	80058fe <_printf_float+0x8a>
 8005956:	6863      	ldr	r3, [r4, #4]
 8005958:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	d13f      	bne.n	80059e0 <_printf_float+0x16c>
 8005960:	2306      	movs	r3, #6
 8005962:	6063      	str	r3, [r4, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800596a:	6023      	str	r3, [r4, #0]
 800596c:	9206      	str	r2, [sp, #24]
 800596e:	aa0e      	add	r2, sp, #56	@ 0x38
 8005970:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005974:	aa0d      	add	r2, sp, #52	@ 0x34
 8005976:	9203      	str	r2, [sp, #12]
 8005978:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800597c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005980:	6863      	ldr	r3, [r4, #4]
 8005982:	4642      	mov	r2, r8
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	4628      	mov	r0, r5
 8005988:	464b      	mov	r3, r9
 800598a:	910a      	str	r1, [sp, #40]	@ 0x28
 800598c:	f7ff fed4 	bl	8005738 <__cvt>
 8005990:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005992:	4680      	mov	r8, r0
 8005994:	2947      	cmp	r1, #71	@ 0x47
 8005996:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005998:	d128      	bne.n	80059ec <_printf_float+0x178>
 800599a:	1cc8      	adds	r0, r1, #3
 800599c:	db02      	blt.n	80059a4 <_printf_float+0x130>
 800599e:	6863      	ldr	r3, [r4, #4]
 80059a0:	4299      	cmp	r1, r3
 80059a2:	dd40      	ble.n	8005a26 <_printf_float+0x1b2>
 80059a4:	f1aa 0a02 	sub.w	sl, sl, #2
 80059a8:	fa5f fa8a 	uxtb.w	sl, sl
 80059ac:	4652      	mov	r2, sl
 80059ae:	3901      	subs	r1, #1
 80059b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80059b4:	910d      	str	r1, [sp, #52]	@ 0x34
 80059b6:	f7ff ff23 	bl	8005800 <__exponent>
 80059ba:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80059bc:	4681      	mov	r9, r0
 80059be:	1813      	adds	r3, r2, r0
 80059c0:	2a01      	cmp	r2, #1
 80059c2:	6123      	str	r3, [r4, #16]
 80059c4:	dc02      	bgt.n	80059cc <_printf_float+0x158>
 80059c6:	6822      	ldr	r2, [r4, #0]
 80059c8:	07d2      	lsls	r2, r2, #31
 80059ca:	d501      	bpl.n	80059d0 <_printf_float+0x15c>
 80059cc:	3301      	adds	r3, #1
 80059ce:	6123      	str	r3, [r4, #16]
 80059d0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d09e      	beq.n	8005916 <_printf_float+0xa2>
 80059d8:	232d      	movs	r3, #45	@ 0x2d
 80059da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059de:	e79a      	b.n	8005916 <_printf_float+0xa2>
 80059e0:	2947      	cmp	r1, #71	@ 0x47
 80059e2:	d1bf      	bne.n	8005964 <_printf_float+0xf0>
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d1bd      	bne.n	8005964 <_printf_float+0xf0>
 80059e8:	2301      	movs	r3, #1
 80059ea:	e7ba      	b.n	8005962 <_printf_float+0xee>
 80059ec:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80059f0:	d9dc      	bls.n	80059ac <_printf_float+0x138>
 80059f2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80059f6:	d118      	bne.n	8005a2a <_printf_float+0x1b6>
 80059f8:	2900      	cmp	r1, #0
 80059fa:	6863      	ldr	r3, [r4, #4]
 80059fc:	dd0b      	ble.n	8005a16 <_printf_float+0x1a2>
 80059fe:	6121      	str	r1, [r4, #16]
 8005a00:	b913      	cbnz	r3, 8005a08 <_printf_float+0x194>
 8005a02:	6822      	ldr	r2, [r4, #0]
 8005a04:	07d0      	lsls	r0, r2, #31
 8005a06:	d502      	bpl.n	8005a0e <_printf_float+0x19a>
 8005a08:	3301      	adds	r3, #1
 8005a0a:	440b      	add	r3, r1
 8005a0c:	6123      	str	r3, [r4, #16]
 8005a0e:	f04f 0900 	mov.w	r9, #0
 8005a12:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005a14:	e7dc      	b.n	80059d0 <_printf_float+0x15c>
 8005a16:	b913      	cbnz	r3, 8005a1e <_printf_float+0x1aa>
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	07d2      	lsls	r2, r2, #31
 8005a1c:	d501      	bpl.n	8005a22 <_printf_float+0x1ae>
 8005a1e:	3302      	adds	r3, #2
 8005a20:	e7f4      	b.n	8005a0c <_printf_float+0x198>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e7f2      	b.n	8005a0c <_printf_float+0x198>
 8005a26:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005a2a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a2c:	4299      	cmp	r1, r3
 8005a2e:	db05      	blt.n	8005a3c <_printf_float+0x1c8>
 8005a30:	6823      	ldr	r3, [r4, #0]
 8005a32:	6121      	str	r1, [r4, #16]
 8005a34:	07d8      	lsls	r0, r3, #31
 8005a36:	d5ea      	bpl.n	8005a0e <_printf_float+0x19a>
 8005a38:	1c4b      	adds	r3, r1, #1
 8005a3a:	e7e7      	b.n	8005a0c <_printf_float+0x198>
 8005a3c:	2900      	cmp	r1, #0
 8005a3e:	bfcc      	ite	gt
 8005a40:	2201      	movgt	r2, #1
 8005a42:	f1c1 0202 	rsble	r2, r1, #2
 8005a46:	4413      	add	r3, r2
 8005a48:	e7e0      	b.n	8005a0c <_printf_float+0x198>
 8005a4a:	6823      	ldr	r3, [r4, #0]
 8005a4c:	055a      	lsls	r2, r3, #21
 8005a4e:	d407      	bmi.n	8005a60 <_printf_float+0x1ec>
 8005a50:	6923      	ldr	r3, [r4, #16]
 8005a52:	4642      	mov	r2, r8
 8005a54:	4631      	mov	r1, r6
 8005a56:	4628      	mov	r0, r5
 8005a58:	47b8      	blx	r7
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d12b      	bne.n	8005ab6 <_printf_float+0x242>
 8005a5e:	e764      	b.n	800592a <_printf_float+0xb6>
 8005a60:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005a64:	f240 80dc 	bls.w	8005c20 <_printf_float+0x3ac>
 8005a68:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	f7fa ff9a 	bl	80009a8 <__aeabi_dcmpeq>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	d033      	beq.n	8005ae0 <_printf_float+0x26c>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4631      	mov	r1, r6
 8005a7c:	4628      	mov	r0, r5
 8005a7e:	4a35      	ldr	r2, [pc, #212]	@ (8005b54 <_printf_float+0x2e0>)
 8005a80:	47b8      	blx	r7
 8005a82:	3001      	adds	r0, #1
 8005a84:	f43f af51 	beq.w	800592a <_printf_float+0xb6>
 8005a88:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005a8c:	4543      	cmp	r3, r8
 8005a8e:	db02      	blt.n	8005a96 <_printf_float+0x222>
 8005a90:	6823      	ldr	r3, [r4, #0]
 8005a92:	07d8      	lsls	r0, r3, #31
 8005a94:	d50f      	bpl.n	8005ab6 <_printf_float+0x242>
 8005a96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f af42 	beq.w	800592a <_printf_float+0xb6>
 8005aa6:	f04f 0900 	mov.w	r9, #0
 8005aaa:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005aae:	f104 0a1a 	add.w	sl, r4, #26
 8005ab2:	45c8      	cmp	r8, r9
 8005ab4:	dc09      	bgt.n	8005aca <_printf_float+0x256>
 8005ab6:	6823      	ldr	r3, [r4, #0]
 8005ab8:	079b      	lsls	r3, r3, #30
 8005aba:	f100 8102 	bmi.w	8005cc2 <_printf_float+0x44e>
 8005abe:	68e0      	ldr	r0, [r4, #12]
 8005ac0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005ac2:	4298      	cmp	r0, r3
 8005ac4:	bfb8      	it	lt
 8005ac6:	4618      	movlt	r0, r3
 8005ac8:	e731      	b.n	800592e <_printf_float+0xba>
 8005aca:	2301      	movs	r3, #1
 8005acc:	4652      	mov	r2, sl
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f43f af28 	beq.w	800592a <_printf_float+0xb6>
 8005ada:	f109 0901 	add.w	r9, r9, #1
 8005ade:	e7e8      	b.n	8005ab2 <_printf_float+0x23e>
 8005ae0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	dc38      	bgt.n	8005b58 <_printf_float+0x2e4>
 8005ae6:	2301      	movs	r3, #1
 8005ae8:	4631      	mov	r1, r6
 8005aea:	4628      	mov	r0, r5
 8005aec:	4a19      	ldr	r2, [pc, #100]	@ (8005b54 <_printf_float+0x2e0>)
 8005aee:	47b8      	blx	r7
 8005af0:	3001      	adds	r0, #1
 8005af2:	f43f af1a 	beq.w	800592a <_printf_float+0xb6>
 8005af6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005afa:	ea59 0303 	orrs.w	r3, r9, r3
 8005afe:	d102      	bne.n	8005b06 <_printf_float+0x292>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	07d9      	lsls	r1, r3, #31
 8005b04:	d5d7      	bpl.n	8005ab6 <_printf_float+0x242>
 8005b06:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005b0a:	4631      	mov	r1, r6
 8005b0c:	4628      	mov	r0, r5
 8005b0e:	47b8      	blx	r7
 8005b10:	3001      	adds	r0, #1
 8005b12:	f43f af0a 	beq.w	800592a <_printf_float+0xb6>
 8005b16:	f04f 0a00 	mov.w	sl, #0
 8005b1a:	f104 0b1a 	add.w	fp, r4, #26
 8005b1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b20:	425b      	negs	r3, r3
 8005b22:	4553      	cmp	r3, sl
 8005b24:	dc01      	bgt.n	8005b2a <_printf_float+0x2b6>
 8005b26:	464b      	mov	r3, r9
 8005b28:	e793      	b.n	8005a52 <_printf_float+0x1de>
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	465a      	mov	r2, fp
 8005b2e:	4631      	mov	r1, r6
 8005b30:	4628      	mov	r0, r5
 8005b32:	47b8      	blx	r7
 8005b34:	3001      	adds	r0, #1
 8005b36:	f43f aef8 	beq.w	800592a <_printf_float+0xb6>
 8005b3a:	f10a 0a01 	add.w	sl, sl, #1
 8005b3e:	e7ee      	b.n	8005b1e <_printf_float+0x2aa>
 8005b40:	7fefffff 	.word	0x7fefffff
 8005b44:	0800aeca 	.word	0x0800aeca
 8005b48:	0800aece 	.word	0x0800aece
 8005b4c:	0800aed2 	.word	0x0800aed2
 8005b50:	0800aed6 	.word	0x0800aed6
 8005b54:	0800b175 	.word	0x0800b175
 8005b58:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b5a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005b5e:	4553      	cmp	r3, sl
 8005b60:	bfa8      	it	ge
 8005b62:	4653      	movge	r3, sl
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	4699      	mov	r9, r3
 8005b68:	dc36      	bgt.n	8005bd8 <_printf_float+0x364>
 8005b6a:	f04f 0b00 	mov.w	fp, #0
 8005b6e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005b72:	f104 021a 	add.w	r2, r4, #26
 8005b76:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005b78:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b7a:	eba3 0309 	sub.w	r3, r3, r9
 8005b7e:	455b      	cmp	r3, fp
 8005b80:	dc31      	bgt.n	8005be6 <_printf_float+0x372>
 8005b82:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b84:	459a      	cmp	sl, r3
 8005b86:	dc3a      	bgt.n	8005bfe <_printf_float+0x38a>
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	07da      	lsls	r2, r3, #31
 8005b8c:	d437      	bmi.n	8005bfe <_printf_float+0x38a>
 8005b8e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005b90:	ebaa 0903 	sub.w	r9, sl, r3
 8005b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b96:	ebaa 0303 	sub.w	r3, sl, r3
 8005b9a:	4599      	cmp	r9, r3
 8005b9c:	bfa8      	it	ge
 8005b9e:	4699      	movge	r9, r3
 8005ba0:	f1b9 0f00 	cmp.w	r9, #0
 8005ba4:	dc33      	bgt.n	8005c0e <_printf_float+0x39a>
 8005ba6:	f04f 0800 	mov.w	r8, #0
 8005baa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005bae:	f104 0b1a 	add.w	fp, r4, #26
 8005bb2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005bb4:	ebaa 0303 	sub.w	r3, sl, r3
 8005bb8:	eba3 0309 	sub.w	r3, r3, r9
 8005bbc:	4543      	cmp	r3, r8
 8005bbe:	f77f af7a 	ble.w	8005ab6 <_printf_float+0x242>
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	465a      	mov	r2, fp
 8005bc6:	4631      	mov	r1, r6
 8005bc8:	4628      	mov	r0, r5
 8005bca:	47b8      	blx	r7
 8005bcc:	3001      	adds	r0, #1
 8005bce:	f43f aeac 	beq.w	800592a <_printf_float+0xb6>
 8005bd2:	f108 0801 	add.w	r8, r8, #1
 8005bd6:	e7ec      	b.n	8005bb2 <_printf_float+0x33e>
 8005bd8:	4642      	mov	r2, r8
 8005bda:	4631      	mov	r1, r6
 8005bdc:	4628      	mov	r0, r5
 8005bde:	47b8      	blx	r7
 8005be0:	3001      	adds	r0, #1
 8005be2:	d1c2      	bne.n	8005b6a <_printf_float+0x2f6>
 8005be4:	e6a1      	b.n	800592a <_printf_float+0xb6>
 8005be6:	2301      	movs	r3, #1
 8005be8:	4631      	mov	r1, r6
 8005bea:	4628      	mov	r0, r5
 8005bec:	920a      	str	r2, [sp, #40]	@ 0x28
 8005bee:	47b8      	blx	r7
 8005bf0:	3001      	adds	r0, #1
 8005bf2:	f43f ae9a 	beq.w	800592a <_printf_float+0xb6>
 8005bf6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005bf8:	f10b 0b01 	add.w	fp, fp, #1
 8005bfc:	e7bb      	b.n	8005b76 <_printf_float+0x302>
 8005bfe:	4631      	mov	r1, r6
 8005c00:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b8      	blx	r7
 8005c08:	3001      	adds	r0, #1
 8005c0a:	d1c0      	bne.n	8005b8e <_printf_float+0x31a>
 8005c0c:	e68d      	b.n	800592a <_printf_float+0xb6>
 8005c0e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005c10:	464b      	mov	r3, r9
 8005c12:	4631      	mov	r1, r6
 8005c14:	4628      	mov	r0, r5
 8005c16:	4442      	add	r2, r8
 8005c18:	47b8      	blx	r7
 8005c1a:	3001      	adds	r0, #1
 8005c1c:	d1c3      	bne.n	8005ba6 <_printf_float+0x332>
 8005c1e:	e684      	b.n	800592a <_printf_float+0xb6>
 8005c20:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005c24:	f1ba 0f01 	cmp.w	sl, #1
 8005c28:	dc01      	bgt.n	8005c2e <_printf_float+0x3ba>
 8005c2a:	07db      	lsls	r3, r3, #31
 8005c2c:	d536      	bpl.n	8005c9c <_printf_float+0x428>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	4642      	mov	r2, r8
 8005c32:	4631      	mov	r1, r6
 8005c34:	4628      	mov	r0, r5
 8005c36:	47b8      	blx	r7
 8005c38:	3001      	adds	r0, #1
 8005c3a:	f43f ae76 	beq.w	800592a <_printf_float+0xb6>
 8005c3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005c42:	4631      	mov	r1, r6
 8005c44:	4628      	mov	r0, r5
 8005c46:	47b8      	blx	r7
 8005c48:	3001      	adds	r0, #1
 8005c4a:	f43f ae6e 	beq.w	800592a <_printf_float+0xb6>
 8005c4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c52:	2200      	movs	r2, #0
 8005c54:	2300      	movs	r3, #0
 8005c56:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005c5a:	f7fa fea5 	bl	80009a8 <__aeabi_dcmpeq>
 8005c5e:	b9c0      	cbnz	r0, 8005c92 <_printf_float+0x41e>
 8005c60:	4653      	mov	r3, sl
 8005c62:	f108 0201 	add.w	r2, r8, #1
 8005c66:	4631      	mov	r1, r6
 8005c68:	4628      	mov	r0, r5
 8005c6a:	47b8      	blx	r7
 8005c6c:	3001      	adds	r0, #1
 8005c6e:	d10c      	bne.n	8005c8a <_printf_float+0x416>
 8005c70:	e65b      	b.n	800592a <_printf_float+0xb6>
 8005c72:	2301      	movs	r3, #1
 8005c74:	465a      	mov	r2, fp
 8005c76:	4631      	mov	r1, r6
 8005c78:	4628      	mov	r0, r5
 8005c7a:	47b8      	blx	r7
 8005c7c:	3001      	adds	r0, #1
 8005c7e:	f43f ae54 	beq.w	800592a <_printf_float+0xb6>
 8005c82:	f108 0801 	add.w	r8, r8, #1
 8005c86:	45d0      	cmp	r8, sl
 8005c88:	dbf3      	blt.n	8005c72 <_printf_float+0x3fe>
 8005c8a:	464b      	mov	r3, r9
 8005c8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005c90:	e6e0      	b.n	8005a54 <_printf_float+0x1e0>
 8005c92:	f04f 0800 	mov.w	r8, #0
 8005c96:	f104 0b1a 	add.w	fp, r4, #26
 8005c9a:	e7f4      	b.n	8005c86 <_printf_float+0x412>
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	4642      	mov	r2, r8
 8005ca0:	e7e1      	b.n	8005c66 <_printf_float+0x3f2>
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	464a      	mov	r2, r9
 8005ca6:	4631      	mov	r1, r6
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b8      	blx	r7
 8005cac:	3001      	adds	r0, #1
 8005cae:	f43f ae3c 	beq.w	800592a <_printf_float+0xb6>
 8005cb2:	f108 0801 	add.w	r8, r8, #1
 8005cb6:	68e3      	ldr	r3, [r4, #12]
 8005cb8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005cba:	1a5b      	subs	r3, r3, r1
 8005cbc:	4543      	cmp	r3, r8
 8005cbe:	dcf0      	bgt.n	8005ca2 <_printf_float+0x42e>
 8005cc0:	e6fd      	b.n	8005abe <_printf_float+0x24a>
 8005cc2:	f04f 0800 	mov.w	r8, #0
 8005cc6:	f104 0919 	add.w	r9, r4, #25
 8005cca:	e7f4      	b.n	8005cb6 <_printf_float+0x442>

08005ccc <_printf_common>:
 8005ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cd0:	4616      	mov	r6, r2
 8005cd2:	4698      	mov	r8, r3
 8005cd4:	688a      	ldr	r2, [r1, #8]
 8005cd6:	690b      	ldr	r3, [r1, #16]
 8005cd8:	4607      	mov	r7, r0
 8005cda:	4293      	cmp	r3, r2
 8005cdc:	bfb8      	it	lt
 8005cde:	4613      	movlt	r3, r2
 8005ce0:	6033      	str	r3, [r6, #0]
 8005ce2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005cec:	b10a      	cbz	r2, 8005cf2 <_printf_common+0x26>
 8005cee:	3301      	adds	r3, #1
 8005cf0:	6033      	str	r3, [r6, #0]
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	0699      	lsls	r1, r3, #26
 8005cf6:	bf42      	ittt	mi
 8005cf8:	6833      	ldrmi	r3, [r6, #0]
 8005cfa:	3302      	addmi	r3, #2
 8005cfc:	6033      	strmi	r3, [r6, #0]
 8005cfe:	6825      	ldr	r5, [r4, #0]
 8005d00:	f015 0506 	ands.w	r5, r5, #6
 8005d04:	d106      	bne.n	8005d14 <_printf_common+0x48>
 8005d06:	f104 0a19 	add.w	sl, r4, #25
 8005d0a:	68e3      	ldr	r3, [r4, #12]
 8005d0c:	6832      	ldr	r2, [r6, #0]
 8005d0e:	1a9b      	subs	r3, r3, r2
 8005d10:	42ab      	cmp	r3, r5
 8005d12:	dc2b      	bgt.n	8005d6c <_printf_common+0xa0>
 8005d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005d18:	6822      	ldr	r2, [r4, #0]
 8005d1a:	3b00      	subs	r3, #0
 8005d1c:	bf18      	it	ne
 8005d1e:	2301      	movne	r3, #1
 8005d20:	0692      	lsls	r2, r2, #26
 8005d22:	d430      	bmi.n	8005d86 <_printf_common+0xba>
 8005d24:	4641      	mov	r1, r8
 8005d26:	4638      	mov	r0, r7
 8005d28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005d2c:	47c8      	blx	r9
 8005d2e:	3001      	adds	r0, #1
 8005d30:	d023      	beq.n	8005d7a <_printf_common+0xae>
 8005d32:	6823      	ldr	r3, [r4, #0]
 8005d34:	6922      	ldr	r2, [r4, #16]
 8005d36:	f003 0306 	and.w	r3, r3, #6
 8005d3a:	2b04      	cmp	r3, #4
 8005d3c:	bf14      	ite	ne
 8005d3e:	2500      	movne	r5, #0
 8005d40:	6833      	ldreq	r3, [r6, #0]
 8005d42:	f04f 0600 	mov.w	r6, #0
 8005d46:	bf08      	it	eq
 8005d48:	68e5      	ldreq	r5, [r4, #12]
 8005d4a:	f104 041a 	add.w	r4, r4, #26
 8005d4e:	bf08      	it	eq
 8005d50:	1aed      	subeq	r5, r5, r3
 8005d52:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005d56:	bf08      	it	eq
 8005d58:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bfc4      	itt	gt
 8005d60:	1a9b      	subgt	r3, r3, r2
 8005d62:	18ed      	addgt	r5, r5, r3
 8005d64:	42b5      	cmp	r5, r6
 8005d66:	d11a      	bne.n	8005d9e <_printf_common+0xd2>
 8005d68:	2000      	movs	r0, #0
 8005d6a:	e008      	b.n	8005d7e <_printf_common+0xb2>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	4652      	mov	r2, sl
 8005d70:	4641      	mov	r1, r8
 8005d72:	4638      	mov	r0, r7
 8005d74:	47c8      	blx	r9
 8005d76:	3001      	adds	r0, #1
 8005d78:	d103      	bne.n	8005d82 <_printf_common+0xb6>
 8005d7a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005d7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d82:	3501      	adds	r5, #1
 8005d84:	e7c1      	b.n	8005d0a <_printf_common+0x3e>
 8005d86:	2030      	movs	r0, #48	@ 0x30
 8005d88:	18e1      	adds	r1, r4, r3
 8005d8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005d8e:	1c5a      	adds	r2, r3, #1
 8005d90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005d94:	4422      	add	r2, r4
 8005d96:	3302      	adds	r3, #2
 8005d98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005d9c:	e7c2      	b.n	8005d24 <_printf_common+0x58>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	4622      	mov	r2, r4
 8005da2:	4641      	mov	r1, r8
 8005da4:	4638      	mov	r0, r7
 8005da6:	47c8      	blx	r9
 8005da8:	3001      	adds	r0, #1
 8005daa:	d0e6      	beq.n	8005d7a <_printf_common+0xae>
 8005dac:	3601      	adds	r6, #1
 8005dae:	e7d9      	b.n	8005d64 <_printf_common+0x98>

08005db0 <_printf_i>:
 8005db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005db4:	7e0f      	ldrb	r7, [r1, #24]
 8005db6:	4691      	mov	r9, r2
 8005db8:	2f78      	cmp	r7, #120	@ 0x78
 8005dba:	4680      	mov	r8, r0
 8005dbc:	460c      	mov	r4, r1
 8005dbe:	469a      	mov	sl, r3
 8005dc0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005dc2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005dc6:	d807      	bhi.n	8005dd8 <_printf_i+0x28>
 8005dc8:	2f62      	cmp	r7, #98	@ 0x62
 8005dca:	d80a      	bhi.n	8005de2 <_printf_i+0x32>
 8005dcc:	2f00      	cmp	r7, #0
 8005dce:	f000 80d3 	beq.w	8005f78 <_printf_i+0x1c8>
 8005dd2:	2f58      	cmp	r7, #88	@ 0x58
 8005dd4:	f000 80ba 	beq.w	8005f4c <_printf_i+0x19c>
 8005dd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ddc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005de0:	e03a      	b.n	8005e58 <_printf_i+0xa8>
 8005de2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005de6:	2b15      	cmp	r3, #21
 8005de8:	d8f6      	bhi.n	8005dd8 <_printf_i+0x28>
 8005dea:	a101      	add	r1, pc, #4	@ (adr r1, 8005df0 <_printf_i+0x40>)
 8005dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005df0:	08005e49 	.word	0x08005e49
 8005df4:	08005e5d 	.word	0x08005e5d
 8005df8:	08005dd9 	.word	0x08005dd9
 8005dfc:	08005dd9 	.word	0x08005dd9
 8005e00:	08005dd9 	.word	0x08005dd9
 8005e04:	08005dd9 	.word	0x08005dd9
 8005e08:	08005e5d 	.word	0x08005e5d
 8005e0c:	08005dd9 	.word	0x08005dd9
 8005e10:	08005dd9 	.word	0x08005dd9
 8005e14:	08005dd9 	.word	0x08005dd9
 8005e18:	08005dd9 	.word	0x08005dd9
 8005e1c:	08005f5f 	.word	0x08005f5f
 8005e20:	08005e87 	.word	0x08005e87
 8005e24:	08005f19 	.word	0x08005f19
 8005e28:	08005dd9 	.word	0x08005dd9
 8005e2c:	08005dd9 	.word	0x08005dd9
 8005e30:	08005f81 	.word	0x08005f81
 8005e34:	08005dd9 	.word	0x08005dd9
 8005e38:	08005e87 	.word	0x08005e87
 8005e3c:	08005dd9 	.word	0x08005dd9
 8005e40:	08005dd9 	.word	0x08005dd9
 8005e44:	08005f21 	.word	0x08005f21
 8005e48:	6833      	ldr	r3, [r6, #0]
 8005e4a:	1d1a      	adds	r2, r3, #4
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	6032      	str	r2, [r6, #0]
 8005e50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005e58:	2301      	movs	r3, #1
 8005e5a:	e09e      	b.n	8005f9a <_printf_i+0x1ea>
 8005e5c:	6833      	ldr	r3, [r6, #0]
 8005e5e:	6820      	ldr	r0, [r4, #0]
 8005e60:	1d19      	adds	r1, r3, #4
 8005e62:	6031      	str	r1, [r6, #0]
 8005e64:	0606      	lsls	r6, r0, #24
 8005e66:	d501      	bpl.n	8005e6c <_printf_i+0xbc>
 8005e68:	681d      	ldr	r5, [r3, #0]
 8005e6a:	e003      	b.n	8005e74 <_printf_i+0xc4>
 8005e6c:	0645      	lsls	r5, r0, #25
 8005e6e:	d5fb      	bpl.n	8005e68 <_printf_i+0xb8>
 8005e70:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005e74:	2d00      	cmp	r5, #0
 8005e76:	da03      	bge.n	8005e80 <_printf_i+0xd0>
 8005e78:	232d      	movs	r3, #45	@ 0x2d
 8005e7a:	426d      	negs	r5, r5
 8005e7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e80:	230a      	movs	r3, #10
 8005e82:	4859      	ldr	r0, [pc, #356]	@ (8005fe8 <_printf_i+0x238>)
 8005e84:	e011      	b.n	8005eaa <_printf_i+0xfa>
 8005e86:	6821      	ldr	r1, [r4, #0]
 8005e88:	6833      	ldr	r3, [r6, #0]
 8005e8a:	0608      	lsls	r0, r1, #24
 8005e8c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005e90:	d402      	bmi.n	8005e98 <_printf_i+0xe8>
 8005e92:	0649      	lsls	r1, r1, #25
 8005e94:	bf48      	it	mi
 8005e96:	b2ad      	uxthmi	r5, r5
 8005e98:	2f6f      	cmp	r7, #111	@ 0x6f
 8005e9a:	6033      	str	r3, [r6, #0]
 8005e9c:	bf14      	ite	ne
 8005e9e:	230a      	movne	r3, #10
 8005ea0:	2308      	moveq	r3, #8
 8005ea2:	4851      	ldr	r0, [pc, #324]	@ (8005fe8 <_printf_i+0x238>)
 8005ea4:	2100      	movs	r1, #0
 8005ea6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005eaa:	6866      	ldr	r6, [r4, #4]
 8005eac:	2e00      	cmp	r6, #0
 8005eae:	bfa8      	it	ge
 8005eb0:	6821      	ldrge	r1, [r4, #0]
 8005eb2:	60a6      	str	r6, [r4, #8]
 8005eb4:	bfa4      	itt	ge
 8005eb6:	f021 0104 	bicge.w	r1, r1, #4
 8005eba:	6021      	strge	r1, [r4, #0]
 8005ebc:	b90d      	cbnz	r5, 8005ec2 <_printf_i+0x112>
 8005ebe:	2e00      	cmp	r6, #0
 8005ec0:	d04b      	beq.n	8005f5a <_printf_i+0x1aa>
 8005ec2:	4616      	mov	r6, r2
 8005ec4:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ec8:	fb03 5711 	mls	r7, r3, r1, r5
 8005ecc:	5dc7      	ldrb	r7, [r0, r7]
 8005ece:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ed2:	462f      	mov	r7, r5
 8005ed4:	42bb      	cmp	r3, r7
 8005ed6:	460d      	mov	r5, r1
 8005ed8:	d9f4      	bls.n	8005ec4 <_printf_i+0x114>
 8005eda:	2b08      	cmp	r3, #8
 8005edc:	d10b      	bne.n	8005ef6 <_printf_i+0x146>
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	07df      	lsls	r7, r3, #31
 8005ee2:	d508      	bpl.n	8005ef6 <_printf_i+0x146>
 8005ee4:	6923      	ldr	r3, [r4, #16]
 8005ee6:	6861      	ldr	r1, [r4, #4]
 8005ee8:	4299      	cmp	r1, r3
 8005eea:	bfde      	ittt	le
 8005eec:	2330      	movle	r3, #48	@ 0x30
 8005eee:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005ef2:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005ef6:	1b92      	subs	r2, r2, r6
 8005ef8:	6122      	str	r2, [r4, #16]
 8005efa:	464b      	mov	r3, r9
 8005efc:	4621      	mov	r1, r4
 8005efe:	4640      	mov	r0, r8
 8005f00:	f8cd a000 	str.w	sl, [sp]
 8005f04:	aa03      	add	r2, sp, #12
 8005f06:	f7ff fee1 	bl	8005ccc <_printf_common>
 8005f0a:	3001      	adds	r0, #1
 8005f0c:	d14a      	bne.n	8005fa4 <_printf_i+0x1f4>
 8005f0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005f12:	b004      	add	sp, #16
 8005f14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f18:	6823      	ldr	r3, [r4, #0]
 8005f1a:	f043 0320 	orr.w	r3, r3, #32
 8005f1e:	6023      	str	r3, [r4, #0]
 8005f20:	2778      	movs	r7, #120	@ 0x78
 8005f22:	4832      	ldr	r0, [pc, #200]	@ (8005fec <_printf_i+0x23c>)
 8005f24:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005f28:	6823      	ldr	r3, [r4, #0]
 8005f2a:	6831      	ldr	r1, [r6, #0]
 8005f2c:	061f      	lsls	r7, r3, #24
 8005f2e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005f32:	d402      	bmi.n	8005f3a <_printf_i+0x18a>
 8005f34:	065f      	lsls	r7, r3, #25
 8005f36:	bf48      	it	mi
 8005f38:	b2ad      	uxthmi	r5, r5
 8005f3a:	6031      	str	r1, [r6, #0]
 8005f3c:	07d9      	lsls	r1, r3, #31
 8005f3e:	bf44      	itt	mi
 8005f40:	f043 0320 	orrmi.w	r3, r3, #32
 8005f44:	6023      	strmi	r3, [r4, #0]
 8005f46:	b11d      	cbz	r5, 8005f50 <_printf_i+0x1a0>
 8005f48:	2310      	movs	r3, #16
 8005f4a:	e7ab      	b.n	8005ea4 <_printf_i+0xf4>
 8005f4c:	4826      	ldr	r0, [pc, #152]	@ (8005fe8 <_printf_i+0x238>)
 8005f4e:	e7e9      	b.n	8005f24 <_printf_i+0x174>
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	f023 0320 	bic.w	r3, r3, #32
 8005f56:	6023      	str	r3, [r4, #0]
 8005f58:	e7f6      	b.n	8005f48 <_printf_i+0x198>
 8005f5a:	4616      	mov	r6, r2
 8005f5c:	e7bd      	b.n	8005eda <_printf_i+0x12a>
 8005f5e:	6833      	ldr	r3, [r6, #0]
 8005f60:	6825      	ldr	r5, [r4, #0]
 8005f62:	1d18      	adds	r0, r3, #4
 8005f64:	6961      	ldr	r1, [r4, #20]
 8005f66:	6030      	str	r0, [r6, #0]
 8005f68:	062e      	lsls	r6, r5, #24
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	d501      	bpl.n	8005f72 <_printf_i+0x1c2>
 8005f6e:	6019      	str	r1, [r3, #0]
 8005f70:	e002      	b.n	8005f78 <_printf_i+0x1c8>
 8005f72:	0668      	lsls	r0, r5, #25
 8005f74:	d5fb      	bpl.n	8005f6e <_printf_i+0x1be>
 8005f76:	8019      	strh	r1, [r3, #0]
 8005f78:	2300      	movs	r3, #0
 8005f7a:	4616      	mov	r6, r2
 8005f7c:	6123      	str	r3, [r4, #16]
 8005f7e:	e7bc      	b.n	8005efa <_printf_i+0x14a>
 8005f80:	6833      	ldr	r3, [r6, #0]
 8005f82:	2100      	movs	r1, #0
 8005f84:	1d1a      	adds	r2, r3, #4
 8005f86:	6032      	str	r2, [r6, #0]
 8005f88:	681e      	ldr	r6, [r3, #0]
 8005f8a:	6862      	ldr	r2, [r4, #4]
 8005f8c:	4630      	mov	r0, r6
 8005f8e:	f001 fb10 	bl	80075b2 <memchr>
 8005f92:	b108      	cbz	r0, 8005f98 <_printf_i+0x1e8>
 8005f94:	1b80      	subs	r0, r0, r6
 8005f96:	6060      	str	r0, [r4, #4]
 8005f98:	6863      	ldr	r3, [r4, #4]
 8005f9a:	6123      	str	r3, [r4, #16]
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005fa2:	e7aa      	b.n	8005efa <_printf_i+0x14a>
 8005fa4:	4632      	mov	r2, r6
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	4640      	mov	r0, r8
 8005faa:	6923      	ldr	r3, [r4, #16]
 8005fac:	47d0      	blx	sl
 8005fae:	3001      	adds	r0, #1
 8005fb0:	d0ad      	beq.n	8005f0e <_printf_i+0x15e>
 8005fb2:	6823      	ldr	r3, [r4, #0]
 8005fb4:	079b      	lsls	r3, r3, #30
 8005fb6:	d413      	bmi.n	8005fe0 <_printf_i+0x230>
 8005fb8:	68e0      	ldr	r0, [r4, #12]
 8005fba:	9b03      	ldr	r3, [sp, #12]
 8005fbc:	4298      	cmp	r0, r3
 8005fbe:	bfb8      	it	lt
 8005fc0:	4618      	movlt	r0, r3
 8005fc2:	e7a6      	b.n	8005f12 <_printf_i+0x162>
 8005fc4:	2301      	movs	r3, #1
 8005fc6:	4632      	mov	r2, r6
 8005fc8:	4649      	mov	r1, r9
 8005fca:	4640      	mov	r0, r8
 8005fcc:	47d0      	blx	sl
 8005fce:	3001      	adds	r0, #1
 8005fd0:	d09d      	beq.n	8005f0e <_printf_i+0x15e>
 8005fd2:	3501      	adds	r5, #1
 8005fd4:	68e3      	ldr	r3, [r4, #12]
 8005fd6:	9903      	ldr	r1, [sp, #12]
 8005fd8:	1a5b      	subs	r3, r3, r1
 8005fda:	42ab      	cmp	r3, r5
 8005fdc:	dcf2      	bgt.n	8005fc4 <_printf_i+0x214>
 8005fde:	e7eb      	b.n	8005fb8 <_printf_i+0x208>
 8005fe0:	2500      	movs	r5, #0
 8005fe2:	f104 0619 	add.w	r6, r4, #25
 8005fe6:	e7f5      	b.n	8005fd4 <_printf_i+0x224>
 8005fe8:	0800aeda 	.word	0x0800aeda
 8005fec:	0800aeeb 	.word	0x0800aeeb

08005ff0 <_scanf_float>:
 8005ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ff4:	b087      	sub	sp, #28
 8005ff6:	9303      	str	r3, [sp, #12]
 8005ff8:	688b      	ldr	r3, [r1, #8]
 8005ffa:	4617      	mov	r7, r2
 8005ffc:	1e5a      	subs	r2, r3, #1
 8005ffe:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006002:	bf82      	ittt	hi
 8006004:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006008:	eb03 0b05 	addhi.w	fp, r3, r5
 800600c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006010:	460a      	mov	r2, r1
 8006012:	f04f 0500 	mov.w	r5, #0
 8006016:	bf88      	it	hi
 8006018:	608b      	strhi	r3, [r1, #8]
 800601a:	680b      	ldr	r3, [r1, #0]
 800601c:	4680      	mov	r8, r0
 800601e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006022:	f842 3b1c 	str.w	r3, [r2], #28
 8006026:	460c      	mov	r4, r1
 8006028:	bf98      	it	ls
 800602a:	f04f 0b00 	movls.w	fp, #0
 800602e:	4616      	mov	r6, r2
 8006030:	46aa      	mov	sl, r5
 8006032:	46a9      	mov	r9, r5
 8006034:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006038:	9201      	str	r2, [sp, #4]
 800603a:	9502      	str	r5, [sp, #8]
 800603c:	68a2      	ldr	r2, [r4, #8]
 800603e:	b152      	cbz	r2, 8006056 <_scanf_float+0x66>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	2b4e      	cmp	r3, #78	@ 0x4e
 8006046:	d865      	bhi.n	8006114 <_scanf_float+0x124>
 8006048:	2b40      	cmp	r3, #64	@ 0x40
 800604a:	d83d      	bhi.n	80060c8 <_scanf_float+0xd8>
 800604c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006050:	b2c8      	uxtb	r0, r1
 8006052:	280e      	cmp	r0, #14
 8006054:	d93b      	bls.n	80060ce <_scanf_float+0xde>
 8006056:	f1b9 0f00 	cmp.w	r9, #0
 800605a:	d003      	beq.n	8006064 <_scanf_float+0x74>
 800605c:	6823      	ldr	r3, [r4, #0]
 800605e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006062:	6023      	str	r3, [r4, #0]
 8006064:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006068:	f1ba 0f01 	cmp.w	sl, #1
 800606c:	f200 8118 	bhi.w	80062a0 <_scanf_float+0x2b0>
 8006070:	9b01      	ldr	r3, [sp, #4]
 8006072:	429e      	cmp	r6, r3
 8006074:	f200 8109 	bhi.w	800628a <_scanf_float+0x29a>
 8006078:	2001      	movs	r0, #1
 800607a:	b007      	add	sp, #28
 800607c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006080:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006084:	2a0d      	cmp	r2, #13
 8006086:	d8e6      	bhi.n	8006056 <_scanf_float+0x66>
 8006088:	a101      	add	r1, pc, #4	@ (adr r1, 8006090 <_scanf_float+0xa0>)
 800608a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800608e:	bf00      	nop
 8006090:	080061d7 	.word	0x080061d7
 8006094:	08006057 	.word	0x08006057
 8006098:	08006057 	.word	0x08006057
 800609c:	08006057 	.word	0x08006057
 80060a0:	08006237 	.word	0x08006237
 80060a4:	0800620f 	.word	0x0800620f
 80060a8:	08006057 	.word	0x08006057
 80060ac:	08006057 	.word	0x08006057
 80060b0:	080061e5 	.word	0x080061e5
 80060b4:	08006057 	.word	0x08006057
 80060b8:	08006057 	.word	0x08006057
 80060bc:	08006057 	.word	0x08006057
 80060c0:	08006057 	.word	0x08006057
 80060c4:	0800619d 	.word	0x0800619d
 80060c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80060cc:	e7da      	b.n	8006084 <_scanf_float+0x94>
 80060ce:	290e      	cmp	r1, #14
 80060d0:	d8c1      	bhi.n	8006056 <_scanf_float+0x66>
 80060d2:	a001      	add	r0, pc, #4	@ (adr r0, 80060d8 <_scanf_float+0xe8>)
 80060d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80060d8:	0800618d 	.word	0x0800618d
 80060dc:	08006057 	.word	0x08006057
 80060e0:	0800618d 	.word	0x0800618d
 80060e4:	08006223 	.word	0x08006223
 80060e8:	08006057 	.word	0x08006057
 80060ec:	08006135 	.word	0x08006135
 80060f0:	08006173 	.word	0x08006173
 80060f4:	08006173 	.word	0x08006173
 80060f8:	08006173 	.word	0x08006173
 80060fc:	08006173 	.word	0x08006173
 8006100:	08006173 	.word	0x08006173
 8006104:	08006173 	.word	0x08006173
 8006108:	08006173 	.word	0x08006173
 800610c:	08006173 	.word	0x08006173
 8006110:	08006173 	.word	0x08006173
 8006114:	2b6e      	cmp	r3, #110	@ 0x6e
 8006116:	d809      	bhi.n	800612c <_scanf_float+0x13c>
 8006118:	2b60      	cmp	r3, #96	@ 0x60
 800611a:	d8b1      	bhi.n	8006080 <_scanf_float+0x90>
 800611c:	2b54      	cmp	r3, #84	@ 0x54
 800611e:	d07b      	beq.n	8006218 <_scanf_float+0x228>
 8006120:	2b59      	cmp	r3, #89	@ 0x59
 8006122:	d198      	bne.n	8006056 <_scanf_float+0x66>
 8006124:	2d07      	cmp	r5, #7
 8006126:	d196      	bne.n	8006056 <_scanf_float+0x66>
 8006128:	2508      	movs	r5, #8
 800612a:	e02c      	b.n	8006186 <_scanf_float+0x196>
 800612c:	2b74      	cmp	r3, #116	@ 0x74
 800612e:	d073      	beq.n	8006218 <_scanf_float+0x228>
 8006130:	2b79      	cmp	r3, #121	@ 0x79
 8006132:	e7f6      	b.n	8006122 <_scanf_float+0x132>
 8006134:	6821      	ldr	r1, [r4, #0]
 8006136:	05c8      	lsls	r0, r1, #23
 8006138:	d51b      	bpl.n	8006172 <_scanf_float+0x182>
 800613a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800613e:	6021      	str	r1, [r4, #0]
 8006140:	f109 0901 	add.w	r9, r9, #1
 8006144:	f1bb 0f00 	cmp.w	fp, #0
 8006148:	d003      	beq.n	8006152 <_scanf_float+0x162>
 800614a:	3201      	adds	r2, #1
 800614c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006150:	60a2      	str	r2, [r4, #8]
 8006152:	68a3      	ldr	r3, [r4, #8]
 8006154:	3b01      	subs	r3, #1
 8006156:	60a3      	str	r3, [r4, #8]
 8006158:	6923      	ldr	r3, [r4, #16]
 800615a:	3301      	adds	r3, #1
 800615c:	6123      	str	r3, [r4, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	3b01      	subs	r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	607b      	str	r3, [r7, #4]
 8006166:	f340 8087 	ble.w	8006278 <_scanf_float+0x288>
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	3301      	adds	r3, #1
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	e764      	b.n	800603c <_scanf_float+0x4c>
 8006172:	eb1a 0105 	adds.w	r1, sl, r5
 8006176:	f47f af6e 	bne.w	8006056 <_scanf_float+0x66>
 800617a:	460d      	mov	r5, r1
 800617c:	468a      	mov	sl, r1
 800617e:	6822      	ldr	r2, [r4, #0]
 8006180:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006184:	6022      	str	r2, [r4, #0]
 8006186:	f806 3b01 	strb.w	r3, [r6], #1
 800618a:	e7e2      	b.n	8006152 <_scanf_float+0x162>
 800618c:	6822      	ldr	r2, [r4, #0]
 800618e:	0610      	lsls	r0, r2, #24
 8006190:	f57f af61 	bpl.w	8006056 <_scanf_float+0x66>
 8006194:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006198:	6022      	str	r2, [r4, #0]
 800619a:	e7f4      	b.n	8006186 <_scanf_float+0x196>
 800619c:	f1ba 0f00 	cmp.w	sl, #0
 80061a0:	d10e      	bne.n	80061c0 <_scanf_float+0x1d0>
 80061a2:	f1b9 0f00 	cmp.w	r9, #0
 80061a6:	d10e      	bne.n	80061c6 <_scanf_float+0x1d6>
 80061a8:	6822      	ldr	r2, [r4, #0]
 80061aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80061b2:	d108      	bne.n	80061c6 <_scanf_float+0x1d6>
 80061b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80061b8:	f04f 0a01 	mov.w	sl, #1
 80061bc:	6022      	str	r2, [r4, #0]
 80061be:	e7e2      	b.n	8006186 <_scanf_float+0x196>
 80061c0:	f1ba 0f02 	cmp.w	sl, #2
 80061c4:	d055      	beq.n	8006272 <_scanf_float+0x282>
 80061c6:	2d01      	cmp	r5, #1
 80061c8:	d002      	beq.n	80061d0 <_scanf_float+0x1e0>
 80061ca:	2d04      	cmp	r5, #4
 80061cc:	f47f af43 	bne.w	8006056 <_scanf_float+0x66>
 80061d0:	3501      	adds	r5, #1
 80061d2:	b2ed      	uxtb	r5, r5
 80061d4:	e7d7      	b.n	8006186 <_scanf_float+0x196>
 80061d6:	f1ba 0f01 	cmp.w	sl, #1
 80061da:	f47f af3c 	bne.w	8006056 <_scanf_float+0x66>
 80061de:	f04f 0a02 	mov.w	sl, #2
 80061e2:	e7d0      	b.n	8006186 <_scanf_float+0x196>
 80061e4:	b97d      	cbnz	r5, 8006206 <_scanf_float+0x216>
 80061e6:	f1b9 0f00 	cmp.w	r9, #0
 80061ea:	f47f af37 	bne.w	800605c <_scanf_float+0x6c>
 80061ee:	6822      	ldr	r2, [r4, #0]
 80061f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80061f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80061f8:	f040 8103 	bne.w	8006402 <_scanf_float+0x412>
 80061fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006200:	2501      	movs	r5, #1
 8006202:	6022      	str	r2, [r4, #0]
 8006204:	e7bf      	b.n	8006186 <_scanf_float+0x196>
 8006206:	2d03      	cmp	r5, #3
 8006208:	d0e2      	beq.n	80061d0 <_scanf_float+0x1e0>
 800620a:	2d05      	cmp	r5, #5
 800620c:	e7de      	b.n	80061cc <_scanf_float+0x1dc>
 800620e:	2d02      	cmp	r5, #2
 8006210:	f47f af21 	bne.w	8006056 <_scanf_float+0x66>
 8006214:	2503      	movs	r5, #3
 8006216:	e7b6      	b.n	8006186 <_scanf_float+0x196>
 8006218:	2d06      	cmp	r5, #6
 800621a:	f47f af1c 	bne.w	8006056 <_scanf_float+0x66>
 800621e:	2507      	movs	r5, #7
 8006220:	e7b1      	b.n	8006186 <_scanf_float+0x196>
 8006222:	6822      	ldr	r2, [r4, #0]
 8006224:	0591      	lsls	r1, r2, #22
 8006226:	f57f af16 	bpl.w	8006056 <_scanf_float+0x66>
 800622a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800622e:	6022      	str	r2, [r4, #0]
 8006230:	f8cd 9008 	str.w	r9, [sp, #8]
 8006234:	e7a7      	b.n	8006186 <_scanf_float+0x196>
 8006236:	6822      	ldr	r2, [r4, #0]
 8006238:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800623c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006240:	d006      	beq.n	8006250 <_scanf_float+0x260>
 8006242:	0550      	lsls	r0, r2, #21
 8006244:	f57f af07 	bpl.w	8006056 <_scanf_float+0x66>
 8006248:	f1b9 0f00 	cmp.w	r9, #0
 800624c:	f000 80d9 	beq.w	8006402 <_scanf_float+0x412>
 8006250:	0591      	lsls	r1, r2, #22
 8006252:	bf58      	it	pl
 8006254:	9902      	ldrpl	r1, [sp, #8]
 8006256:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800625a:	bf58      	it	pl
 800625c:	eba9 0101 	subpl.w	r1, r9, r1
 8006260:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006264:	f04f 0900 	mov.w	r9, #0
 8006268:	bf58      	it	pl
 800626a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800626e:	6022      	str	r2, [r4, #0]
 8006270:	e789      	b.n	8006186 <_scanf_float+0x196>
 8006272:	f04f 0a03 	mov.w	sl, #3
 8006276:	e786      	b.n	8006186 <_scanf_float+0x196>
 8006278:	4639      	mov	r1, r7
 800627a:	4640      	mov	r0, r8
 800627c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006280:	4798      	blx	r3
 8006282:	2800      	cmp	r0, #0
 8006284:	f43f aeda 	beq.w	800603c <_scanf_float+0x4c>
 8006288:	e6e5      	b.n	8006056 <_scanf_float+0x66>
 800628a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800628e:	463a      	mov	r2, r7
 8006290:	4640      	mov	r0, r8
 8006292:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006296:	4798      	blx	r3
 8006298:	6923      	ldr	r3, [r4, #16]
 800629a:	3b01      	subs	r3, #1
 800629c:	6123      	str	r3, [r4, #16]
 800629e:	e6e7      	b.n	8006070 <_scanf_float+0x80>
 80062a0:	1e6b      	subs	r3, r5, #1
 80062a2:	2b06      	cmp	r3, #6
 80062a4:	d824      	bhi.n	80062f0 <_scanf_float+0x300>
 80062a6:	2d02      	cmp	r5, #2
 80062a8:	d836      	bhi.n	8006318 <_scanf_float+0x328>
 80062aa:	9b01      	ldr	r3, [sp, #4]
 80062ac:	429e      	cmp	r6, r3
 80062ae:	f67f aee3 	bls.w	8006078 <_scanf_float+0x88>
 80062b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062b6:	463a      	mov	r2, r7
 80062b8:	4640      	mov	r0, r8
 80062ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80062be:	4798      	blx	r3
 80062c0:	6923      	ldr	r3, [r4, #16]
 80062c2:	3b01      	subs	r3, #1
 80062c4:	6123      	str	r3, [r4, #16]
 80062c6:	e7f0      	b.n	80062aa <_scanf_float+0x2ba>
 80062c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80062cc:	463a      	mov	r2, r7
 80062ce:	4640      	mov	r0, r8
 80062d0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80062d4:	4798      	blx	r3
 80062d6:	6923      	ldr	r3, [r4, #16]
 80062d8:	3b01      	subs	r3, #1
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80062e0:	fa5f fa8a 	uxtb.w	sl, sl
 80062e4:	f1ba 0f02 	cmp.w	sl, #2
 80062e8:	d1ee      	bne.n	80062c8 <_scanf_float+0x2d8>
 80062ea:	3d03      	subs	r5, #3
 80062ec:	b2ed      	uxtb	r5, r5
 80062ee:	1b76      	subs	r6, r6, r5
 80062f0:	6823      	ldr	r3, [r4, #0]
 80062f2:	05da      	lsls	r2, r3, #23
 80062f4:	d530      	bpl.n	8006358 <_scanf_float+0x368>
 80062f6:	055b      	lsls	r3, r3, #21
 80062f8:	d511      	bpl.n	800631e <_scanf_float+0x32e>
 80062fa:	9b01      	ldr	r3, [sp, #4]
 80062fc:	429e      	cmp	r6, r3
 80062fe:	f67f aebb 	bls.w	8006078 <_scanf_float+0x88>
 8006302:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006306:	463a      	mov	r2, r7
 8006308:	4640      	mov	r0, r8
 800630a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800630e:	4798      	blx	r3
 8006310:	6923      	ldr	r3, [r4, #16]
 8006312:	3b01      	subs	r3, #1
 8006314:	6123      	str	r3, [r4, #16]
 8006316:	e7f0      	b.n	80062fa <_scanf_float+0x30a>
 8006318:	46aa      	mov	sl, r5
 800631a:	46b3      	mov	fp, r6
 800631c:	e7de      	b.n	80062dc <_scanf_float+0x2ec>
 800631e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006322:	6923      	ldr	r3, [r4, #16]
 8006324:	2965      	cmp	r1, #101	@ 0x65
 8006326:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800632a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800632e:	6123      	str	r3, [r4, #16]
 8006330:	d00c      	beq.n	800634c <_scanf_float+0x35c>
 8006332:	2945      	cmp	r1, #69	@ 0x45
 8006334:	d00a      	beq.n	800634c <_scanf_float+0x35c>
 8006336:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800633a:	463a      	mov	r2, r7
 800633c:	4640      	mov	r0, r8
 800633e:	4798      	blx	r3
 8006340:	6923      	ldr	r3, [r4, #16]
 8006342:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006346:	3b01      	subs	r3, #1
 8006348:	1eb5      	subs	r5, r6, #2
 800634a:	6123      	str	r3, [r4, #16]
 800634c:	463a      	mov	r2, r7
 800634e:	4640      	mov	r0, r8
 8006350:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006354:	4798      	blx	r3
 8006356:	462e      	mov	r6, r5
 8006358:	6822      	ldr	r2, [r4, #0]
 800635a:	f012 0210 	ands.w	r2, r2, #16
 800635e:	d001      	beq.n	8006364 <_scanf_float+0x374>
 8006360:	2000      	movs	r0, #0
 8006362:	e68a      	b.n	800607a <_scanf_float+0x8a>
 8006364:	7032      	strb	r2, [r6, #0]
 8006366:	6823      	ldr	r3, [r4, #0]
 8006368:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800636c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006370:	d11c      	bne.n	80063ac <_scanf_float+0x3bc>
 8006372:	9b02      	ldr	r3, [sp, #8]
 8006374:	454b      	cmp	r3, r9
 8006376:	eba3 0209 	sub.w	r2, r3, r9
 800637a:	d123      	bne.n	80063c4 <_scanf_float+0x3d4>
 800637c:	2200      	movs	r2, #0
 800637e:	4640      	mov	r0, r8
 8006380:	9901      	ldr	r1, [sp, #4]
 8006382:	f000 ff75 	bl	8007270 <_strtod_r>
 8006386:	9b03      	ldr	r3, [sp, #12]
 8006388:	6825      	ldr	r5, [r4, #0]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f015 0f02 	tst.w	r5, #2
 8006390:	4606      	mov	r6, r0
 8006392:	460f      	mov	r7, r1
 8006394:	f103 0204 	add.w	r2, r3, #4
 8006398:	d01f      	beq.n	80063da <_scanf_float+0x3ea>
 800639a:	9903      	ldr	r1, [sp, #12]
 800639c:	600a      	str	r2, [r1, #0]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	e9c3 6700 	strd	r6, r7, [r3]
 80063a4:	68e3      	ldr	r3, [r4, #12]
 80063a6:	3301      	adds	r3, #1
 80063a8:	60e3      	str	r3, [r4, #12]
 80063aa:	e7d9      	b.n	8006360 <_scanf_float+0x370>
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d0e4      	beq.n	800637c <_scanf_float+0x38c>
 80063b2:	9905      	ldr	r1, [sp, #20]
 80063b4:	230a      	movs	r3, #10
 80063b6:	4640      	mov	r0, r8
 80063b8:	3101      	adds	r1, #1
 80063ba:	f000 ffd9 	bl	8007370 <_strtol_r>
 80063be:	9b04      	ldr	r3, [sp, #16]
 80063c0:	9e05      	ldr	r6, [sp, #20]
 80063c2:	1ac2      	subs	r2, r0, r3
 80063c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80063c8:	429e      	cmp	r6, r3
 80063ca:	bf28      	it	cs
 80063cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80063d0:	4630      	mov	r0, r6
 80063d2:	490d      	ldr	r1, [pc, #52]	@ (8006408 <_scanf_float+0x418>)
 80063d4:	f000 f81c 	bl	8006410 <siprintf>
 80063d8:	e7d0      	b.n	800637c <_scanf_float+0x38c>
 80063da:	076d      	lsls	r5, r5, #29
 80063dc:	d4dd      	bmi.n	800639a <_scanf_float+0x3aa>
 80063de:	9d03      	ldr	r5, [sp, #12]
 80063e0:	602a      	str	r2, [r5, #0]
 80063e2:	681d      	ldr	r5, [r3, #0]
 80063e4:	4602      	mov	r2, r0
 80063e6:	460b      	mov	r3, r1
 80063e8:	f7fa fb10 	bl	8000a0c <__aeabi_dcmpun>
 80063ec:	b120      	cbz	r0, 80063f8 <_scanf_float+0x408>
 80063ee:	4807      	ldr	r0, [pc, #28]	@ (800640c <_scanf_float+0x41c>)
 80063f0:	f001 f90a 	bl	8007608 <nanf>
 80063f4:	6028      	str	r0, [r5, #0]
 80063f6:	e7d5      	b.n	80063a4 <_scanf_float+0x3b4>
 80063f8:	4630      	mov	r0, r6
 80063fa:	4639      	mov	r1, r7
 80063fc:	f7fa fb64 	bl	8000ac8 <__aeabi_d2f>
 8006400:	e7f8      	b.n	80063f4 <_scanf_float+0x404>
 8006402:	f04f 0900 	mov.w	r9, #0
 8006406:	e62d      	b.n	8006064 <_scanf_float+0x74>
 8006408:	0800aefc 	.word	0x0800aefc
 800640c:	0800b30b 	.word	0x0800b30b

08006410 <siprintf>:
 8006410:	b40e      	push	{r1, r2, r3}
 8006412:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006416:	b500      	push	{lr}
 8006418:	b09c      	sub	sp, #112	@ 0x70
 800641a:	ab1d      	add	r3, sp, #116	@ 0x74
 800641c:	9002      	str	r0, [sp, #8]
 800641e:	9006      	str	r0, [sp, #24]
 8006420:	9107      	str	r1, [sp, #28]
 8006422:	9104      	str	r1, [sp, #16]
 8006424:	4808      	ldr	r0, [pc, #32]	@ (8006448 <siprintf+0x38>)
 8006426:	4909      	ldr	r1, [pc, #36]	@ (800644c <siprintf+0x3c>)
 8006428:	f853 2b04 	ldr.w	r2, [r3], #4
 800642c:	9105      	str	r1, [sp, #20]
 800642e:	6800      	ldr	r0, [r0, #0]
 8006430:	a902      	add	r1, sp, #8
 8006432:	9301      	str	r3, [sp, #4]
 8006434:	f002 fb18 	bl	8008a68 <_svfiprintf_r>
 8006438:	2200      	movs	r2, #0
 800643a:	9b02      	ldr	r3, [sp, #8]
 800643c:	701a      	strb	r2, [r3, #0]
 800643e:	b01c      	add	sp, #112	@ 0x70
 8006440:	f85d eb04 	ldr.w	lr, [sp], #4
 8006444:	b003      	add	sp, #12
 8006446:	4770      	bx	lr
 8006448:	200001ac 	.word	0x200001ac
 800644c:	ffff0208 	.word	0xffff0208

08006450 <siscanf>:
 8006450:	b40e      	push	{r1, r2, r3}
 8006452:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8006456:	b530      	push	{r4, r5, lr}
 8006458:	b09c      	sub	sp, #112	@ 0x70
 800645a:	ac1f      	add	r4, sp, #124	@ 0x7c
 800645c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006460:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006464:	9002      	str	r0, [sp, #8]
 8006466:	9006      	str	r0, [sp, #24]
 8006468:	f7f9 fe72 	bl	8000150 <strlen>
 800646c:	4b0b      	ldr	r3, [pc, #44]	@ (800649c <siscanf+0x4c>)
 800646e:	9003      	str	r0, [sp, #12]
 8006470:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006472:	2300      	movs	r3, #0
 8006474:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006476:	9314      	str	r3, [sp, #80]	@ 0x50
 8006478:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800647c:	9007      	str	r0, [sp, #28]
 800647e:	4808      	ldr	r0, [pc, #32]	@ (80064a0 <siscanf+0x50>)
 8006480:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006484:	462a      	mov	r2, r5
 8006486:	4623      	mov	r3, r4
 8006488:	a902      	add	r1, sp, #8
 800648a:	6800      	ldr	r0, [r0, #0]
 800648c:	9401      	str	r4, [sp, #4]
 800648e:	f002 fc3f 	bl	8008d10 <__ssvfiscanf_r>
 8006492:	b01c      	add	sp, #112	@ 0x70
 8006494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006498:	b003      	add	sp, #12
 800649a:	4770      	bx	lr
 800649c:	080064c7 	.word	0x080064c7
 80064a0:	200001ac 	.word	0x200001ac

080064a4 <__sread>:
 80064a4:	b510      	push	{r4, lr}
 80064a6:	460c      	mov	r4, r1
 80064a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064ac:	f001 f830 	bl	8007510 <_read_r>
 80064b0:	2800      	cmp	r0, #0
 80064b2:	bfab      	itete	ge
 80064b4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064b6:	89a3      	ldrhlt	r3, [r4, #12]
 80064b8:	181b      	addge	r3, r3, r0
 80064ba:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064be:	bfac      	ite	ge
 80064c0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064c2:	81a3      	strhlt	r3, [r4, #12]
 80064c4:	bd10      	pop	{r4, pc}

080064c6 <__seofread>:
 80064c6:	2000      	movs	r0, #0
 80064c8:	4770      	bx	lr

080064ca <__swrite>:
 80064ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064ce:	461f      	mov	r7, r3
 80064d0:	898b      	ldrh	r3, [r1, #12]
 80064d2:	4605      	mov	r5, r0
 80064d4:	05db      	lsls	r3, r3, #23
 80064d6:	460c      	mov	r4, r1
 80064d8:	4616      	mov	r6, r2
 80064da:	d505      	bpl.n	80064e8 <__swrite+0x1e>
 80064dc:	2302      	movs	r3, #2
 80064de:	2200      	movs	r2, #0
 80064e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e4:	f001 f802 	bl	80074ec <_lseek_r>
 80064e8:	89a3      	ldrh	r3, [r4, #12]
 80064ea:	4632      	mov	r2, r6
 80064ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	4628      	mov	r0, r5
 80064f4:	463b      	mov	r3, r7
 80064f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80064fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80064fe:	f001 b819 	b.w	8007534 <_write_r>

08006502 <__sseek>:
 8006502:	b510      	push	{r4, lr}
 8006504:	460c      	mov	r4, r1
 8006506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800650a:	f000 ffef 	bl	80074ec <_lseek_r>
 800650e:	1c43      	adds	r3, r0, #1
 8006510:	89a3      	ldrh	r3, [r4, #12]
 8006512:	bf15      	itete	ne
 8006514:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800651a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800651e:	81a3      	strheq	r3, [r4, #12]
 8006520:	bf18      	it	ne
 8006522:	81a3      	strhne	r3, [r4, #12]
 8006524:	bd10      	pop	{r4, pc}

08006526 <__sclose>:
 8006526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800652a:	f000 bfcf 	b.w	80074cc <_close_r>
	...

08006530 <std>:
 8006530:	2300      	movs	r3, #0
 8006532:	b510      	push	{r4, lr}
 8006534:	4604      	mov	r4, r0
 8006536:	e9c0 3300 	strd	r3, r3, [r0]
 800653a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800653e:	6083      	str	r3, [r0, #8]
 8006540:	8181      	strh	r1, [r0, #12]
 8006542:	6643      	str	r3, [r0, #100]	@ 0x64
 8006544:	81c2      	strh	r2, [r0, #14]
 8006546:	6183      	str	r3, [r0, #24]
 8006548:	4619      	mov	r1, r3
 800654a:	2208      	movs	r2, #8
 800654c:	305c      	adds	r0, #92	@ 0x5c
 800654e:	f000 ffb1 	bl	80074b4 <memset>
 8006552:	4b0d      	ldr	r3, [pc, #52]	@ (8006588 <std+0x58>)
 8006554:	6224      	str	r4, [r4, #32]
 8006556:	6263      	str	r3, [r4, #36]	@ 0x24
 8006558:	4b0c      	ldr	r3, [pc, #48]	@ (800658c <std+0x5c>)
 800655a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800655c:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <std+0x60>)
 800655e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006560:	4b0c      	ldr	r3, [pc, #48]	@ (8006594 <std+0x64>)
 8006562:	6323      	str	r3, [r4, #48]	@ 0x30
 8006564:	4b0c      	ldr	r3, [pc, #48]	@ (8006598 <std+0x68>)
 8006566:	429c      	cmp	r4, r3
 8006568:	d006      	beq.n	8006578 <std+0x48>
 800656a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800656e:	4294      	cmp	r4, r2
 8006570:	d002      	beq.n	8006578 <std+0x48>
 8006572:	33d0      	adds	r3, #208	@ 0xd0
 8006574:	429c      	cmp	r4, r3
 8006576:	d105      	bne.n	8006584 <std+0x54>
 8006578:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800657c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006580:	f001 b814 	b.w	80075ac <__retarget_lock_init_recursive>
 8006584:	bd10      	pop	{r4, pc}
 8006586:	bf00      	nop
 8006588:	080064a5 	.word	0x080064a5
 800658c:	080064cb 	.word	0x080064cb
 8006590:	08006503 	.word	0x08006503
 8006594:	08006527 	.word	0x08006527
 8006598:	20000ad0 	.word	0x20000ad0

0800659c <stdio_exit_handler>:
 800659c:	4a02      	ldr	r2, [pc, #8]	@ (80065a8 <stdio_exit_handler+0xc>)
 800659e:	4903      	ldr	r1, [pc, #12]	@ (80065ac <stdio_exit_handler+0x10>)
 80065a0:	4803      	ldr	r0, [pc, #12]	@ (80065b0 <stdio_exit_handler+0x14>)
 80065a2:	f000 bee7 	b.w	8007374 <_fwalk_sglue>
 80065a6:	bf00      	nop
 80065a8:	20000034 	.word	0x20000034
 80065ac:	080097f9 	.word	0x080097f9
 80065b0:	200001b0 	.word	0x200001b0

080065b4 <cleanup_stdio>:
 80065b4:	6841      	ldr	r1, [r0, #4]
 80065b6:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <cleanup_stdio+0x34>)
 80065b8:	b510      	push	{r4, lr}
 80065ba:	4299      	cmp	r1, r3
 80065bc:	4604      	mov	r4, r0
 80065be:	d001      	beq.n	80065c4 <cleanup_stdio+0x10>
 80065c0:	f003 f91a 	bl	80097f8 <_fflush_r>
 80065c4:	68a1      	ldr	r1, [r4, #8]
 80065c6:	4b09      	ldr	r3, [pc, #36]	@ (80065ec <cleanup_stdio+0x38>)
 80065c8:	4299      	cmp	r1, r3
 80065ca:	d002      	beq.n	80065d2 <cleanup_stdio+0x1e>
 80065cc:	4620      	mov	r0, r4
 80065ce:	f003 f913 	bl	80097f8 <_fflush_r>
 80065d2:	68e1      	ldr	r1, [r4, #12]
 80065d4:	4b06      	ldr	r3, [pc, #24]	@ (80065f0 <cleanup_stdio+0x3c>)
 80065d6:	4299      	cmp	r1, r3
 80065d8:	d004      	beq.n	80065e4 <cleanup_stdio+0x30>
 80065da:	4620      	mov	r0, r4
 80065dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065e0:	f003 b90a 	b.w	80097f8 <_fflush_r>
 80065e4:	bd10      	pop	{r4, pc}
 80065e6:	bf00      	nop
 80065e8:	20000ad0 	.word	0x20000ad0
 80065ec:	20000b38 	.word	0x20000b38
 80065f0:	20000ba0 	.word	0x20000ba0

080065f4 <global_stdio_init.part.0>:
 80065f4:	b510      	push	{r4, lr}
 80065f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006624 <global_stdio_init.part.0+0x30>)
 80065f8:	4c0b      	ldr	r4, [pc, #44]	@ (8006628 <global_stdio_init.part.0+0x34>)
 80065fa:	4a0c      	ldr	r2, [pc, #48]	@ (800662c <global_stdio_init.part.0+0x38>)
 80065fc:	4620      	mov	r0, r4
 80065fe:	601a      	str	r2, [r3, #0]
 8006600:	2104      	movs	r1, #4
 8006602:	2200      	movs	r2, #0
 8006604:	f7ff ff94 	bl	8006530 <std>
 8006608:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800660c:	2201      	movs	r2, #1
 800660e:	2109      	movs	r1, #9
 8006610:	f7ff ff8e 	bl	8006530 <std>
 8006614:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006618:	2202      	movs	r2, #2
 800661a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800661e:	2112      	movs	r1, #18
 8006620:	f7ff bf86 	b.w	8006530 <std>
 8006624:	20000c08 	.word	0x20000c08
 8006628:	20000ad0 	.word	0x20000ad0
 800662c:	0800659d 	.word	0x0800659d

08006630 <__sfp_lock_acquire>:
 8006630:	4801      	ldr	r0, [pc, #4]	@ (8006638 <__sfp_lock_acquire+0x8>)
 8006632:	f000 bfbc 	b.w	80075ae <__retarget_lock_acquire_recursive>
 8006636:	bf00      	nop
 8006638:	20000c11 	.word	0x20000c11

0800663c <__sfp_lock_release>:
 800663c:	4801      	ldr	r0, [pc, #4]	@ (8006644 <__sfp_lock_release+0x8>)
 800663e:	f000 bfb7 	b.w	80075b0 <__retarget_lock_release_recursive>
 8006642:	bf00      	nop
 8006644:	20000c11 	.word	0x20000c11

08006648 <__sinit>:
 8006648:	b510      	push	{r4, lr}
 800664a:	4604      	mov	r4, r0
 800664c:	f7ff fff0 	bl	8006630 <__sfp_lock_acquire>
 8006650:	6a23      	ldr	r3, [r4, #32]
 8006652:	b11b      	cbz	r3, 800665c <__sinit+0x14>
 8006654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006658:	f7ff bff0 	b.w	800663c <__sfp_lock_release>
 800665c:	4b04      	ldr	r3, [pc, #16]	@ (8006670 <__sinit+0x28>)
 800665e:	6223      	str	r3, [r4, #32]
 8006660:	4b04      	ldr	r3, [pc, #16]	@ (8006674 <__sinit+0x2c>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f5      	bne.n	8006654 <__sinit+0xc>
 8006668:	f7ff ffc4 	bl	80065f4 <global_stdio_init.part.0>
 800666c:	e7f2      	b.n	8006654 <__sinit+0xc>
 800666e:	bf00      	nop
 8006670:	080065b5 	.word	0x080065b5
 8006674:	20000c08 	.word	0x20000c08

08006678 <sulp>:
 8006678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800667c:	460f      	mov	r7, r1
 800667e:	4690      	mov	r8, r2
 8006680:	f003 fc60 	bl	8009f44 <__ulp>
 8006684:	4604      	mov	r4, r0
 8006686:	460d      	mov	r5, r1
 8006688:	f1b8 0f00 	cmp.w	r8, #0
 800668c:	d011      	beq.n	80066b2 <sulp+0x3a>
 800668e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006692:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006696:	2b00      	cmp	r3, #0
 8006698:	dd0b      	ble.n	80066b2 <sulp+0x3a>
 800669a:	2400      	movs	r4, #0
 800669c:	051b      	lsls	r3, r3, #20
 800669e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80066a2:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80066a6:	4622      	mov	r2, r4
 80066a8:	462b      	mov	r3, r5
 80066aa:	f7f9 ff15 	bl	80004d8 <__aeabi_dmul>
 80066ae:	4604      	mov	r4, r0
 80066b0:	460d      	mov	r5, r1
 80066b2:	4620      	mov	r0, r4
 80066b4:	4629      	mov	r1, r5
 80066b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ba:	0000      	movs	r0, r0
 80066bc:	0000      	movs	r0, r0
	...

080066c0 <_strtod_l>:
 80066c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066c4:	b09f      	sub	sp, #124	@ 0x7c
 80066c6:	9217      	str	r2, [sp, #92]	@ 0x5c
 80066c8:	2200      	movs	r2, #0
 80066ca:	460c      	mov	r4, r1
 80066cc:	921a      	str	r2, [sp, #104]	@ 0x68
 80066ce:	f04f 0a00 	mov.w	sl, #0
 80066d2:	f04f 0b00 	mov.w	fp, #0
 80066d6:	460a      	mov	r2, r1
 80066d8:	9005      	str	r0, [sp, #20]
 80066da:	9219      	str	r2, [sp, #100]	@ 0x64
 80066dc:	7811      	ldrb	r1, [r2, #0]
 80066de:	292b      	cmp	r1, #43	@ 0x2b
 80066e0:	d048      	beq.n	8006774 <_strtod_l+0xb4>
 80066e2:	d836      	bhi.n	8006752 <_strtod_l+0x92>
 80066e4:	290d      	cmp	r1, #13
 80066e6:	d830      	bhi.n	800674a <_strtod_l+0x8a>
 80066e8:	2908      	cmp	r1, #8
 80066ea:	d830      	bhi.n	800674e <_strtod_l+0x8e>
 80066ec:	2900      	cmp	r1, #0
 80066ee:	d039      	beq.n	8006764 <_strtod_l+0xa4>
 80066f0:	2200      	movs	r2, #0
 80066f2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80066f4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80066f6:	782a      	ldrb	r2, [r5, #0]
 80066f8:	2a30      	cmp	r2, #48	@ 0x30
 80066fa:	f040 80b1 	bne.w	8006860 <_strtod_l+0x1a0>
 80066fe:	786a      	ldrb	r2, [r5, #1]
 8006700:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006704:	2a58      	cmp	r2, #88	@ 0x58
 8006706:	d16c      	bne.n	80067e2 <_strtod_l+0x122>
 8006708:	9302      	str	r3, [sp, #8]
 800670a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800670c:	4a8e      	ldr	r2, [pc, #568]	@ (8006948 <_strtod_l+0x288>)
 800670e:	9301      	str	r3, [sp, #4]
 8006710:	ab1a      	add	r3, sp, #104	@ 0x68
 8006712:	9300      	str	r3, [sp, #0]
 8006714:	9805      	ldr	r0, [sp, #20]
 8006716:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006718:	a919      	add	r1, sp, #100	@ 0x64
 800671a:	f001 fe79 	bl	8008410 <__gethex>
 800671e:	f010 060f 	ands.w	r6, r0, #15
 8006722:	4604      	mov	r4, r0
 8006724:	d005      	beq.n	8006732 <_strtod_l+0x72>
 8006726:	2e06      	cmp	r6, #6
 8006728:	d126      	bne.n	8006778 <_strtod_l+0xb8>
 800672a:	2300      	movs	r3, #0
 800672c:	3501      	adds	r5, #1
 800672e:	9519      	str	r5, [sp, #100]	@ 0x64
 8006730:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006732:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006734:	2b00      	cmp	r3, #0
 8006736:	f040 8584 	bne.w	8007242 <_strtod_l+0xb82>
 800673a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800673c:	b1bb      	cbz	r3, 800676e <_strtod_l+0xae>
 800673e:	4650      	mov	r0, sl
 8006740:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8006744:	b01f      	add	sp, #124	@ 0x7c
 8006746:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674a:	2920      	cmp	r1, #32
 800674c:	d1d0      	bne.n	80066f0 <_strtod_l+0x30>
 800674e:	3201      	adds	r2, #1
 8006750:	e7c3      	b.n	80066da <_strtod_l+0x1a>
 8006752:	292d      	cmp	r1, #45	@ 0x2d
 8006754:	d1cc      	bne.n	80066f0 <_strtod_l+0x30>
 8006756:	2101      	movs	r1, #1
 8006758:	910b      	str	r1, [sp, #44]	@ 0x2c
 800675a:	1c51      	adds	r1, r2, #1
 800675c:	9119      	str	r1, [sp, #100]	@ 0x64
 800675e:	7852      	ldrb	r2, [r2, #1]
 8006760:	2a00      	cmp	r2, #0
 8006762:	d1c7      	bne.n	80066f4 <_strtod_l+0x34>
 8006764:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006766:	9419      	str	r4, [sp, #100]	@ 0x64
 8006768:	2b00      	cmp	r3, #0
 800676a:	f040 8568 	bne.w	800723e <_strtod_l+0xb7e>
 800676e:	4650      	mov	r0, sl
 8006770:	4659      	mov	r1, fp
 8006772:	e7e7      	b.n	8006744 <_strtod_l+0x84>
 8006774:	2100      	movs	r1, #0
 8006776:	e7ef      	b.n	8006758 <_strtod_l+0x98>
 8006778:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800677a:	b13a      	cbz	r2, 800678c <_strtod_l+0xcc>
 800677c:	2135      	movs	r1, #53	@ 0x35
 800677e:	a81c      	add	r0, sp, #112	@ 0x70
 8006780:	f003 fcd0 	bl	800a124 <__copybits>
 8006784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006786:	9805      	ldr	r0, [sp, #20]
 8006788:	f003 f8aa 	bl	80098e0 <_Bfree>
 800678c:	3e01      	subs	r6, #1
 800678e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006790:	2e04      	cmp	r6, #4
 8006792:	d806      	bhi.n	80067a2 <_strtod_l+0xe2>
 8006794:	e8df f006 	tbb	[pc, r6]
 8006798:	201d0314 	.word	0x201d0314
 800679c:	14          	.byte	0x14
 800679d:	00          	.byte	0x00
 800679e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80067a2:	05e1      	lsls	r1, r4, #23
 80067a4:	bf48      	it	mi
 80067a6:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80067aa:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80067ae:	0d1b      	lsrs	r3, r3, #20
 80067b0:	051b      	lsls	r3, r3, #20
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1bd      	bne.n	8006732 <_strtod_l+0x72>
 80067b6:	f000 fecf 	bl	8007558 <__errno>
 80067ba:	2322      	movs	r3, #34	@ 0x22
 80067bc:	6003      	str	r3, [r0, #0]
 80067be:	e7b8      	b.n	8006732 <_strtod_l+0x72>
 80067c0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80067c4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80067c8:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80067cc:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80067d0:	e7e7      	b.n	80067a2 <_strtod_l+0xe2>
 80067d2:	f8df b178 	ldr.w	fp, [pc, #376]	@ 800694c <_strtod_l+0x28c>
 80067d6:	e7e4      	b.n	80067a2 <_strtod_l+0xe2>
 80067d8:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80067dc:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80067e0:	e7df      	b.n	80067a2 <_strtod_l+0xe2>
 80067e2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067e4:	1c5a      	adds	r2, r3, #1
 80067e6:	9219      	str	r2, [sp, #100]	@ 0x64
 80067e8:	785b      	ldrb	r3, [r3, #1]
 80067ea:	2b30      	cmp	r3, #48	@ 0x30
 80067ec:	d0f9      	beq.n	80067e2 <_strtod_l+0x122>
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d09f      	beq.n	8006732 <_strtod_l+0x72>
 80067f2:	2301      	movs	r3, #1
 80067f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80067f8:	220a      	movs	r2, #10
 80067fa:	930c      	str	r3, [sp, #48]	@ 0x30
 80067fc:	2300      	movs	r3, #0
 80067fe:	461f      	mov	r7, r3
 8006800:	9308      	str	r3, [sp, #32]
 8006802:	930a      	str	r3, [sp, #40]	@ 0x28
 8006804:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006806:	7805      	ldrb	r5, [r0, #0]
 8006808:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800680c:	b2d9      	uxtb	r1, r3
 800680e:	2909      	cmp	r1, #9
 8006810:	d928      	bls.n	8006864 <_strtod_l+0x1a4>
 8006812:	2201      	movs	r2, #1
 8006814:	494e      	ldr	r1, [pc, #312]	@ (8006950 <_strtod_l+0x290>)
 8006816:	f000 fe3b 	bl	8007490 <strncmp>
 800681a:	2800      	cmp	r0, #0
 800681c:	d032      	beq.n	8006884 <_strtod_l+0x1c4>
 800681e:	2000      	movs	r0, #0
 8006820:	462a      	mov	r2, r5
 8006822:	4681      	mov	r9, r0
 8006824:	463d      	mov	r5, r7
 8006826:	4603      	mov	r3, r0
 8006828:	2a65      	cmp	r2, #101	@ 0x65
 800682a:	d001      	beq.n	8006830 <_strtod_l+0x170>
 800682c:	2a45      	cmp	r2, #69	@ 0x45
 800682e:	d114      	bne.n	800685a <_strtod_l+0x19a>
 8006830:	b91d      	cbnz	r5, 800683a <_strtod_l+0x17a>
 8006832:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006834:	4302      	orrs	r2, r0
 8006836:	d095      	beq.n	8006764 <_strtod_l+0xa4>
 8006838:	2500      	movs	r5, #0
 800683a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800683c:	1c62      	adds	r2, r4, #1
 800683e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006840:	7862      	ldrb	r2, [r4, #1]
 8006842:	2a2b      	cmp	r2, #43	@ 0x2b
 8006844:	d077      	beq.n	8006936 <_strtod_l+0x276>
 8006846:	2a2d      	cmp	r2, #45	@ 0x2d
 8006848:	d07b      	beq.n	8006942 <_strtod_l+0x282>
 800684a:	f04f 0c00 	mov.w	ip, #0
 800684e:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006852:	2909      	cmp	r1, #9
 8006854:	f240 8082 	bls.w	800695c <_strtod_l+0x29c>
 8006858:	9419      	str	r4, [sp, #100]	@ 0x64
 800685a:	f04f 0800 	mov.w	r8, #0
 800685e:	e0a2      	b.n	80069a6 <_strtod_l+0x2e6>
 8006860:	2300      	movs	r3, #0
 8006862:	e7c7      	b.n	80067f4 <_strtod_l+0x134>
 8006864:	2f08      	cmp	r7, #8
 8006866:	bfd5      	itete	le
 8006868:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800686a:	9908      	ldrgt	r1, [sp, #32]
 800686c:	fb02 3301 	mlale	r3, r2, r1, r3
 8006870:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006874:	f100 0001 	add.w	r0, r0, #1
 8006878:	bfd4      	ite	le
 800687a:	930a      	strle	r3, [sp, #40]	@ 0x28
 800687c:	9308      	strgt	r3, [sp, #32]
 800687e:	3701      	adds	r7, #1
 8006880:	9019      	str	r0, [sp, #100]	@ 0x64
 8006882:	e7bf      	b.n	8006804 <_strtod_l+0x144>
 8006884:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006886:	1c5a      	adds	r2, r3, #1
 8006888:	9219      	str	r2, [sp, #100]	@ 0x64
 800688a:	785a      	ldrb	r2, [r3, #1]
 800688c:	b37f      	cbz	r7, 80068ee <_strtod_l+0x22e>
 800688e:	4681      	mov	r9, r0
 8006890:	463d      	mov	r5, r7
 8006892:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006896:	2b09      	cmp	r3, #9
 8006898:	d912      	bls.n	80068c0 <_strtod_l+0x200>
 800689a:	2301      	movs	r3, #1
 800689c:	e7c4      	b.n	8006828 <_strtod_l+0x168>
 800689e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068a0:	3001      	adds	r0, #1
 80068a2:	1c5a      	adds	r2, r3, #1
 80068a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80068a6:	785a      	ldrb	r2, [r3, #1]
 80068a8:	2a30      	cmp	r2, #48	@ 0x30
 80068aa:	d0f8      	beq.n	800689e <_strtod_l+0x1de>
 80068ac:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80068b0:	2b08      	cmp	r3, #8
 80068b2:	f200 84cb 	bhi.w	800724c <_strtod_l+0xb8c>
 80068b6:	4681      	mov	r9, r0
 80068b8:	2000      	movs	r0, #0
 80068ba:	4605      	mov	r5, r0
 80068bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80068be:	930c      	str	r3, [sp, #48]	@ 0x30
 80068c0:	3a30      	subs	r2, #48	@ 0x30
 80068c2:	f100 0301 	add.w	r3, r0, #1
 80068c6:	d02a      	beq.n	800691e <_strtod_l+0x25e>
 80068c8:	4499      	add	r9, r3
 80068ca:	210a      	movs	r1, #10
 80068cc:	462b      	mov	r3, r5
 80068ce:	eb00 0c05 	add.w	ip, r0, r5
 80068d2:	4563      	cmp	r3, ip
 80068d4:	d10d      	bne.n	80068f2 <_strtod_l+0x232>
 80068d6:	1c69      	adds	r1, r5, #1
 80068d8:	4401      	add	r1, r0
 80068da:	4428      	add	r0, r5
 80068dc:	2808      	cmp	r0, #8
 80068de:	dc16      	bgt.n	800690e <_strtod_l+0x24e>
 80068e0:	230a      	movs	r3, #10
 80068e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80068e4:	fb03 2300 	mla	r3, r3, r0, r2
 80068e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068ea:	2300      	movs	r3, #0
 80068ec:	e018      	b.n	8006920 <_strtod_l+0x260>
 80068ee:	4638      	mov	r0, r7
 80068f0:	e7da      	b.n	80068a8 <_strtod_l+0x1e8>
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	f103 0301 	add.w	r3, r3, #1
 80068f8:	dc03      	bgt.n	8006902 <_strtod_l+0x242>
 80068fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80068fc:	434e      	muls	r6, r1
 80068fe:	960a      	str	r6, [sp, #40]	@ 0x28
 8006900:	e7e7      	b.n	80068d2 <_strtod_l+0x212>
 8006902:	2b10      	cmp	r3, #16
 8006904:	bfde      	ittt	le
 8006906:	9e08      	ldrle	r6, [sp, #32]
 8006908:	434e      	mulle	r6, r1
 800690a:	9608      	strle	r6, [sp, #32]
 800690c:	e7e1      	b.n	80068d2 <_strtod_l+0x212>
 800690e:	280f      	cmp	r0, #15
 8006910:	dceb      	bgt.n	80068ea <_strtod_l+0x22a>
 8006912:	230a      	movs	r3, #10
 8006914:	9808      	ldr	r0, [sp, #32]
 8006916:	fb03 2300 	mla	r3, r3, r0, r2
 800691a:	9308      	str	r3, [sp, #32]
 800691c:	e7e5      	b.n	80068ea <_strtod_l+0x22a>
 800691e:	4629      	mov	r1, r5
 8006920:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006922:	460d      	mov	r5, r1
 8006924:	1c50      	adds	r0, r2, #1
 8006926:	9019      	str	r0, [sp, #100]	@ 0x64
 8006928:	7852      	ldrb	r2, [r2, #1]
 800692a:	4618      	mov	r0, r3
 800692c:	e7b1      	b.n	8006892 <_strtod_l+0x1d2>
 800692e:	f04f 0900 	mov.w	r9, #0
 8006932:	2301      	movs	r3, #1
 8006934:	e77d      	b.n	8006832 <_strtod_l+0x172>
 8006936:	f04f 0c00 	mov.w	ip, #0
 800693a:	1ca2      	adds	r2, r4, #2
 800693c:	9219      	str	r2, [sp, #100]	@ 0x64
 800693e:	78a2      	ldrb	r2, [r4, #2]
 8006940:	e785      	b.n	800684e <_strtod_l+0x18e>
 8006942:	f04f 0c01 	mov.w	ip, #1
 8006946:	e7f8      	b.n	800693a <_strtod_l+0x27a>
 8006948:	0800af18 	.word	0x0800af18
 800694c:	7ff00000 	.word	0x7ff00000
 8006950:	0800af01 	.word	0x0800af01
 8006954:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006956:	1c51      	adds	r1, r2, #1
 8006958:	9119      	str	r1, [sp, #100]	@ 0x64
 800695a:	7852      	ldrb	r2, [r2, #1]
 800695c:	2a30      	cmp	r2, #48	@ 0x30
 800695e:	d0f9      	beq.n	8006954 <_strtod_l+0x294>
 8006960:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006964:	2908      	cmp	r1, #8
 8006966:	f63f af78 	bhi.w	800685a <_strtod_l+0x19a>
 800696a:	f04f 080a 	mov.w	r8, #10
 800696e:	3a30      	subs	r2, #48	@ 0x30
 8006970:	920e      	str	r2, [sp, #56]	@ 0x38
 8006972:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006974:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006976:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006978:	1c56      	adds	r6, r2, #1
 800697a:	9619      	str	r6, [sp, #100]	@ 0x64
 800697c:	7852      	ldrb	r2, [r2, #1]
 800697e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006982:	f1be 0f09 	cmp.w	lr, #9
 8006986:	d939      	bls.n	80069fc <_strtod_l+0x33c>
 8006988:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800698a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800698e:	1a76      	subs	r6, r6, r1
 8006990:	2e08      	cmp	r6, #8
 8006992:	dc03      	bgt.n	800699c <_strtod_l+0x2dc>
 8006994:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006996:	4588      	cmp	r8, r1
 8006998:	bfa8      	it	ge
 800699a:	4688      	movge	r8, r1
 800699c:	f1bc 0f00 	cmp.w	ip, #0
 80069a0:	d001      	beq.n	80069a6 <_strtod_l+0x2e6>
 80069a2:	f1c8 0800 	rsb	r8, r8, #0
 80069a6:	2d00      	cmp	r5, #0
 80069a8:	d14e      	bne.n	8006a48 <_strtod_l+0x388>
 80069aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80069ac:	4308      	orrs	r0, r1
 80069ae:	f47f aec0 	bne.w	8006732 <_strtod_l+0x72>
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	f47f aed6 	bne.w	8006764 <_strtod_l+0xa4>
 80069b8:	2a69      	cmp	r2, #105	@ 0x69
 80069ba:	d028      	beq.n	8006a0e <_strtod_l+0x34e>
 80069bc:	dc25      	bgt.n	8006a0a <_strtod_l+0x34a>
 80069be:	2a49      	cmp	r2, #73	@ 0x49
 80069c0:	d025      	beq.n	8006a0e <_strtod_l+0x34e>
 80069c2:	2a4e      	cmp	r2, #78	@ 0x4e
 80069c4:	f47f aece 	bne.w	8006764 <_strtod_l+0xa4>
 80069c8:	499a      	ldr	r1, [pc, #616]	@ (8006c34 <_strtod_l+0x574>)
 80069ca:	a819      	add	r0, sp, #100	@ 0x64
 80069cc:	f001 ff42 	bl	8008854 <__match>
 80069d0:	2800      	cmp	r0, #0
 80069d2:	f43f aec7 	beq.w	8006764 <_strtod_l+0xa4>
 80069d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b28      	cmp	r3, #40	@ 0x28
 80069dc:	d12e      	bne.n	8006a3c <_strtod_l+0x37c>
 80069de:	4996      	ldr	r1, [pc, #600]	@ (8006c38 <_strtod_l+0x578>)
 80069e0:	aa1c      	add	r2, sp, #112	@ 0x70
 80069e2:	a819      	add	r0, sp, #100	@ 0x64
 80069e4:	f001 ff4a 	bl	800887c <__hexnan>
 80069e8:	2805      	cmp	r0, #5
 80069ea:	d127      	bne.n	8006a3c <_strtod_l+0x37c>
 80069ec:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80069ee:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80069f2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80069f6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80069fa:	e69a      	b.n	8006732 <_strtod_l+0x72>
 80069fc:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80069fe:	fb08 2101 	mla	r1, r8, r1, r2
 8006a02:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006a06:	920e      	str	r2, [sp, #56]	@ 0x38
 8006a08:	e7b5      	b.n	8006976 <_strtod_l+0x2b6>
 8006a0a:	2a6e      	cmp	r2, #110	@ 0x6e
 8006a0c:	e7da      	b.n	80069c4 <_strtod_l+0x304>
 8006a0e:	498b      	ldr	r1, [pc, #556]	@ (8006c3c <_strtod_l+0x57c>)
 8006a10:	a819      	add	r0, sp, #100	@ 0x64
 8006a12:	f001 ff1f 	bl	8008854 <__match>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f43f aea4 	beq.w	8006764 <_strtod_l+0xa4>
 8006a1c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a1e:	4988      	ldr	r1, [pc, #544]	@ (8006c40 <_strtod_l+0x580>)
 8006a20:	3b01      	subs	r3, #1
 8006a22:	a819      	add	r0, sp, #100	@ 0x64
 8006a24:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a26:	f001 ff15 	bl	8008854 <__match>
 8006a2a:	b910      	cbnz	r0, 8006a32 <_strtod_l+0x372>
 8006a2c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006a2e:	3301      	adds	r3, #1
 8006a30:	9319      	str	r3, [sp, #100]	@ 0x64
 8006a32:	f04f 0a00 	mov.w	sl, #0
 8006a36:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 8006c44 <_strtod_l+0x584>
 8006a3a:	e67a      	b.n	8006732 <_strtod_l+0x72>
 8006a3c:	4882      	ldr	r0, [pc, #520]	@ (8006c48 <_strtod_l+0x588>)
 8006a3e:	f000 fddd 	bl	80075fc <nan>
 8006a42:	4682      	mov	sl, r0
 8006a44:	468b      	mov	fp, r1
 8006a46:	e674      	b.n	8006732 <_strtod_l+0x72>
 8006a48:	eba8 0309 	sub.w	r3, r8, r9
 8006a4c:	2f00      	cmp	r7, #0
 8006a4e:	bf08      	it	eq
 8006a50:	462f      	moveq	r7, r5
 8006a52:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006a54:	2d10      	cmp	r5, #16
 8006a56:	462c      	mov	r4, r5
 8006a58:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a5a:	bfa8      	it	ge
 8006a5c:	2410      	movge	r4, #16
 8006a5e:	f7f9 fcc1 	bl	80003e4 <__aeabi_ui2d>
 8006a62:	2d09      	cmp	r5, #9
 8006a64:	4682      	mov	sl, r0
 8006a66:	468b      	mov	fp, r1
 8006a68:	dc11      	bgt.n	8006a8e <_strtod_l+0x3ce>
 8006a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f43f ae60 	beq.w	8006732 <_strtod_l+0x72>
 8006a72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a74:	dd76      	ble.n	8006b64 <_strtod_l+0x4a4>
 8006a76:	2b16      	cmp	r3, #22
 8006a78:	dc5d      	bgt.n	8006b36 <_strtod_l+0x476>
 8006a7a:	4974      	ldr	r1, [pc, #464]	@ (8006c4c <_strtod_l+0x58c>)
 8006a7c:	4652      	mov	r2, sl
 8006a7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006a82:	465b      	mov	r3, fp
 8006a84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006a88:	f7f9 fd26 	bl	80004d8 <__aeabi_dmul>
 8006a8c:	e7d9      	b.n	8006a42 <_strtod_l+0x382>
 8006a8e:	4b6f      	ldr	r3, [pc, #444]	@ (8006c4c <_strtod_l+0x58c>)
 8006a90:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a94:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006a98:	f7f9 fd1e 	bl	80004d8 <__aeabi_dmul>
 8006a9c:	4682      	mov	sl, r0
 8006a9e:	9808      	ldr	r0, [sp, #32]
 8006aa0:	468b      	mov	fp, r1
 8006aa2:	f7f9 fc9f 	bl	80003e4 <__aeabi_ui2d>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4650      	mov	r0, sl
 8006aac:	4659      	mov	r1, fp
 8006aae:	f7f9 fb5d 	bl	800016c <__adddf3>
 8006ab2:	2d0f      	cmp	r5, #15
 8006ab4:	4682      	mov	sl, r0
 8006ab6:	468b      	mov	fp, r1
 8006ab8:	ddd7      	ble.n	8006a6a <_strtod_l+0x3aa>
 8006aba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006abc:	1b2c      	subs	r4, r5, r4
 8006abe:	441c      	add	r4, r3
 8006ac0:	2c00      	cmp	r4, #0
 8006ac2:	f340 8096 	ble.w	8006bf2 <_strtod_l+0x532>
 8006ac6:	f014 030f 	ands.w	r3, r4, #15
 8006aca:	d00a      	beq.n	8006ae2 <_strtod_l+0x422>
 8006acc:	495f      	ldr	r1, [pc, #380]	@ (8006c4c <_strtod_l+0x58c>)
 8006ace:	4652      	mov	r2, sl
 8006ad0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006ad4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ad8:	465b      	mov	r3, fp
 8006ada:	f7f9 fcfd 	bl	80004d8 <__aeabi_dmul>
 8006ade:	4682      	mov	sl, r0
 8006ae0:	468b      	mov	fp, r1
 8006ae2:	f034 040f 	bics.w	r4, r4, #15
 8006ae6:	d073      	beq.n	8006bd0 <_strtod_l+0x510>
 8006ae8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006aec:	dd48      	ble.n	8006b80 <_strtod_l+0x4c0>
 8006aee:	2400      	movs	r4, #0
 8006af0:	46a0      	mov	r8, r4
 8006af2:	46a1      	mov	r9, r4
 8006af4:	940a      	str	r4, [sp, #40]	@ 0x28
 8006af6:	2322      	movs	r3, #34	@ 0x22
 8006af8:	f04f 0a00 	mov.w	sl, #0
 8006afc:	9a05      	ldr	r2, [sp, #20]
 8006afe:	f8df b144 	ldr.w	fp, [pc, #324]	@ 8006c44 <_strtod_l+0x584>
 8006b02:	6013      	str	r3, [r2, #0]
 8006b04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f43f ae13 	beq.w	8006732 <_strtod_l+0x72>
 8006b0c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006b0e:	9805      	ldr	r0, [sp, #20]
 8006b10:	f002 fee6 	bl	80098e0 <_Bfree>
 8006b14:	4649      	mov	r1, r9
 8006b16:	9805      	ldr	r0, [sp, #20]
 8006b18:	f002 fee2 	bl	80098e0 <_Bfree>
 8006b1c:	4641      	mov	r1, r8
 8006b1e:	9805      	ldr	r0, [sp, #20]
 8006b20:	f002 fede 	bl	80098e0 <_Bfree>
 8006b24:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b26:	9805      	ldr	r0, [sp, #20]
 8006b28:	f002 feda 	bl	80098e0 <_Bfree>
 8006b2c:	4621      	mov	r1, r4
 8006b2e:	9805      	ldr	r0, [sp, #20]
 8006b30:	f002 fed6 	bl	80098e0 <_Bfree>
 8006b34:	e5fd      	b.n	8006732 <_strtod_l+0x72>
 8006b36:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b38:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	dbbc      	blt.n	8006aba <_strtod_l+0x3fa>
 8006b40:	4c42      	ldr	r4, [pc, #264]	@ (8006c4c <_strtod_l+0x58c>)
 8006b42:	f1c5 050f 	rsb	r5, r5, #15
 8006b46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006b4a:	4652      	mov	r2, sl
 8006b4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006b50:	465b      	mov	r3, fp
 8006b52:	f7f9 fcc1 	bl	80004d8 <__aeabi_dmul>
 8006b56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b58:	1b5d      	subs	r5, r3, r5
 8006b5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006b5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8006b62:	e791      	b.n	8006a88 <_strtod_l+0x3c8>
 8006b64:	3316      	adds	r3, #22
 8006b66:	dba8      	blt.n	8006aba <_strtod_l+0x3fa>
 8006b68:	4b38      	ldr	r3, [pc, #224]	@ (8006c4c <_strtod_l+0x58c>)
 8006b6a:	eba9 0808 	sub.w	r8, r9, r8
 8006b6e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8006b72:	4650      	mov	r0, sl
 8006b74:	e9d8 2300 	ldrd	r2, r3, [r8]
 8006b78:	4659      	mov	r1, fp
 8006b7a:	f7f9 fdd7 	bl	800072c <__aeabi_ddiv>
 8006b7e:	e760      	b.n	8006a42 <_strtod_l+0x382>
 8006b80:	4b33      	ldr	r3, [pc, #204]	@ (8006c50 <_strtod_l+0x590>)
 8006b82:	4650      	mov	r0, sl
 8006b84:	9308      	str	r3, [sp, #32]
 8006b86:	2300      	movs	r3, #0
 8006b88:	4659      	mov	r1, fp
 8006b8a:	461e      	mov	r6, r3
 8006b8c:	1124      	asrs	r4, r4, #4
 8006b8e:	2c01      	cmp	r4, #1
 8006b90:	dc21      	bgt.n	8006bd6 <_strtod_l+0x516>
 8006b92:	b10b      	cbz	r3, 8006b98 <_strtod_l+0x4d8>
 8006b94:	4682      	mov	sl, r0
 8006b96:	468b      	mov	fp, r1
 8006b98:	492d      	ldr	r1, [pc, #180]	@ (8006c50 <_strtod_l+0x590>)
 8006b9a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8006b9e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8006ba2:	4652      	mov	r2, sl
 8006ba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006ba8:	465b      	mov	r3, fp
 8006baa:	f7f9 fc95 	bl	80004d8 <__aeabi_dmul>
 8006bae:	4b25      	ldr	r3, [pc, #148]	@ (8006c44 <_strtod_l+0x584>)
 8006bb0:	460a      	mov	r2, r1
 8006bb2:	400b      	ands	r3, r1
 8006bb4:	4927      	ldr	r1, [pc, #156]	@ (8006c54 <_strtod_l+0x594>)
 8006bb6:	4682      	mov	sl, r0
 8006bb8:	428b      	cmp	r3, r1
 8006bba:	d898      	bhi.n	8006aee <_strtod_l+0x42e>
 8006bbc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8006bc0:	428b      	cmp	r3, r1
 8006bc2:	bf86      	itte	hi
 8006bc4:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8006bc8:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8006c58 <_strtod_l+0x598>
 8006bcc:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	9308      	str	r3, [sp, #32]
 8006bd4:	e07a      	b.n	8006ccc <_strtod_l+0x60c>
 8006bd6:	07e2      	lsls	r2, r4, #31
 8006bd8:	d505      	bpl.n	8006be6 <_strtod_l+0x526>
 8006bda:	9b08      	ldr	r3, [sp, #32]
 8006bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006be0:	f7f9 fc7a 	bl	80004d8 <__aeabi_dmul>
 8006be4:	2301      	movs	r3, #1
 8006be6:	9a08      	ldr	r2, [sp, #32]
 8006be8:	3601      	adds	r6, #1
 8006bea:	3208      	adds	r2, #8
 8006bec:	1064      	asrs	r4, r4, #1
 8006bee:	9208      	str	r2, [sp, #32]
 8006bf0:	e7cd      	b.n	8006b8e <_strtod_l+0x4ce>
 8006bf2:	d0ed      	beq.n	8006bd0 <_strtod_l+0x510>
 8006bf4:	4264      	negs	r4, r4
 8006bf6:	f014 020f 	ands.w	r2, r4, #15
 8006bfa:	d00a      	beq.n	8006c12 <_strtod_l+0x552>
 8006bfc:	4b13      	ldr	r3, [pc, #76]	@ (8006c4c <_strtod_l+0x58c>)
 8006bfe:	4650      	mov	r0, sl
 8006c00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c04:	4659      	mov	r1, fp
 8006c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c0a:	f7f9 fd8f 	bl	800072c <__aeabi_ddiv>
 8006c0e:	4682      	mov	sl, r0
 8006c10:	468b      	mov	fp, r1
 8006c12:	1124      	asrs	r4, r4, #4
 8006c14:	d0dc      	beq.n	8006bd0 <_strtod_l+0x510>
 8006c16:	2c1f      	cmp	r4, #31
 8006c18:	dd20      	ble.n	8006c5c <_strtod_l+0x59c>
 8006c1a:	2400      	movs	r4, #0
 8006c1c:	46a0      	mov	r8, r4
 8006c1e:	46a1      	mov	r9, r4
 8006c20:	940a      	str	r4, [sp, #40]	@ 0x28
 8006c22:	2322      	movs	r3, #34	@ 0x22
 8006c24:	9a05      	ldr	r2, [sp, #20]
 8006c26:	f04f 0a00 	mov.w	sl, #0
 8006c2a:	f04f 0b00 	mov.w	fp, #0
 8006c2e:	6013      	str	r3, [r2, #0]
 8006c30:	e768      	b.n	8006b04 <_strtod_l+0x444>
 8006c32:	bf00      	nop
 8006c34:	0800aed7 	.word	0x0800aed7
 8006c38:	0800af04 	.word	0x0800af04
 8006c3c:	0800aecf 	.word	0x0800aecf
 8006c40:	0800b064 	.word	0x0800b064
 8006c44:	7ff00000 	.word	0x7ff00000
 8006c48:	0800b30b 	.word	0x0800b30b
 8006c4c:	0800b208 	.word	0x0800b208
 8006c50:	0800b1e0 	.word	0x0800b1e0
 8006c54:	7ca00000 	.word	0x7ca00000
 8006c58:	7fefffff 	.word	0x7fefffff
 8006c5c:	f014 0310 	ands.w	r3, r4, #16
 8006c60:	bf18      	it	ne
 8006c62:	236a      	movne	r3, #106	@ 0x6a
 8006c64:	4650      	mov	r0, sl
 8006c66:	9308      	str	r3, [sp, #32]
 8006c68:	4659      	mov	r1, fp
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	4ea9      	ldr	r6, [pc, #676]	@ (8006f14 <_strtod_l+0x854>)
 8006c6e:	07e2      	lsls	r2, r4, #31
 8006c70:	d504      	bpl.n	8006c7c <_strtod_l+0x5bc>
 8006c72:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006c76:	f7f9 fc2f 	bl	80004d8 <__aeabi_dmul>
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	1064      	asrs	r4, r4, #1
 8006c7e:	f106 0608 	add.w	r6, r6, #8
 8006c82:	d1f4      	bne.n	8006c6e <_strtod_l+0x5ae>
 8006c84:	b10b      	cbz	r3, 8006c8a <_strtod_l+0x5ca>
 8006c86:	4682      	mov	sl, r0
 8006c88:	468b      	mov	fp, r1
 8006c8a:	9b08      	ldr	r3, [sp, #32]
 8006c8c:	b1b3      	cbz	r3, 8006cbc <_strtod_l+0x5fc>
 8006c8e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8006c92:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	4659      	mov	r1, fp
 8006c9a:	dd0f      	ble.n	8006cbc <_strtod_l+0x5fc>
 8006c9c:	2b1f      	cmp	r3, #31
 8006c9e:	dd57      	ble.n	8006d50 <_strtod_l+0x690>
 8006ca0:	2b34      	cmp	r3, #52	@ 0x34
 8006ca2:	bfd8      	it	le
 8006ca4:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8006ca8:	f04f 0a00 	mov.w	sl, #0
 8006cac:	bfcf      	iteee	gt
 8006cae:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006cb2:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006cb6:	4093      	lslle	r3, r2
 8006cb8:	ea03 0b01 	andle.w	fp, r3, r1
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	2300      	movs	r3, #0
 8006cc0:	4650      	mov	r0, sl
 8006cc2:	4659      	mov	r1, fp
 8006cc4:	f7f9 fe70 	bl	80009a8 <__aeabi_dcmpeq>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d1a6      	bne.n	8006c1a <_strtod_l+0x55a>
 8006ccc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cce:	463a      	mov	r2, r7
 8006cd0:	9300      	str	r3, [sp, #0]
 8006cd2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006cd4:	462b      	mov	r3, r5
 8006cd6:	9805      	ldr	r0, [sp, #20]
 8006cd8:	f002 fe6a 	bl	80099b0 <__s2b>
 8006cdc:	900a      	str	r0, [sp, #40]	@ 0x28
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	f43f af05 	beq.w	8006aee <_strtod_l+0x42e>
 8006ce4:	2400      	movs	r4, #0
 8006ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ce8:	eba9 0308 	sub.w	r3, r9, r8
 8006cec:	2a00      	cmp	r2, #0
 8006cee:	bfa8      	it	ge
 8006cf0:	2300      	movge	r3, #0
 8006cf2:	46a0      	mov	r8, r4
 8006cf4:	9312      	str	r3, [sp, #72]	@ 0x48
 8006cf6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006cfa:	9316      	str	r3, [sp, #88]	@ 0x58
 8006cfc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cfe:	9805      	ldr	r0, [sp, #20]
 8006d00:	6859      	ldr	r1, [r3, #4]
 8006d02:	f002 fdad 	bl	8009860 <_Balloc>
 8006d06:	4681      	mov	r9, r0
 8006d08:	2800      	cmp	r0, #0
 8006d0a:	f43f aef4 	beq.w	8006af6 <_strtod_l+0x436>
 8006d0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d10:	300c      	adds	r0, #12
 8006d12:	691a      	ldr	r2, [r3, #16]
 8006d14:	f103 010c 	add.w	r1, r3, #12
 8006d18:	3202      	adds	r2, #2
 8006d1a:	0092      	lsls	r2, r2, #2
 8006d1c:	f000 fc57 	bl	80075ce <memcpy>
 8006d20:	ab1c      	add	r3, sp, #112	@ 0x70
 8006d22:	9301      	str	r3, [sp, #4]
 8006d24:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006d26:	9300      	str	r3, [sp, #0]
 8006d28:	4652      	mov	r2, sl
 8006d2a:	465b      	mov	r3, fp
 8006d2c:	9805      	ldr	r0, [sp, #20]
 8006d2e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006d32:	f003 f96f 	bl	800a014 <__d2b>
 8006d36:	901a      	str	r0, [sp, #104]	@ 0x68
 8006d38:	2800      	cmp	r0, #0
 8006d3a:	f43f aedc 	beq.w	8006af6 <_strtod_l+0x436>
 8006d3e:	2101      	movs	r1, #1
 8006d40:	9805      	ldr	r0, [sp, #20]
 8006d42:	f002 fecb 	bl	8009adc <__i2b>
 8006d46:	4680      	mov	r8, r0
 8006d48:	b948      	cbnz	r0, 8006d5e <_strtod_l+0x69e>
 8006d4a:	f04f 0800 	mov.w	r8, #0
 8006d4e:	e6d2      	b.n	8006af6 <_strtod_l+0x436>
 8006d50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006d54:	fa02 f303 	lsl.w	r3, r2, r3
 8006d58:	ea03 0a0a 	and.w	sl, r3, sl
 8006d5c:	e7ae      	b.n	8006cbc <_strtod_l+0x5fc>
 8006d5e:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8006d60:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8006d62:	2d00      	cmp	r5, #0
 8006d64:	bfab      	itete	ge
 8006d66:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8006d68:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8006d6a:	18ef      	addge	r7, r5, r3
 8006d6c:	1b5e      	sublt	r6, r3, r5
 8006d6e:	9b08      	ldr	r3, [sp, #32]
 8006d70:	bfa8      	it	ge
 8006d72:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8006d74:	eba5 0503 	sub.w	r5, r5, r3
 8006d78:	4415      	add	r5, r2
 8006d7a:	4b67      	ldr	r3, [pc, #412]	@ (8006f18 <_strtod_l+0x858>)
 8006d7c:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8006d80:	bfb8      	it	lt
 8006d82:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8006d84:	429d      	cmp	r5, r3
 8006d86:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006d8a:	da50      	bge.n	8006e2e <_strtod_l+0x76e>
 8006d8c:	1b5b      	subs	r3, r3, r5
 8006d8e:	2b1f      	cmp	r3, #31
 8006d90:	f04f 0101 	mov.w	r1, #1
 8006d94:	eba2 0203 	sub.w	r2, r2, r3
 8006d98:	dc3d      	bgt.n	8006e16 <_strtod_l+0x756>
 8006d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8006d9e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006da0:	2300      	movs	r3, #0
 8006da2:	9310      	str	r3, [sp, #64]	@ 0x40
 8006da4:	18bd      	adds	r5, r7, r2
 8006da6:	9b08      	ldr	r3, [sp, #32]
 8006da8:	42af      	cmp	r7, r5
 8006daa:	4416      	add	r6, r2
 8006dac:	441e      	add	r6, r3
 8006dae:	463b      	mov	r3, r7
 8006db0:	bfa8      	it	ge
 8006db2:	462b      	movge	r3, r5
 8006db4:	42b3      	cmp	r3, r6
 8006db6:	bfa8      	it	ge
 8006db8:	4633      	movge	r3, r6
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	bfc2      	ittt	gt
 8006dbe:	1aed      	subgt	r5, r5, r3
 8006dc0:	1af6      	subgt	r6, r6, r3
 8006dc2:	1aff      	subgt	r7, r7, r3
 8006dc4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	dd16      	ble.n	8006df8 <_strtod_l+0x738>
 8006dca:	4641      	mov	r1, r8
 8006dcc:	461a      	mov	r2, r3
 8006dce:	9805      	ldr	r0, [sp, #20]
 8006dd0:	f002 ff42 	bl	8009c58 <__pow5mult>
 8006dd4:	4680      	mov	r8, r0
 8006dd6:	2800      	cmp	r0, #0
 8006dd8:	d0b7      	beq.n	8006d4a <_strtod_l+0x68a>
 8006dda:	4601      	mov	r1, r0
 8006ddc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006dde:	9805      	ldr	r0, [sp, #20]
 8006de0:	f002 fe92 	bl	8009b08 <__multiply>
 8006de4:	900e      	str	r0, [sp, #56]	@ 0x38
 8006de6:	2800      	cmp	r0, #0
 8006de8:	f43f ae85 	beq.w	8006af6 <_strtod_l+0x436>
 8006dec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006dee:	9805      	ldr	r0, [sp, #20]
 8006df0:	f002 fd76 	bl	80098e0 <_Bfree>
 8006df4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006df6:	931a      	str	r3, [sp, #104]	@ 0x68
 8006df8:	2d00      	cmp	r5, #0
 8006dfa:	dc1d      	bgt.n	8006e38 <_strtod_l+0x778>
 8006dfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	dd23      	ble.n	8006e4a <_strtod_l+0x78a>
 8006e02:	4649      	mov	r1, r9
 8006e04:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006e06:	9805      	ldr	r0, [sp, #20]
 8006e08:	f002 ff26 	bl	8009c58 <__pow5mult>
 8006e0c:	4681      	mov	r9, r0
 8006e0e:	b9e0      	cbnz	r0, 8006e4a <_strtod_l+0x78a>
 8006e10:	f04f 0900 	mov.w	r9, #0
 8006e14:	e66f      	b.n	8006af6 <_strtod_l+0x436>
 8006e16:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006e1a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8006e1e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006e22:	35e2      	adds	r5, #226	@ 0xe2
 8006e24:	fa01 f305 	lsl.w	r3, r1, r5
 8006e28:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e2a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006e2c:	e7ba      	b.n	8006da4 <_strtod_l+0x6e4>
 8006e2e:	2300      	movs	r3, #0
 8006e30:	9310      	str	r3, [sp, #64]	@ 0x40
 8006e32:	2301      	movs	r3, #1
 8006e34:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006e36:	e7b5      	b.n	8006da4 <_strtod_l+0x6e4>
 8006e38:	462a      	mov	r2, r5
 8006e3a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e3c:	9805      	ldr	r0, [sp, #20]
 8006e3e:	f002 ff65 	bl	8009d0c <__lshift>
 8006e42:	901a      	str	r0, [sp, #104]	@ 0x68
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1d9      	bne.n	8006dfc <_strtod_l+0x73c>
 8006e48:	e655      	b.n	8006af6 <_strtod_l+0x436>
 8006e4a:	2e00      	cmp	r6, #0
 8006e4c:	dd07      	ble.n	8006e5e <_strtod_l+0x79e>
 8006e4e:	4649      	mov	r1, r9
 8006e50:	4632      	mov	r2, r6
 8006e52:	9805      	ldr	r0, [sp, #20]
 8006e54:	f002 ff5a 	bl	8009d0c <__lshift>
 8006e58:	4681      	mov	r9, r0
 8006e5a:	2800      	cmp	r0, #0
 8006e5c:	d0d8      	beq.n	8006e10 <_strtod_l+0x750>
 8006e5e:	2f00      	cmp	r7, #0
 8006e60:	dd08      	ble.n	8006e74 <_strtod_l+0x7b4>
 8006e62:	4641      	mov	r1, r8
 8006e64:	463a      	mov	r2, r7
 8006e66:	9805      	ldr	r0, [sp, #20]
 8006e68:	f002 ff50 	bl	8009d0c <__lshift>
 8006e6c:	4680      	mov	r8, r0
 8006e6e:	2800      	cmp	r0, #0
 8006e70:	f43f ae41 	beq.w	8006af6 <_strtod_l+0x436>
 8006e74:	464a      	mov	r2, r9
 8006e76:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006e78:	9805      	ldr	r0, [sp, #20]
 8006e7a:	f002 ffcf 	bl	8009e1c <__mdiff>
 8006e7e:	4604      	mov	r4, r0
 8006e80:	2800      	cmp	r0, #0
 8006e82:	f43f ae38 	beq.w	8006af6 <_strtod_l+0x436>
 8006e86:	68c3      	ldr	r3, [r0, #12]
 8006e88:	4641      	mov	r1, r8
 8006e8a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60c3      	str	r3, [r0, #12]
 8006e90:	f002 ffa8 	bl	8009de4 <__mcmp>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	da45      	bge.n	8006f24 <_strtod_l+0x864>
 8006e98:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e9a:	ea53 030a 	orrs.w	r3, r3, sl
 8006e9e:	d16b      	bne.n	8006f78 <_strtod_l+0x8b8>
 8006ea0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d167      	bne.n	8006f78 <_strtod_l+0x8b8>
 8006ea8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006eac:	0d1b      	lsrs	r3, r3, #20
 8006eae:	051b      	lsls	r3, r3, #20
 8006eb0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006eb4:	d960      	bls.n	8006f78 <_strtod_l+0x8b8>
 8006eb6:	6963      	ldr	r3, [r4, #20]
 8006eb8:	b913      	cbnz	r3, 8006ec0 <_strtod_l+0x800>
 8006eba:	6923      	ldr	r3, [r4, #16]
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	dd5b      	ble.n	8006f78 <_strtod_l+0x8b8>
 8006ec0:	4621      	mov	r1, r4
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	9805      	ldr	r0, [sp, #20]
 8006ec6:	f002 ff21 	bl	8009d0c <__lshift>
 8006eca:	4641      	mov	r1, r8
 8006ecc:	4604      	mov	r4, r0
 8006ece:	f002 ff89 	bl	8009de4 <__mcmp>
 8006ed2:	2800      	cmp	r0, #0
 8006ed4:	dd50      	ble.n	8006f78 <_strtod_l+0x8b8>
 8006ed6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006eda:	9a08      	ldr	r2, [sp, #32]
 8006edc:	0d1b      	lsrs	r3, r3, #20
 8006ede:	051b      	lsls	r3, r3, #20
 8006ee0:	2a00      	cmp	r2, #0
 8006ee2:	d06a      	beq.n	8006fba <_strtod_l+0x8fa>
 8006ee4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006ee8:	d867      	bhi.n	8006fba <_strtod_l+0x8fa>
 8006eea:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8006eee:	f67f ae98 	bls.w	8006c22 <_strtod_l+0x562>
 8006ef2:	4650      	mov	r0, sl
 8006ef4:	4659      	mov	r1, fp
 8006ef6:	4b09      	ldr	r3, [pc, #36]	@ (8006f1c <_strtod_l+0x85c>)
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f7f9 faed 	bl	80004d8 <__aeabi_dmul>
 8006efe:	4b08      	ldr	r3, [pc, #32]	@ (8006f20 <_strtod_l+0x860>)
 8006f00:	4682      	mov	sl, r0
 8006f02:	400b      	ands	r3, r1
 8006f04:	468b      	mov	fp, r1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f47f ae00 	bne.w	8006b0c <_strtod_l+0x44c>
 8006f0c:	2322      	movs	r3, #34	@ 0x22
 8006f0e:	9a05      	ldr	r2, [sp, #20]
 8006f10:	6013      	str	r3, [r2, #0]
 8006f12:	e5fb      	b.n	8006b0c <_strtod_l+0x44c>
 8006f14:	0800af30 	.word	0x0800af30
 8006f18:	fffffc02 	.word	0xfffffc02
 8006f1c:	39500000 	.word	0x39500000
 8006f20:	7ff00000 	.word	0x7ff00000
 8006f24:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006f28:	d165      	bne.n	8006ff6 <_strtod_l+0x936>
 8006f2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006f2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006f30:	b35a      	cbz	r2, 8006f8a <_strtod_l+0x8ca>
 8006f32:	4a99      	ldr	r2, [pc, #612]	@ (8007198 <_strtod_l+0xad8>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d12b      	bne.n	8006f90 <_strtod_l+0x8d0>
 8006f38:	9b08      	ldr	r3, [sp, #32]
 8006f3a:	4651      	mov	r1, sl
 8006f3c:	b303      	cbz	r3, 8006f80 <_strtod_l+0x8c0>
 8006f3e:	465a      	mov	r2, fp
 8006f40:	4b96      	ldr	r3, [pc, #600]	@ (800719c <_strtod_l+0xadc>)
 8006f42:	4013      	ands	r3, r2
 8006f44:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8006f48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006f4c:	d81b      	bhi.n	8006f86 <_strtod_l+0x8c6>
 8006f4e:	0d1b      	lsrs	r3, r3, #20
 8006f50:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f54:	fa02 f303 	lsl.w	r3, r2, r3
 8006f58:	4299      	cmp	r1, r3
 8006f5a:	d119      	bne.n	8006f90 <_strtod_l+0x8d0>
 8006f5c:	4b90      	ldr	r3, [pc, #576]	@ (80071a0 <_strtod_l+0xae0>)
 8006f5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f60:	429a      	cmp	r2, r3
 8006f62:	d102      	bne.n	8006f6a <_strtod_l+0x8aa>
 8006f64:	3101      	adds	r1, #1
 8006f66:	f43f adc6 	beq.w	8006af6 <_strtod_l+0x436>
 8006f6a:	f04f 0a00 	mov.w	sl, #0
 8006f6e:	4b8b      	ldr	r3, [pc, #556]	@ (800719c <_strtod_l+0xadc>)
 8006f70:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f72:	401a      	ands	r2, r3
 8006f74:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8006f78:	9b08      	ldr	r3, [sp, #32]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1b9      	bne.n	8006ef2 <_strtod_l+0x832>
 8006f7e:	e5c5      	b.n	8006b0c <_strtod_l+0x44c>
 8006f80:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f84:	e7e8      	b.n	8006f58 <_strtod_l+0x898>
 8006f86:	4613      	mov	r3, r2
 8006f88:	e7e6      	b.n	8006f58 <_strtod_l+0x898>
 8006f8a:	ea53 030a 	orrs.w	r3, r3, sl
 8006f8e:	d0a2      	beq.n	8006ed6 <_strtod_l+0x816>
 8006f90:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006f92:	b1db      	cbz	r3, 8006fcc <_strtod_l+0x90c>
 8006f94:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006f96:	4213      	tst	r3, r2
 8006f98:	d0ee      	beq.n	8006f78 <_strtod_l+0x8b8>
 8006f9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f9c:	4650      	mov	r0, sl
 8006f9e:	4659      	mov	r1, fp
 8006fa0:	9a08      	ldr	r2, [sp, #32]
 8006fa2:	b1bb      	cbz	r3, 8006fd4 <_strtod_l+0x914>
 8006fa4:	f7ff fb68 	bl	8006678 <sulp>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fb0:	f7f9 f8dc 	bl	800016c <__adddf3>
 8006fb4:	4682      	mov	sl, r0
 8006fb6:	468b      	mov	fp, r1
 8006fb8:	e7de      	b.n	8006f78 <_strtod_l+0x8b8>
 8006fba:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8006fbe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006fc2:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8006fc6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006fca:	e7d5      	b.n	8006f78 <_strtod_l+0x8b8>
 8006fcc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006fce:	ea13 0f0a 	tst.w	r3, sl
 8006fd2:	e7e1      	b.n	8006f98 <_strtod_l+0x8d8>
 8006fd4:	f7ff fb50 	bl	8006678 <sulp>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	460b      	mov	r3, r1
 8006fdc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fe0:	f7f9 f8c2 	bl	8000168 <__aeabi_dsub>
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4682      	mov	sl, r0
 8006fea:	468b      	mov	fp, r1
 8006fec:	f7f9 fcdc 	bl	80009a8 <__aeabi_dcmpeq>
 8006ff0:	2800      	cmp	r0, #0
 8006ff2:	d0c1      	beq.n	8006f78 <_strtod_l+0x8b8>
 8006ff4:	e615      	b.n	8006c22 <_strtod_l+0x562>
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	4620      	mov	r0, r4
 8006ffa:	f003 f863 	bl	800a0c4 <__ratio>
 8006ffe:	2200      	movs	r2, #0
 8007000:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007004:	4606      	mov	r6, r0
 8007006:	460f      	mov	r7, r1
 8007008:	f7f9 fce2 	bl	80009d0 <__aeabi_dcmple>
 800700c:	2800      	cmp	r0, #0
 800700e:	d06d      	beq.n	80070ec <_strtod_l+0xa2c>
 8007010:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007012:	2b00      	cmp	r3, #0
 8007014:	d178      	bne.n	8007108 <_strtod_l+0xa48>
 8007016:	f1ba 0f00 	cmp.w	sl, #0
 800701a:	d156      	bne.n	80070ca <_strtod_l+0xa0a>
 800701c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800701e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007022:	2b00      	cmp	r3, #0
 8007024:	d158      	bne.n	80070d8 <_strtod_l+0xa18>
 8007026:	2200      	movs	r2, #0
 8007028:	4630      	mov	r0, r6
 800702a:	4639      	mov	r1, r7
 800702c:	4b5d      	ldr	r3, [pc, #372]	@ (80071a4 <_strtod_l+0xae4>)
 800702e:	f7f9 fcc5 	bl	80009bc <__aeabi_dcmplt>
 8007032:	2800      	cmp	r0, #0
 8007034:	d157      	bne.n	80070e6 <_strtod_l+0xa26>
 8007036:	4630      	mov	r0, r6
 8007038:	4639      	mov	r1, r7
 800703a:	2200      	movs	r2, #0
 800703c:	4b5a      	ldr	r3, [pc, #360]	@ (80071a8 <_strtod_l+0xae8>)
 800703e:	f7f9 fa4b 	bl	80004d8 <__aeabi_dmul>
 8007042:	4606      	mov	r6, r0
 8007044:	460f      	mov	r7, r1
 8007046:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800704a:	9606      	str	r6, [sp, #24]
 800704c:	9307      	str	r3, [sp, #28]
 800704e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007052:	4d52      	ldr	r5, [pc, #328]	@ (800719c <_strtod_l+0xadc>)
 8007054:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007058:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800705a:	401d      	ands	r5, r3
 800705c:	4b53      	ldr	r3, [pc, #332]	@ (80071ac <_strtod_l+0xaec>)
 800705e:	429d      	cmp	r5, r3
 8007060:	f040 80aa 	bne.w	80071b8 <_strtod_l+0xaf8>
 8007064:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007066:	4650      	mov	r0, sl
 8007068:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800706c:	4659      	mov	r1, fp
 800706e:	f002 ff69 	bl	8009f44 <__ulp>
 8007072:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007076:	f7f9 fa2f 	bl	80004d8 <__aeabi_dmul>
 800707a:	4652      	mov	r2, sl
 800707c:	465b      	mov	r3, fp
 800707e:	f7f9 f875 	bl	800016c <__adddf3>
 8007082:	460b      	mov	r3, r1
 8007084:	4945      	ldr	r1, [pc, #276]	@ (800719c <_strtod_l+0xadc>)
 8007086:	4a4a      	ldr	r2, [pc, #296]	@ (80071b0 <_strtod_l+0xaf0>)
 8007088:	4019      	ands	r1, r3
 800708a:	4291      	cmp	r1, r2
 800708c:	4682      	mov	sl, r0
 800708e:	d942      	bls.n	8007116 <_strtod_l+0xa56>
 8007090:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007092:	4b43      	ldr	r3, [pc, #268]	@ (80071a0 <_strtod_l+0xae0>)
 8007094:	429a      	cmp	r2, r3
 8007096:	d103      	bne.n	80070a0 <_strtod_l+0x9e0>
 8007098:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800709a:	3301      	adds	r3, #1
 800709c:	f43f ad2b 	beq.w	8006af6 <_strtod_l+0x436>
 80070a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80070a4:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 80071a0 <_strtod_l+0xae0>
 80070a8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80070aa:	9805      	ldr	r0, [sp, #20]
 80070ac:	f002 fc18 	bl	80098e0 <_Bfree>
 80070b0:	4649      	mov	r1, r9
 80070b2:	9805      	ldr	r0, [sp, #20]
 80070b4:	f002 fc14 	bl	80098e0 <_Bfree>
 80070b8:	4641      	mov	r1, r8
 80070ba:	9805      	ldr	r0, [sp, #20]
 80070bc:	f002 fc10 	bl	80098e0 <_Bfree>
 80070c0:	4621      	mov	r1, r4
 80070c2:	9805      	ldr	r0, [sp, #20]
 80070c4:	f002 fc0c 	bl	80098e0 <_Bfree>
 80070c8:	e618      	b.n	8006cfc <_strtod_l+0x63c>
 80070ca:	f1ba 0f01 	cmp.w	sl, #1
 80070ce:	d103      	bne.n	80070d8 <_strtod_l+0xa18>
 80070d0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f43f ada5 	beq.w	8006c22 <_strtod_l+0x562>
 80070d8:	2200      	movs	r2, #0
 80070da:	4b36      	ldr	r3, [pc, #216]	@ (80071b4 <_strtod_l+0xaf4>)
 80070dc:	2600      	movs	r6, #0
 80070de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80070e2:	4f30      	ldr	r7, [pc, #192]	@ (80071a4 <_strtod_l+0xae4>)
 80070e4:	e7b3      	b.n	800704e <_strtod_l+0x98e>
 80070e6:	2600      	movs	r6, #0
 80070e8:	4f2f      	ldr	r7, [pc, #188]	@ (80071a8 <_strtod_l+0xae8>)
 80070ea:	e7ac      	b.n	8007046 <_strtod_l+0x986>
 80070ec:	4630      	mov	r0, r6
 80070ee:	4639      	mov	r1, r7
 80070f0:	4b2d      	ldr	r3, [pc, #180]	@ (80071a8 <_strtod_l+0xae8>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	f7f9 f9f0 	bl	80004d8 <__aeabi_dmul>
 80070f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80070fa:	4606      	mov	r6, r0
 80070fc:	460f      	mov	r7, r1
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d0a1      	beq.n	8007046 <_strtod_l+0x986>
 8007102:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007106:	e7a2      	b.n	800704e <_strtod_l+0x98e>
 8007108:	2200      	movs	r2, #0
 800710a:	4b26      	ldr	r3, [pc, #152]	@ (80071a4 <_strtod_l+0xae4>)
 800710c:	4616      	mov	r6, r2
 800710e:	461f      	mov	r7, r3
 8007110:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007114:	e79b      	b.n	800704e <_strtod_l+0x98e>
 8007116:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800711a:	9b08      	ldr	r3, [sp, #32]
 800711c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007120:	2b00      	cmp	r3, #0
 8007122:	d1c1      	bne.n	80070a8 <_strtod_l+0x9e8>
 8007124:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007128:	0d1b      	lsrs	r3, r3, #20
 800712a:	051b      	lsls	r3, r3, #20
 800712c:	429d      	cmp	r5, r3
 800712e:	d1bb      	bne.n	80070a8 <_strtod_l+0x9e8>
 8007130:	4630      	mov	r0, r6
 8007132:	4639      	mov	r1, r7
 8007134:	f7fa f812 	bl	800115c <__aeabi_d2lz>
 8007138:	f7f9 f9a0 	bl	800047c <__aeabi_l2d>
 800713c:	4602      	mov	r2, r0
 800713e:	460b      	mov	r3, r1
 8007140:	4630      	mov	r0, r6
 8007142:	4639      	mov	r1, r7
 8007144:	f7f9 f810 	bl	8000168 <__aeabi_dsub>
 8007148:	460b      	mov	r3, r1
 800714a:	4602      	mov	r2, r0
 800714c:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007150:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007156:	ea46 060a 	orr.w	r6, r6, sl
 800715a:	431e      	orrs	r6, r3
 800715c:	d069      	beq.n	8007232 <_strtod_l+0xb72>
 800715e:	a30a      	add	r3, pc, #40	@ (adr r3, 8007188 <_strtod_l+0xac8>)
 8007160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007164:	f7f9 fc2a 	bl	80009bc <__aeabi_dcmplt>
 8007168:	2800      	cmp	r0, #0
 800716a:	f47f accf 	bne.w	8006b0c <_strtod_l+0x44c>
 800716e:	a308      	add	r3, pc, #32	@ (adr r3, 8007190 <_strtod_l+0xad0>)
 8007170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007174:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007178:	f7f9 fc3e 	bl	80009f8 <__aeabi_dcmpgt>
 800717c:	2800      	cmp	r0, #0
 800717e:	d093      	beq.n	80070a8 <_strtod_l+0x9e8>
 8007180:	e4c4      	b.n	8006b0c <_strtod_l+0x44c>
 8007182:	bf00      	nop
 8007184:	f3af 8000 	nop.w
 8007188:	94a03595 	.word	0x94a03595
 800718c:	3fdfffff 	.word	0x3fdfffff
 8007190:	35afe535 	.word	0x35afe535
 8007194:	3fe00000 	.word	0x3fe00000
 8007198:	000fffff 	.word	0x000fffff
 800719c:	7ff00000 	.word	0x7ff00000
 80071a0:	7fefffff 	.word	0x7fefffff
 80071a4:	3ff00000 	.word	0x3ff00000
 80071a8:	3fe00000 	.word	0x3fe00000
 80071ac:	7fe00000 	.word	0x7fe00000
 80071b0:	7c9fffff 	.word	0x7c9fffff
 80071b4:	bff00000 	.word	0xbff00000
 80071b8:	9b08      	ldr	r3, [sp, #32]
 80071ba:	b323      	cbz	r3, 8007206 <_strtod_l+0xb46>
 80071bc:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 80071c0:	d821      	bhi.n	8007206 <_strtod_l+0xb46>
 80071c2:	a327      	add	r3, pc, #156	@ (adr r3, 8007260 <_strtod_l+0xba0>)
 80071c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071c8:	4630      	mov	r0, r6
 80071ca:	4639      	mov	r1, r7
 80071cc:	f7f9 fc00 	bl	80009d0 <__aeabi_dcmple>
 80071d0:	b1a0      	cbz	r0, 80071fc <_strtod_l+0xb3c>
 80071d2:	4639      	mov	r1, r7
 80071d4:	4630      	mov	r0, r6
 80071d6:	f7f9 fc57 	bl	8000a88 <__aeabi_d2uiz>
 80071da:	2801      	cmp	r0, #1
 80071dc:	bf38      	it	cc
 80071de:	2001      	movcc	r0, #1
 80071e0:	f7f9 f900 	bl	80003e4 <__aeabi_ui2d>
 80071e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80071e6:	4606      	mov	r6, r0
 80071e8:	460f      	mov	r7, r1
 80071ea:	b9fb      	cbnz	r3, 800722c <_strtod_l+0xb6c>
 80071ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80071f0:	9014      	str	r0, [sp, #80]	@ 0x50
 80071f2:	9315      	str	r3, [sp, #84]	@ 0x54
 80071f4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80071f8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80071fc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80071fe:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007202:	1b5b      	subs	r3, r3, r5
 8007204:	9311      	str	r3, [sp, #68]	@ 0x44
 8007206:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800720a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800720e:	f002 fe99 	bl	8009f44 <__ulp>
 8007212:	4602      	mov	r2, r0
 8007214:	460b      	mov	r3, r1
 8007216:	4650      	mov	r0, sl
 8007218:	4659      	mov	r1, fp
 800721a:	f7f9 f95d 	bl	80004d8 <__aeabi_dmul>
 800721e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007222:	f7f8 ffa3 	bl	800016c <__adddf3>
 8007226:	4682      	mov	sl, r0
 8007228:	468b      	mov	fp, r1
 800722a:	e776      	b.n	800711a <_strtod_l+0xa5a>
 800722c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007230:	e7e0      	b.n	80071f4 <_strtod_l+0xb34>
 8007232:	a30d      	add	r3, pc, #52	@ (adr r3, 8007268 <_strtod_l+0xba8>)
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f7f9 fbc0 	bl	80009bc <__aeabi_dcmplt>
 800723c:	e79e      	b.n	800717c <_strtod_l+0xabc>
 800723e:	2300      	movs	r3, #0
 8007240:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007244:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007246:	6013      	str	r3, [r2, #0]
 8007248:	f7ff ba77 	b.w	800673a <_strtod_l+0x7a>
 800724c:	2a65      	cmp	r2, #101	@ 0x65
 800724e:	f43f ab6e 	beq.w	800692e <_strtod_l+0x26e>
 8007252:	2a45      	cmp	r2, #69	@ 0x45
 8007254:	f43f ab6b 	beq.w	800692e <_strtod_l+0x26e>
 8007258:	2301      	movs	r3, #1
 800725a:	f7ff bba6 	b.w	80069aa <_strtod_l+0x2ea>
 800725e:	bf00      	nop
 8007260:	ffc00000 	.word	0xffc00000
 8007264:	41dfffff 	.word	0x41dfffff
 8007268:	94a03595 	.word	0x94a03595
 800726c:	3fcfffff 	.word	0x3fcfffff

08007270 <_strtod_r>:
 8007270:	4b01      	ldr	r3, [pc, #4]	@ (8007278 <_strtod_r+0x8>)
 8007272:	f7ff ba25 	b.w	80066c0 <_strtod_l>
 8007276:	bf00      	nop
 8007278:	20000040 	.word	0x20000040

0800727c <_strtol_l.constprop.0>:
 800727c:	2b24      	cmp	r3, #36	@ 0x24
 800727e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007282:	4686      	mov	lr, r0
 8007284:	4690      	mov	r8, r2
 8007286:	d801      	bhi.n	800728c <_strtol_l.constprop.0+0x10>
 8007288:	2b01      	cmp	r3, #1
 800728a:	d106      	bne.n	800729a <_strtol_l.constprop.0+0x1e>
 800728c:	f000 f964 	bl	8007558 <__errno>
 8007290:	2316      	movs	r3, #22
 8007292:	6003      	str	r3, [r0, #0]
 8007294:	2000      	movs	r0, #0
 8007296:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800729a:	460d      	mov	r5, r1
 800729c:	4833      	ldr	r0, [pc, #204]	@ (800736c <_strtol_l.constprop.0+0xf0>)
 800729e:	462a      	mov	r2, r5
 80072a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072a4:	5d06      	ldrb	r6, [r0, r4]
 80072a6:	f016 0608 	ands.w	r6, r6, #8
 80072aa:	d1f8      	bne.n	800729e <_strtol_l.constprop.0+0x22>
 80072ac:	2c2d      	cmp	r4, #45	@ 0x2d
 80072ae:	d12d      	bne.n	800730c <_strtol_l.constprop.0+0x90>
 80072b0:	2601      	movs	r6, #1
 80072b2:	782c      	ldrb	r4, [r5, #0]
 80072b4:	1c95      	adds	r5, r2, #2
 80072b6:	f033 0210 	bics.w	r2, r3, #16
 80072ba:	d109      	bne.n	80072d0 <_strtol_l.constprop.0+0x54>
 80072bc:	2c30      	cmp	r4, #48	@ 0x30
 80072be:	d12a      	bne.n	8007316 <_strtol_l.constprop.0+0x9a>
 80072c0:	782a      	ldrb	r2, [r5, #0]
 80072c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80072c6:	2a58      	cmp	r2, #88	@ 0x58
 80072c8:	d125      	bne.n	8007316 <_strtol_l.constprop.0+0x9a>
 80072ca:	2310      	movs	r3, #16
 80072cc:	786c      	ldrb	r4, [r5, #1]
 80072ce:	3502      	adds	r5, #2
 80072d0:	2200      	movs	r2, #0
 80072d2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80072d6:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 80072da:	fbbc f9f3 	udiv	r9, ip, r3
 80072de:	4610      	mov	r0, r2
 80072e0:	fb03 ca19 	mls	sl, r3, r9, ip
 80072e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80072e8:	2f09      	cmp	r7, #9
 80072ea:	d81b      	bhi.n	8007324 <_strtol_l.constprop.0+0xa8>
 80072ec:	463c      	mov	r4, r7
 80072ee:	42a3      	cmp	r3, r4
 80072f0:	dd27      	ble.n	8007342 <_strtol_l.constprop.0+0xc6>
 80072f2:	1c57      	adds	r7, r2, #1
 80072f4:	d007      	beq.n	8007306 <_strtol_l.constprop.0+0x8a>
 80072f6:	4581      	cmp	r9, r0
 80072f8:	d320      	bcc.n	800733c <_strtol_l.constprop.0+0xc0>
 80072fa:	d101      	bne.n	8007300 <_strtol_l.constprop.0+0x84>
 80072fc:	45a2      	cmp	sl, r4
 80072fe:	db1d      	blt.n	800733c <_strtol_l.constprop.0+0xc0>
 8007300:	2201      	movs	r2, #1
 8007302:	fb00 4003 	mla	r0, r0, r3, r4
 8007306:	f815 4b01 	ldrb.w	r4, [r5], #1
 800730a:	e7eb      	b.n	80072e4 <_strtol_l.constprop.0+0x68>
 800730c:	2c2b      	cmp	r4, #43	@ 0x2b
 800730e:	bf04      	itt	eq
 8007310:	782c      	ldrbeq	r4, [r5, #0]
 8007312:	1c95      	addeq	r5, r2, #2
 8007314:	e7cf      	b.n	80072b6 <_strtol_l.constprop.0+0x3a>
 8007316:	2b00      	cmp	r3, #0
 8007318:	d1da      	bne.n	80072d0 <_strtol_l.constprop.0+0x54>
 800731a:	2c30      	cmp	r4, #48	@ 0x30
 800731c:	bf0c      	ite	eq
 800731e:	2308      	moveq	r3, #8
 8007320:	230a      	movne	r3, #10
 8007322:	e7d5      	b.n	80072d0 <_strtol_l.constprop.0+0x54>
 8007324:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007328:	2f19      	cmp	r7, #25
 800732a:	d801      	bhi.n	8007330 <_strtol_l.constprop.0+0xb4>
 800732c:	3c37      	subs	r4, #55	@ 0x37
 800732e:	e7de      	b.n	80072ee <_strtol_l.constprop.0+0x72>
 8007330:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007334:	2f19      	cmp	r7, #25
 8007336:	d804      	bhi.n	8007342 <_strtol_l.constprop.0+0xc6>
 8007338:	3c57      	subs	r4, #87	@ 0x57
 800733a:	e7d8      	b.n	80072ee <_strtol_l.constprop.0+0x72>
 800733c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007340:	e7e1      	b.n	8007306 <_strtol_l.constprop.0+0x8a>
 8007342:	1c53      	adds	r3, r2, #1
 8007344:	d108      	bne.n	8007358 <_strtol_l.constprop.0+0xdc>
 8007346:	2322      	movs	r3, #34	@ 0x22
 8007348:	4660      	mov	r0, ip
 800734a:	f8ce 3000 	str.w	r3, [lr]
 800734e:	f1b8 0f00 	cmp.w	r8, #0
 8007352:	d0a0      	beq.n	8007296 <_strtol_l.constprop.0+0x1a>
 8007354:	1e69      	subs	r1, r5, #1
 8007356:	e006      	b.n	8007366 <_strtol_l.constprop.0+0xea>
 8007358:	b106      	cbz	r6, 800735c <_strtol_l.constprop.0+0xe0>
 800735a:	4240      	negs	r0, r0
 800735c:	f1b8 0f00 	cmp.w	r8, #0
 8007360:	d099      	beq.n	8007296 <_strtol_l.constprop.0+0x1a>
 8007362:	2a00      	cmp	r2, #0
 8007364:	d1f6      	bne.n	8007354 <_strtol_l.constprop.0+0xd8>
 8007366:	f8c8 1000 	str.w	r1, [r8]
 800736a:	e794      	b.n	8007296 <_strtol_l.constprop.0+0x1a>
 800736c:	0800af61 	.word	0x0800af61

08007370 <_strtol_r>:
 8007370:	f7ff bf84 	b.w	800727c <_strtol_l.constprop.0>

08007374 <_fwalk_sglue>:
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007378:	4607      	mov	r7, r0
 800737a:	4688      	mov	r8, r1
 800737c:	4614      	mov	r4, r2
 800737e:	2600      	movs	r6, #0
 8007380:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007384:	f1b9 0901 	subs.w	r9, r9, #1
 8007388:	d505      	bpl.n	8007396 <_fwalk_sglue+0x22>
 800738a:	6824      	ldr	r4, [r4, #0]
 800738c:	2c00      	cmp	r4, #0
 800738e:	d1f7      	bne.n	8007380 <_fwalk_sglue+0xc>
 8007390:	4630      	mov	r0, r6
 8007392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007396:	89ab      	ldrh	r3, [r5, #12]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d907      	bls.n	80073ac <_fwalk_sglue+0x38>
 800739c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80073a0:	3301      	adds	r3, #1
 80073a2:	d003      	beq.n	80073ac <_fwalk_sglue+0x38>
 80073a4:	4629      	mov	r1, r5
 80073a6:	4638      	mov	r0, r7
 80073a8:	47c0      	blx	r8
 80073aa:	4306      	orrs	r6, r0
 80073ac:	3568      	adds	r5, #104	@ 0x68
 80073ae:	e7e9      	b.n	8007384 <_fwalk_sglue+0x10>

080073b0 <iprintf>:
 80073b0:	b40f      	push	{r0, r1, r2, r3}
 80073b2:	b507      	push	{r0, r1, r2, lr}
 80073b4:	4906      	ldr	r1, [pc, #24]	@ (80073d0 <iprintf+0x20>)
 80073b6:	ab04      	add	r3, sp, #16
 80073b8:	6808      	ldr	r0, [r1, #0]
 80073ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80073be:	6881      	ldr	r1, [r0, #8]
 80073c0:	9301      	str	r3, [sp, #4]
 80073c2:	f001 fe3f 	bl	8009044 <_vfiprintf_r>
 80073c6:	b003      	add	sp, #12
 80073c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80073cc:	b004      	add	sp, #16
 80073ce:	4770      	bx	lr
 80073d0:	200001ac 	.word	0x200001ac

080073d4 <_puts_r>:
 80073d4:	6a03      	ldr	r3, [r0, #32]
 80073d6:	b570      	push	{r4, r5, r6, lr}
 80073d8:	4605      	mov	r5, r0
 80073da:	460e      	mov	r6, r1
 80073dc:	6884      	ldr	r4, [r0, #8]
 80073de:	b90b      	cbnz	r3, 80073e4 <_puts_r+0x10>
 80073e0:	f7ff f932 	bl	8006648 <__sinit>
 80073e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073e6:	07db      	lsls	r3, r3, #31
 80073e8:	d405      	bmi.n	80073f6 <_puts_r+0x22>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	0598      	lsls	r0, r3, #22
 80073ee:	d402      	bmi.n	80073f6 <_puts_r+0x22>
 80073f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073f2:	f000 f8dc 	bl	80075ae <__retarget_lock_acquire_recursive>
 80073f6:	89a3      	ldrh	r3, [r4, #12]
 80073f8:	0719      	lsls	r1, r3, #28
 80073fa:	d502      	bpl.n	8007402 <_puts_r+0x2e>
 80073fc:	6923      	ldr	r3, [r4, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d135      	bne.n	800746e <_puts_r+0x9a>
 8007402:	4621      	mov	r1, r4
 8007404:	4628      	mov	r0, r5
 8007406:	f002 ffe5 	bl	800a3d4 <__swsetup_r>
 800740a:	b380      	cbz	r0, 800746e <_puts_r+0x9a>
 800740c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8007410:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007412:	07da      	lsls	r2, r3, #31
 8007414:	d405      	bmi.n	8007422 <_puts_r+0x4e>
 8007416:	89a3      	ldrh	r3, [r4, #12]
 8007418:	059b      	lsls	r3, r3, #22
 800741a:	d402      	bmi.n	8007422 <_puts_r+0x4e>
 800741c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800741e:	f000 f8c7 	bl	80075b0 <__retarget_lock_release_recursive>
 8007422:	4628      	mov	r0, r5
 8007424:	bd70      	pop	{r4, r5, r6, pc}
 8007426:	2b00      	cmp	r3, #0
 8007428:	da04      	bge.n	8007434 <_puts_r+0x60>
 800742a:	69a2      	ldr	r2, [r4, #24]
 800742c:	429a      	cmp	r2, r3
 800742e:	dc17      	bgt.n	8007460 <_puts_r+0x8c>
 8007430:	290a      	cmp	r1, #10
 8007432:	d015      	beq.n	8007460 <_puts_r+0x8c>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	6022      	str	r2, [r4, #0]
 800743a:	7019      	strb	r1, [r3, #0]
 800743c:	68a3      	ldr	r3, [r4, #8]
 800743e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007442:	3b01      	subs	r3, #1
 8007444:	60a3      	str	r3, [r4, #8]
 8007446:	2900      	cmp	r1, #0
 8007448:	d1ed      	bne.n	8007426 <_puts_r+0x52>
 800744a:	2b00      	cmp	r3, #0
 800744c:	da11      	bge.n	8007472 <_puts_r+0x9e>
 800744e:	4622      	mov	r2, r4
 8007450:	210a      	movs	r1, #10
 8007452:	4628      	mov	r0, r5
 8007454:	f002 ff80 	bl	800a358 <__swbuf_r>
 8007458:	3001      	adds	r0, #1
 800745a:	d0d7      	beq.n	800740c <_puts_r+0x38>
 800745c:	250a      	movs	r5, #10
 800745e:	e7d7      	b.n	8007410 <_puts_r+0x3c>
 8007460:	4622      	mov	r2, r4
 8007462:	4628      	mov	r0, r5
 8007464:	f002 ff78 	bl	800a358 <__swbuf_r>
 8007468:	3001      	adds	r0, #1
 800746a:	d1e7      	bne.n	800743c <_puts_r+0x68>
 800746c:	e7ce      	b.n	800740c <_puts_r+0x38>
 800746e:	3e01      	subs	r6, #1
 8007470:	e7e4      	b.n	800743c <_puts_r+0x68>
 8007472:	6823      	ldr	r3, [r4, #0]
 8007474:	1c5a      	adds	r2, r3, #1
 8007476:	6022      	str	r2, [r4, #0]
 8007478:	220a      	movs	r2, #10
 800747a:	701a      	strb	r2, [r3, #0]
 800747c:	e7ee      	b.n	800745c <_puts_r+0x88>
	...

08007480 <puts>:
 8007480:	4b02      	ldr	r3, [pc, #8]	@ (800748c <puts+0xc>)
 8007482:	4601      	mov	r1, r0
 8007484:	6818      	ldr	r0, [r3, #0]
 8007486:	f7ff bfa5 	b.w	80073d4 <_puts_r>
 800748a:	bf00      	nop
 800748c:	200001ac 	.word	0x200001ac

08007490 <strncmp>:
 8007490:	b510      	push	{r4, lr}
 8007492:	b16a      	cbz	r2, 80074b0 <strncmp+0x20>
 8007494:	3901      	subs	r1, #1
 8007496:	1884      	adds	r4, r0, r2
 8007498:	f810 2b01 	ldrb.w	r2, [r0], #1
 800749c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d103      	bne.n	80074ac <strncmp+0x1c>
 80074a4:	42a0      	cmp	r0, r4
 80074a6:	d001      	beq.n	80074ac <strncmp+0x1c>
 80074a8:	2a00      	cmp	r2, #0
 80074aa:	d1f5      	bne.n	8007498 <strncmp+0x8>
 80074ac:	1ad0      	subs	r0, r2, r3
 80074ae:	bd10      	pop	{r4, pc}
 80074b0:	4610      	mov	r0, r2
 80074b2:	e7fc      	b.n	80074ae <strncmp+0x1e>

080074b4 <memset>:
 80074b4:	4603      	mov	r3, r0
 80074b6:	4402      	add	r2, r0
 80074b8:	4293      	cmp	r3, r2
 80074ba:	d100      	bne.n	80074be <memset+0xa>
 80074bc:	4770      	bx	lr
 80074be:	f803 1b01 	strb.w	r1, [r3], #1
 80074c2:	e7f9      	b.n	80074b8 <memset+0x4>

080074c4 <_localeconv_r>:
 80074c4:	4800      	ldr	r0, [pc, #0]	@ (80074c8 <_localeconv_r+0x4>)
 80074c6:	4770      	bx	lr
 80074c8:	20000130 	.word	0x20000130

080074cc <_close_r>:
 80074cc:	b538      	push	{r3, r4, r5, lr}
 80074ce:	2300      	movs	r3, #0
 80074d0:	4d05      	ldr	r5, [pc, #20]	@ (80074e8 <_close_r+0x1c>)
 80074d2:	4604      	mov	r4, r0
 80074d4:	4608      	mov	r0, r1
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	f7fa f9d1 	bl	800187e <_close>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_close_r+0x1a>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_close_r+0x1a>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	20000c0c 	.word	0x20000c0c

080074ec <_lseek_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4604      	mov	r4, r0
 80074f0:	4608      	mov	r0, r1
 80074f2:	4611      	mov	r1, r2
 80074f4:	2200      	movs	r2, #0
 80074f6:	4d05      	ldr	r5, [pc, #20]	@ (800750c <_lseek_r+0x20>)
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7fa f9e3 	bl	80018c6 <_lseek>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_lseek_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_lseek_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	20000c0c 	.word	0x20000c0c

08007510 <_read_r>:
 8007510:	b538      	push	{r3, r4, r5, lr}
 8007512:	4604      	mov	r4, r0
 8007514:	4608      	mov	r0, r1
 8007516:	4611      	mov	r1, r2
 8007518:	2200      	movs	r2, #0
 800751a:	4d05      	ldr	r5, [pc, #20]	@ (8007530 <_read_r+0x20>)
 800751c:	602a      	str	r2, [r5, #0]
 800751e:	461a      	mov	r2, r3
 8007520:	f7fa f974 	bl	800180c <_read>
 8007524:	1c43      	adds	r3, r0, #1
 8007526:	d102      	bne.n	800752e <_read_r+0x1e>
 8007528:	682b      	ldr	r3, [r5, #0]
 800752a:	b103      	cbz	r3, 800752e <_read_r+0x1e>
 800752c:	6023      	str	r3, [r4, #0]
 800752e:	bd38      	pop	{r3, r4, r5, pc}
 8007530:	20000c0c 	.word	0x20000c0c

08007534 <_write_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4604      	mov	r4, r0
 8007538:	4608      	mov	r0, r1
 800753a:	4611      	mov	r1, r2
 800753c:	2200      	movs	r2, #0
 800753e:	4d05      	ldr	r5, [pc, #20]	@ (8007554 <_write_r+0x20>)
 8007540:	602a      	str	r2, [r5, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	f7fa f97f 	bl	8001846 <_write>
 8007548:	1c43      	adds	r3, r0, #1
 800754a:	d102      	bne.n	8007552 <_write_r+0x1e>
 800754c:	682b      	ldr	r3, [r5, #0]
 800754e:	b103      	cbz	r3, 8007552 <_write_r+0x1e>
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	bd38      	pop	{r3, r4, r5, pc}
 8007554:	20000c0c 	.word	0x20000c0c

08007558 <__errno>:
 8007558:	4b01      	ldr	r3, [pc, #4]	@ (8007560 <__errno+0x8>)
 800755a:	6818      	ldr	r0, [r3, #0]
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop
 8007560:	200001ac 	.word	0x200001ac

08007564 <__libc_init_array>:
 8007564:	b570      	push	{r4, r5, r6, lr}
 8007566:	2600      	movs	r6, #0
 8007568:	4d0c      	ldr	r5, [pc, #48]	@ (800759c <__libc_init_array+0x38>)
 800756a:	4c0d      	ldr	r4, [pc, #52]	@ (80075a0 <__libc_init_array+0x3c>)
 800756c:	1b64      	subs	r4, r4, r5
 800756e:	10a4      	asrs	r4, r4, #2
 8007570:	42a6      	cmp	r6, r4
 8007572:	d109      	bne.n	8007588 <__libc_init_array+0x24>
 8007574:	f003 f8d6 	bl	800a724 <_init>
 8007578:	2600      	movs	r6, #0
 800757a:	4d0a      	ldr	r5, [pc, #40]	@ (80075a4 <__libc_init_array+0x40>)
 800757c:	4c0a      	ldr	r4, [pc, #40]	@ (80075a8 <__libc_init_array+0x44>)
 800757e:	1b64      	subs	r4, r4, r5
 8007580:	10a4      	asrs	r4, r4, #2
 8007582:	42a6      	cmp	r6, r4
 8007584:	d105      	bne.n	8007592 <__libc_init_array+0x2e>
 8007586:	bd70      	pop	{r4, r5, r6, pc}
 8007588:	f855 3b04 	ldr.w	r3, [r5], #4
 800758c:	4798      	blx	r3
 800758e:	3601      	adds	r6, #1
 8007590:	e7ee      	b.n	8007570 <__libc_init_array+0xc>
 8007592:	f855 3b04 	ldr.w	r3, [r5], #4
 8007596:	4798      	blx	r3
 8007598:	3601      	adds	r6, #1
 800759a:	e7f2      	b.n	8007582 <__libc_init_array+0x1e>
 800759c:	0800b314 	.word	0x0800b314
 80075a0:	0800b314 	.word	0x0800b314
 80075a4:	0800b314 	.word	0x0800b314
 80075a8:	0800b318 	.word	0x0800b318

080075ac <__retarget_lock_init_recursive>:
 80075ac:	4770      	bx	lr

080075ae <__retarget_lock_acquire_recursive>:
 80075ae:	4770      	bx	lr

080075b0 <__retarget_lock_release_recursive>:
 80075b0:	4770      	bx	lr

080075b2 <memchr>:
 80075b2:	4603      	mov	r3, r0
 80075b4:	b510      	push	{r4, lr}
 80075b6:	b2c9      	uxtb	r1, r1
 80075b8:	4402      	add	r2, r0
 80075ba:	4293      	cmp	r3, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	d101      	bne.n	80075c4 <memchr+0x12>
 80075c0:	2000      	movs	r0, #0
 80075c2:	e003      	b.n	80075cc <memchr+0x1a>
 80075c4:	7804      	ldrb	r4, [r0, #0]
 80075c6:	3301      	adds	r3, #1
 80075c8:	428c      	cmp	r4, r1
 80075ca:	d1f6      	bne.n	80075ba <memchr+0x8>
 80075cc:	bd10      	pop	{r4, pc}

080075ce <memcpy>:
 80075ce:	440a      	add	r2, r1
 80075d0:	4291      	cmp	r1, r2
 80075d2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80075d6:	d100      	bne.n	80075da <memcpy+0xc>
 80075d8:	4770      	bx	lr
 80075da:	b510      	push	{r4, lr}
 80075dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075e0:	4291      	cmp	r1, r2
 80075e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075e6:	d1f9      	bne.n	80075dc <memcpy+0xe>
 80075e8:	bd10      	pop	{r4, pc}

080075ea <strcpy>:
 80075ea:	4603      	mov	r3, r0
 80075ec:	f811 2b01 	ldrb.w	r2, [r1], #1
 80075f0:	f803 2b01 	strb.w	r2, [r3], #1
 80075f4:	2a00      	cmp	r2, #0
 80075f6:	d1f9      	bne.n	80075ec <strcpy+0x2>
 80075f8:	4770      	bx	lr
	...

080075fc <nan>:
 80075fc:	2000      	movs	r0, #0
 80075fe:	4901      	ldr	r1, [pc, #4]	@ (8007604 <nan+0x8>)
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	7ff80000 	.word	0x7ff80000

08007608 <nanf>:
 8007608:	4800      	ldr	r0, [pc, #0]	@ (800760c <nanf+0x4>)
 800760a:	4770      	bx	lr
 800760c:	7fc00000 	.word	0x7fc00000

08007610 <quorem>:
 8007610:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007614:	6903      	ldr	r3, [r0, #16]
 8007616:	690c      	ldr	r4, [r1, #16]
 8007618:	4607      	mov	r7, r0
 800761a:	42a3      	cmp	r3, r4
 800761c:	db7e      	blt.n	800771c <quorem+0x10c>
 800761e:	3c01      	subs	r4, #1
 8007620:	00a3      	lsls	r3, r4, #2
 8007622:	f100 0514 	add.w	r5, r0, #20
 8007626:	f101 0814 	add.w	r8, r1, #20
 800762a:	9300      	str	r3, [sp, #0]
 800762c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007630:	9301      	str	r3, [sp, #4]
 8007632:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007636:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800763a:	3301      	adds	r3, #1
 800763c:	429a      	cmp	r2, r3
 800763e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007642:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007646:	d32e      	bcc.n	80076a6 <quorem+0x96>
 8007648:	f04f 0a00 	mov.w	sl, #0
 800764c:	46c4      	mov	ip, r8
 800764e:	46ae      	mov	lr, r5
 8007650:	46d3      	mov	fp, sl
 8007652:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007656:	b298      	uxth	r0, r3
 8007658:	fb06 a000 	mla	r0, r6, r0, sl
 800765c:	0c1b      	lsrs	r3, r3, #16
 800765e:	0c02      	lsrs	r2, r0, #16
 8007660:	fb06 2303 	mla	r3, r6, r3, r2
 8007664:	f8de 2000 	ldr.w	r2, [lr]
 8007668:	b280      	uxth	r0, r0
 800766a:	b292      	uxth	r2, r2
 800766c:	1a12      	subs	r2, r2, r0
 800766e:	445a      	add	r2, fp
 8007670:	f8de 0000 	ldr.w	r0, [lr]
 8007674:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007678:	b29b      	uxth	r3, r3
 800767a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800767e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007682:	b292      	uxth	r2, r2
 8007684:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007688:	45e1      	cmp	r9, ip
 800768a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800768e:	f84e 2b04 	str.w	r2, [lr], #4
 8007692:	d2de      	bcs.n	8007652 <quorem+0x42>
 8007694:	9b00      	ldr	r3, [sp, #0]
 8007696:	58eb      	ldr	r3, [r5, r3]
 8007698:	b92b      	cbnz	r3, 80076a6 <quorem+0x96>
 800769a:	9b01      	ldr	r3, [sp, #4]
 800769c:	3b04      	subs	r3, #4
 800769e:	429d      	cmp	r5, r3
 80076a0:	461a      	mov	r2, r3
 80076a2:	d32f      	bcc.n	8007704 <quorem+0xf4>
 80076a4:	613c      	str	r4, [r7, #16]
 80076a6:	4638      	mov	r0, r7
 80076a8:	f002 fb9c 	bl	8009de4 <__mcmp>
 80076ac:	2800      	cmp	r0, #0
 80076ae:	db25      	blt.n	80076fc <quorem+0xec>
 80076b0:	4629      	mov	r1, r5
 80076b2:	2000      	movs	r0, #0
 80076b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80076b8:	f8d1 c000 	ldr.w	ip, [r1]
 80076bc:	fa1f fe82 	uxth.w	lr, r2
 80076c0:	fa1f f38c 	uxth.w	r3, ip
 80076c4:	eba3 030e 	sub.w	r3, r3, lr
 80076c8:	4403      	add	r3, r0
 80076ca:	0c12      	lsrs	r2, r2, #16
 80076cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80076d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80076d4:	b29b      	uxth	r3, r3
 80076d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80076da:	45c1      	cmp	r9, r8
 80076dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80076e0:	f841 3b04 	str.w	r3, [r1], #4
 80076e4:	d2e6      	bcs.n	80076b4 <quorem+0xa4>
 80076e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80076ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80076ee:	b922      	cbnz	r2, 80076fa <quorem+0xea>
 80076f0:	3b04      	subs	r3, #4
 80076f2:	429d      	cmp	r5, r3
 80076f4:	461a      	mov	r2, r3
 80076f6:	d30b      	bcc.n	8007710 <quorem+0x100>
 80076f8:	613c      	str	r4, [r7, #16]
 80076fa:	3601      	adds	r6, #1
 80076fc:	4630      	mov	r0, r6
 80076fe:	b003      	add	sp, #12
 8007700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007704:	6812      	ldr	r2, [r2, #0]
 8007706:	3b04      	subs	r3, #4
 8007708:	2a00      	cmp	r2, #0
 800770a:	d1cb      	bne.n	80076a4 <quorem+0x94>
 800770c:	3c01      	subs	r4, #1
 800770e:	e7c6      	b.n	800769e <quorem+0x8e>
 8007710:	6812      	ldr	r2, [r2, #0]
 8007712:	3b04      	subs	r3, #4
 8007714:	2a00      	cmp	r2, #0
 8007716:	d1ef      	bne.n	80076f8 <quorem+0xe8>
 8007718:	3c01      	subs	r4, #1
 800771a:	e7ea      	b.n	80076f2 <quorem+0xe2>
 800771c:	2000      	movs	r0, #0
 800771e:	e7ee      	b.n	80076fe <quorem+0xee>

08007720 <_dtoa_r>:
 8007720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007724:	4614      	mov	r4, r2
 8007726:	461d      	mov	r5, r3
 8007728:	69c7      	ldr	r7, [r0, #28]
 800772a:	b097      	sub	sp, #92	@ 0x5c
 800772c:	4683      	mov	fp, r0
 800772e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007732:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007734:	b97f      	cbnz	r7, 8007756 <_dtoa_r+0x36>
 8007736:	2010      	movs	r0, #16
 8007738:	f001 fd9c 	bl	8009274 <malloc>
 800773c:	4602      	mov	r2, r0
 800773e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007742:	b920      	cbnz	r0, 800774e <_dtoa_r+0x2e>
 8007744:	21ef      	movs	r1, #239	@ 0xef
 8007746:	4ba8      	ldr	r3, [pc, #672]	@ (80079e8 <_dtoa_r+0x2c8>)
 8007748:	48a8      	ldr	r0, [pc, #672]	@ (80079ec <_dtoa_r+0x2cc>)
 800774a:	f002 ff53 	bl	800a5f4 <__assert_func>
 800774e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007752:	6007      	str	r7, [r0, #0]
 8007754:	60c7      	str	r7, [r0, #12]
 8007756:	f8db 301c 	ldr.w	r3, [fp, #28]
 800775a:	6819      	ldr	r1, [r3, #0]
 800775c:	b159      	cbz	r1, 8007776 <_dtoa_r+0x56>
 800775e:	685a      	ldr	r2, [r3, #4]
 8007760:	2301      	movs	r3, #1
 8007762:	4093      	lsls	r3, r2
 8007764:	604a      	str	r2, [r1, #4]
 8007766:	608b      	str	r3, [r1, #8]
 8007768:	4658      	mov	r0, fp
 800776a:	f002 f8b9 	bl	80098e0 <_Bfree>
 800776e:	2200      	movs	r2, #0
 8007770:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007774:	601a      	str	r2, [r3, #0]
 8007776:	1e2b      	subs	r3, r5, #0
 8007778:	bfaf      	iteee	ge
 800777a:	2300      	movge	r3, #0
 800777c:	2201      	movlt	r2, #1
 800777e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007782:	9303      	strlt	r3, [sp, #12]
 8007784:	bfa8      	it	ge
 8007786:	6033      	strge	r3, [r6, #0]
 8007788:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800778c:	4b98      	ldr	r3, [pc, #608]	@ (80079f0 <_dtoa_r+0x2d0>)
 800778e:	bfb8      	it	lt
 8007790:	6032      	strlt	r2, [r6, #0]
 8007792:	ea33 0308 	bics.w	r3, r3, r8
 8007796:	d112      	bne.n	80077be <_dtoa_r+0x9e>
 8007798:	f242 730f 	movw	r3, #9999	@ 0x270f
 800779c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80077a4:	4323      	orrs	r3, r4
 80077a6:	f000 8550 	beq.w	800824a <_dtoa_r+0xb2a>
 80077aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80079f4 <_dtoa_r+0x2d4>
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	f000 8552 	beq.w	800825a <_dtoa_r+0xb3a>
 80077b6:	f10a 0303 	add.w	r3, sl, #3
 80077ba:	f000 bd4c 	b.w	8008256 <_dtoa_r+0xb36>
 80077be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80077c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80077c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077ca:	2200      	movs	r2, #0
 80077cc:	2300      	movs	r3, #0
 80077ce:	f7f9 f8eb 	bl	80009a8 <__aeabi_dcmpeq>
 80077d2:	4607      	mov	r7, r0
 80077d4:	b158      	cbz	r0, 80077ee <_dtoa_r+0xce>
 80077d6:	2301      	movs	r3, #1
 80077d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80077de:	b113      	cbz	r3, 80077e6 <_dtoa_r+0xc6>
 80077e0:	4b85      	ldr	r3, [pc, #532]	@ (80079f8 <_dtoa_r+0x2d8>)
 80077e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80077e4:	6013      	str	r3, [r2, #0]
 80077e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80079fc <_dtoa_r+0x2dc>
 80077ea:	f000 bd36 	b.w	800825a <_dtoa_r+0xb3a>
 80077ee:	ab14      	add	r3, sp, #80	@ 0x50
 80077f0:	9301      	str	r3, [sp, #4]
 80077f2:	ab15      	add	r3, sp, #84	@ 0x54
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	4658      	mov	r0, fp
 80077f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80077fc:	f002 fc0a 	bl	800a014 <__d2b>
 8007800:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007804:	4681      	mov	r9, r0
 8007806:	2e00      	cmp	r6, #0
 8007808:	d077      	beq.n	80078fa <_dtoa_r+0x1da>
 800780a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800780e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007810:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007814:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007818:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800781c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007820:	9712      	str	r7, [sp, #72]	@ 0x48
 8007822:	4619      	mov	r1, r3
 8007824:	2200      	movs	r2, #0
 8007826:	4b76      	ldr	r3, [pc, #472]	@ (8007a00 <_dtoa_r+0x2e0>)
 8007828:	f7f8 fc9e 	bl	8000168 <__aeabi_dsub>
 800782c:	a368      	add	r3, pc, #416	@ (adr r3, 80079d0 <_dtoa_r+0x2b0>)
 800782e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007832:	f7f8 fe51 	bl	80004d8 <__aeabi_dmul>
 8007836:	a368      	add	r3, pc, #416	@ (adr r3, 80079d8 <_dtoa_r+0x2b8>)
 8007838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783c:	f7f8 fc96 	bl	800016c <__adddf3>
 8007840:	4604      	mov	r4, r0
 8007842:	4630      	mov	r0, r6
 8007844:	460d      	mov	r5, r1
 8007846:	f7f8 fddd 	bl	8000404 <__aeabi_i2d>
 800784a:	a365      	add	r3, pc, #404	@ (adr r3, 80079e0 <_dtoa_r+0x2c0>)
 800784c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007850:	f7f8 fe42 	bl	80004d8 <__aeabi_dmul>
 8007854:	4602      	mov	r2, r0
 8007856:	460b      	mov	r3, r1
 8007858:	4620      	mov	r0, r4
 800785a:	4629      	mov	r1, r5
 800785c:	f7f8 fc86 	bl	800016c <__adddf3>
 8007860:	4604      	mov	r4, r0
 8007862:	460d      	mov	r5, r1
 8007864:	f7f9 f8e8 	bl	8000a38 <__aeabi_d2iz>
 8007868:	2200      	movs	r2, #0
 800786a:	4607      	mov	r7, r0
 800786c:	2300      	movs	r3, #0
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f9 f8a3 	bl	80009bc <__aeabi_dcmplt>
 8007876:	b140      	cbz	r0, 800788a <_dtoa_r+0x16a>
 8007878:	4638      	mov	r0, r7
 800787a:	f7f8 fdc3 	bl	8000404 <__aeabi_i2d>
 800787e:	4622      	mov	r2, r4
 8007880:	462b      	mov	r3, r5
 8007882:	f7f9 f891 	bl	80009a8 <__aeabi_dcmpeq>
 8007886:	b900      	cbnz	r0, 800788a <_dtoa_r+0x16a>
 8007888:	3f01      	subs	r7, #1
 800788a:	2f16      	cmp	r7, #22
 800788c:	d853      	bhi.n	8007936 <_dtoa_r+0x216>
 800788e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007892:	4b5c      	ldr	r3, [pc, #368]	@ (8007a04 <_dtoa_r+0x2e4>)
 8007894:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800789c:	f7f9 f88e 	bl	80009bc <__aeabi_dcmplt>
 80078a0:	2800      	cmp	r0, #0
 80078a2:	d04a      	beq.n	800793a <_dtoa_r+0x21a>
 80078a4:	2300      	movs	r3, #0
 80078a6:	3f01      	subs	r7, #1
 80078a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80078aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80078ac:	1b9b      	subs	r3, r3, r6
 80078ae:	1e5a      	subs	r2, r3, #1
 80078b0:	bf46      	itte	mi
 80078b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80078b6:	2300      	movmi	r3, #0
 80078b8:	f04f 0800 	movpl.w	r8, #0
 80078bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80078be:	bf48      	it	mi
 80078c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80078c2:	2f00      	cmp	r7, #0
 80078c4:	db3b      	blt.n	800793e <_dtoa_r+0x21e>
 80078c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80078ca:	443b      	add	r3, r7
 80078cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80078ce:	2300      	movs	r3, #0
 80078d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80078d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078d4:	2b09      	cmp	r3, #9
 80078d6:	d866      	bhi.n	80079a6 <_dtoa_r+0x286>
 80078d8:	2b05      	cmp	r3, #5
 80078da:	bfc4      	itt	gt
 80078dc:	3b04      	subgt	r3, #4
 80078de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80078e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80078e2:	bfc8      	it	gt
 80078e4:	2400      	movgt	r4, #0
 80078e6:	f1a3 0302 	sub.w	r3, r3, #2
 80078ea:	bfd8      	it	le
 80078ec:	2401      	movle	r4, #1
 80078ee:	2b03      	cmp	r3, #3
 80078f0:	d864      	bhi.n	80079bc <_dtoa_r+0x29c>
 80078f2:	e8df f003 	tbb	[pc, r3]
 80078f6:	382b      	.short	0x382b
 80078f8:	5636      	.short	0x5636
 80078fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80078fe:	441e      	add	r6, r3
 8007900:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007904:	2b20      	cmp	r3, #32
 8007906:	bfc1      	itttt	gt
 8007908:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800790c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007910:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007914:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007918:	bfd6      	itet	le
 800791a:	f1c3 0320 	rsble	r3, r3, #32
 800791e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007922:	fa04 f003 	lslle.w	r0, r4, r3
 8007926:	f7f8 fd5d 	bl	80003e4 <__aeabi_ui2d>
 800792a:	2201      	movs	r2, #1
 800792c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007930:	3e01      	subs	r6, #1
 8007932:	9212      	str	r2, [sp, #72]	@ 0x48
 8007934:	e775      	b.n	8007822 <_dtoa_r+0x102>
 8007936:	2301      	movs	r3, #1
 8007938:	e7b6      	b.n	80078a8 <_dtoa_r+0x188>
 800793a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800793c:	e7b5      	b.n	80078aa <_dtoa_r+0x18a>
 800793e:	427b      	negs	r3, r7
 8007940:	930a      	str	r3, [sp, #40]	@ 0x28
 8007942:	2300      	movs	r3, #0
 8007944:	eba8 0807 	sub.w	r8, r8, r7
 8007948:	930e      	str	r3, [sp, #56]	@ 0x38
 800794a:	e7c2      	b.n	80078d2 <_dtoa_r+0x1b2>
 800794c:	2300      	movs	r3, #0
 800794e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007950:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007952:	2b00      	cmp	r3, #0
 8007954:	dc35      	bgt.n	80079c2 <_dtoa_r+0x2a2>
 8007956:	2301      	movs	r3, #1
 8007958:	461a      	mov	r2, r3
 800795a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800795e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007960:	e00b      	b.n	800797a <_dtoa_r+0x25a>
 8007962:	2301      	movs	r3, #1
 8007964:	e7f3      	b.n	800794e <_dtoa_r+0x22e>
 8007966:	2300      	movs	r3, #0
 8007968:	930b      	str	r3, [sp, #44]	@ 0x2c
 800796a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800796c:	18fb      	adds	r3, r7, r3
 800796e:	9308      	str	r3, [sp, #32]
 8007970:	3301      	adds	r3, #1
 8007972:	2b01      	cmp	r3, #1
 8007974:	9307      	str	r3, [sp, #28]
 8007976:	bfb8      	it	lt
 8007978:	2301      	movlt	r3, #1
 800797a:	2100      	movs	r1, #0
 800797c:	2204      	movs	r2, #4
 800797e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007982:	f102 0514 	add.w	r5, r2, #20
 8007986:	429d      	cmp	r5, r3
 8007988:	d91f      	bls.n	80079ca <_dtoa_r+0x2aa>
 800798a:	6041      	str	r1, [r0, #4]
 800798c:	4658      	mov	r0, fp
 800798e:	f001 ff67 	bl	8009860 <_Balloc>
 8007992:	4682      	mov	sl, r0
 8007994:	2800      	cmp	r0, #0
 8007996:	d139      	bne.n	8007a0c <_dtoa_r+0x2ec>
 8007998:	4602      	mov	r2, r0
 800799a:	f240 11af 	movw	r1, #431	@ 0x1af
 800799e:	4b1a      	ldr	r3, [pc, #104]	@ (8007a08 <_dtoa_r+0x2e8>)
 80079a0:	e6d2      	b.n	8007748 <_dtoa_r+0x28>
 80079a2:	2301      	movs	r3, #1
 80079a4:	e7e0      	b.n	8007968 <_dtoa_r+0x248>
 80079a6:	2401      	movs	r4, #1
 80079a8:	2300      	movs	r3, #0
 80079aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80079ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80079ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079b2:	2200      	movs	r2, #0
 80079b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079b8:	2312      	movs	r3, #18
 80079ba:	e7d0      	b.n	800795e <_dtoa_r+0x23e>
 80079bc:	2301      	movs	r3, #1
 80079be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80079c0:	e7f5      	b.n	80079ae <_dtoa_r+0x28e>
 80079c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80079c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80079c8:	e7d7      	b.n	800797a <_dtoa_r+0x25a>
 80079ca:	3101      	adds	r1, #1
 80079cc:	0052      	lsls	r2, r2, #1
 80079ce:	e7d8      	b.n	8007982 <_dtoa_r+0x262>
 80079d0:	636f4361 	.word	0x636f4361
 80079d4:	3fd287a7 	.word	0x3fd287a7
 80079d8:	8b60c8b3 	.word	0x8b60c8b3
 80079dc:	3fc68a28 	.word	0x3fc68a28
 80079e0:	509f79fb 	.word	0x509f79fb
 80079e4:	3fd34413 	.word	0x3fd34413
 80079e8:	0800b06e 	.word	0x0800b06e
 80079ec:	0800b085 	.word	0x0800b085
 80079f0:	7ff00000 	.word	0x7ff00000
 80079f4:	0800b06a 	.word	0x0800b06a
 80079f8:	0800b176 	.word	0x0800b176
 80079fc:	0800b175 	.word	0x0800b175
 8007a00:	3ff80000 	.word	0x3ff80000
 8007a04:	0800b208 	.word	0x0800b208
 8007a08:	0800b0dd 	.word	0x0800b0dd
 8007a0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a10:	6018      	str	r0, [r3, #0]
 8007a12:	9b07      	ldr	r3, [sp, #28]
 8007a14:	2b0e      	cmp	r3, #14
 8007a16:	f200 80a4 	bhi.w	8007b62 <_dtoa_r+0x442>
 8007a1a:	2c00      	cmp	r4, #0
 8007a1c:	f000 80a1 	beq.w	8007b62 <_dtoa_r+0x442>
 8007a20:	2f00      	cmp	r7, #0
 8007a22:	dd33      	ble.n	8007a8c <_dtoa_r+0x36c>
 8007a24:	4b86      	ldr	r3, [pc, #536]	@ (8007c40 <_dtoa_r+0x520>)
 8007a26:	f007 020f 	and.w	r2, r7, #15
 8007a2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007a2e:	05f8      	lsls	r0, r7, #23
 8007a30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007a34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007a38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007a3c:	d516      	bpl.n	8007a6c <_dtoa_r+0x34c>
 8007a3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a42:	4b80      	ldr	r3, [pc, #512]	@ (8007c44 <_dtoa_r+0x524>)
 8007a44:	2603      	movs	r6, #3
 8007a46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007a4a:	f7f8 fe6f 	bl	800072c <__aeabi_ddiv>
 8007a4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a52:	f004 040f 	and.w	r4, r4, #15
 8007a56:	4d7b      	ldr	r5, [pc, #492]	@ (8007c44 <_dtoa_r+0x524>)
 8007a58:	b954      	cbnz	r4, 8007a70 <_dtoa_r+0x350>
 8007a5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007a5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a62:	f7f8 fe63 	bl	800072c <__aeabi_ddiv>
 8007a66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a6a:	e028      	b.n	8007abe <_dtoa_r+0x39e>
 8007a6c:	2602      	movs	r6, #2
 8007a6e:	e7f2      	b.n	8007a56 <_dtoa_r+0x336>
 8007a70:	07e1      	lsls	r1, r4, #31
 8007a72:	d508      	bpl.n	8007a86 <_dtoa_r+0x366>
 8007a74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007a78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007a7c:	f7f8 fd2c 	bl	80004d8 <__aeabi_dmul>
 8007a80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007a84:	3601      	adds	r6, #1
 8007a86:	1064      	asrs	r4, r4, #1
 8007a88:	3508      	adds	r5, #8
 8007a8a:	e7e5      	b.n	8007a58 <_dtoa_r+0x338>
 8007a8c:	f000 80d2 	beq.w	8007c34 <_dtoa_r+0x514>
 8007a90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a94:	427c      	negs	r4, r7
 8007a96:	4b6a      	ldr	r3, [pc, #424]	@ (8007c40 <_dtoa_r+0x520>)
 8007a98:	f004 020f 	and.w	r2, r4, #15
 8007a9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007aa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa4:	f7f8 fd18 	bl	80004d8 <__aeabi_dmul>
 8007aa8:	2602      	movs	r6, #2
 8007aaa:	2300      	movs	r3, #0
 8007aac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ab0:	4d64      	ldr	r5, [pc, #400]	@ (8007c44 <_dtoa_r+0x524>)
 8007ab2:	1124      	asrs	r4, r4, #4
 8007ab4:	2c00      	cmp	r4, #0
 8007ab6:	f040 80b2 	bne.w	8007c1e <_dtoa_r+0x4fe>
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1d3      	bne.n	8007a66 <_dtoa_r+0x346>
 8007abe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007ac2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	f000 80b7 	beq.w	8007c38 <_dtoa_r+0x518>
 8007aca:	2200      	movs	r2, #0
 8007acc:	4620      	mov	r0, r4
 8007ace:	4629      	mov	r1, r5
 8007ad0:	4b5d      	ldr	r3, [pc, #372]	@ (8007c48 <_dtoa_r+0x528>)
 8007ad2:	f7f8 ff73 	bl	80009bc <__aeabi_dcmplt>
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	f000 80ae 	beq.w	8007c38 <_dtoa_r+0x518>
 8007adc:	9b07      	ldr	r3, [sp, #28]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f000 80aa 	beq.w	8007c38 <_dtoa_r+0x518>
 8007ae4:	9b08      	ldr	r3, [sp, #32]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	dd37      	ble.n	8007b5a <_dtoa_r+0x43a>
 8007aea:	1e7b      	subs	r3, r7, #1
 8007aec:	4620      	mov	r0, r4
 8007aee:	9304      	str	r3, [sp, #16]
 8007af0:	2200      	movs	r2, #0
 8007af2:	4629      	mov	r1, r5
 8007af4:	4b55      	ldr	r3, [pc, #340]	@ (8007c4c <_dtoa_r+0x52c>)
 8007af6:	f7f8 fcef 	bl	80004d8 <__aeabi_dmul>
 8007afa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007afe:	9c08      	ldr	r4, [sp, #32]
 8007b00:	3601      	adds	r6, #1
 8007b02:	4630      	mov	r0, r6
 8007b04:	f7f8 fc7e 	bl	8000404 <__aeabi_i2d>
 8007b08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007b0c:	f7f8 fce4 	bl	80004d8 <__aeabi_dmul>
 8007b10:	2200      	movs	r2, #0
 8007b12:	4b4f      	ldr	r3, [pc, #316]	@ (8007c50 <_dtoa_r+0x530>)
 8007b14:	f7f8 fb2a 	bl	800016c <__adddf3>
 8007b18:	4605      	mov	r5, r0
 8007b1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	f040 809a 	bne.w	8007c58 <_dtoa_r+0x538>
 8007b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8007c54 <_dtoa_r+0x534>)
 8007b2c:	f7f8 fb1c 	bl	8000168 <__aeabi_dsub>
 8007b30:	4602      	mov	r2, r0
 8007b32:	460b      	mov	r3, r1
 8007b34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4633      	mov	r3, r6
 8007b3c:	f7f8 ff5c 	bl	80009f8 <__aeabi_dcmpgt>
 8007b40:	2800      	cmp	r0, #0
 8007b42:	f040 828e 	bne.w	8008062 <_dtoa_r+0x942>
 8007b46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b4a:	462a      	mov	r2, r5
 8007b4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007b50:	f7f8 ff34 	bl	80009bc <__aeabi_dcmplt>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	f040 8127 	bne.w	8007da8 <_dtoa_r+0x688>
 8007b5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007b5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007b62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	f2c0 8163 	blt.w	8007e30 <_dtoa_r+0x710>
 8007b6a:	2f0e      	cmp	r7, #14
 8007b6c:	f300 8160 	bgt.w	8007e30 <_dtoa_r+0x710>
 8007b70:	4b33      	ldr	r3, [pc, #204]	@ (8007c40 <_dtoa_r+0x520>)
 8007b72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007b7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007b7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	da03      	bge.n	8007b8c <_dtoa_r+0x46c>
 8007b84:	9b07      	ldr	r3, [sp, #28]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	f340 8100 	ble.w	8007d8c <_dtoa_r+0x66c>
 8007b8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007b90:	4656      	mov	r6, sl
 8007b92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b96:	4620      	mov	r0, r4
 8007b98:	4629      	mov	r1, r5
 8007b9a:	f7f8 fdc7 	bl	800072c <__aeabi_ddiv>
 8007b9e:	f7f8 ff4b 	bl	8000a38 <__aeabi_d2iz>
 8007ba2:	4680      	mov	r8, r0
 8007ba4:	f7f8 fc2e 	bl	8000404 <__aeabi_i2d>
 8007ba8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bac:	f7f8 fc94 	bl	80004d8 <__aeabi_dmul>
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 fad6 	bl	8000168 <__aeabi_dsub>
 8007bbc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007bc0:	9d07      	ldr	r5, [sp, #28]
 8007bc2:	f806 4b01 	strb.w	r4, [r6], #1
 8007bc6:	eba6 040a 	sub.w	r4, r6, sl
 8007bca:	42a5      	cmp	r5, r4
 8007bcc:	4602      	mov	r2, r0
 8007bce:	460b      	mov	r3, r1
 8007bd0:	f040 8116 	bne.w	8007e00 <_dtoa_r+0x6e0>
 8007bd4:	f7f8 faca 	bl	800016c <__adddf3>
 8007bd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	f7f8 ff0a 	bl	80009f8 <__aeabi_dcmpgt>
 8007be4:	2800      	cmp	r0, #0
 8007be6:	f040 80f8 	bne.w	8007dda <_dtoa_r+0x6ba>
 8007bea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bee:	4620      	mov	r0, r4
 8007bf0:	4629      	mov	r1, r5
 8007bf2:	f7f8 fed9 	bl	80009a8 <__aeabi_dcmpeq>
 8007bf6:	b118      	cbz	r0, 8007c00 <_dtoa_r+0x4e0>
 8007bf8:	f018 0f01 	tst.w	r8, #1
 8007bfc:	f040 80ed 	bne.w	8007dda <_dtoa_r+0x6ba>
 8007c00:	4649      	mov	r1, r9
 8007c02:	4658      	mov	r0, fp
 8007c04:	f001 fe6c 	bl	80098e0 <_Bfree>
 8007c08:	2300      	movs	r3, #0
 8007c0a:	7033      	strb	r3, [r6, #0]
 8007c0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007c0e:	3701      	adds	r7, #1
 8007c10:	601f      	str	r7, [r3, #0]
 8007c12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 8320 	beq.w	800825a <_dtoa_r+0xb3a>
 8007c1a:	601e      	str	r6, [r3, #0]
 8007c1c:	e31d      	b.n	800825a <_dtoa_r+0xb3a>
 8007c1e:	07e2      	lsls	r2, r4, #31
 8007c20:	d505      	bpl.n	8007c2e <_dtoa_r+0x50e>
 8007c22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c26:	f7f8 fc57 	bl	80004d8 <__aeabi_dmul>
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	3601      	adds	r6, #1
 8007c2e:	1064      	asrs	r4, r4, #1
 8007c30:	3508      	adds	r5, #8
 8007c32:	e73f      	b.n	8007ab4 <_dtoa_r+0x394>
 8007c34:	2602      	movs	r6, #2
 8007c36:	e742      	b.n	8007abe <_dtoa_r+0x39e>
 8007c38:	9c07      	ldr	r4, [sp, #28]
 8007c3a:	9704      	str	r7, [sp, #16]
 8007c3c:	e761      	b.n	8007b02 <_dtoa_r+0x3e2>
 8007c3e:	bf00      	nop
 8007c40:	0800b208 	.word	0x0800b208
 8007c44:	0800b1e0 	.word	0x0800b1e0
 8007c48:	3ff00000 	.word	0x3ff00000
 8007c4c:	40240000 	.word	0x40240000
 8007c50:	401c0000 	.word	0x401c0000
 8007c54:	40140000 	.word	0x40140000
 8007c58:	4b70      	ldr	r3, [pc, #448]	@ (8007e1c <_dtoa_r+0x6fc>)
 8007c5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007c5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007c60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007c64:	4454      	add	r4, sl
 8007c66:	2900      	cmp	r1, #0
 8007c68:	d045      	beq.n	8007cf6 <_dtoa_r+0x5d6>
 8007c6a:	2000      	movs	r0, #0
 8007c6c:	496c      	ldr	r1, [pc, #432]	@ (8007e20 <_dtoa_r+0x700>)
 8007c6e:	f7f8 fd5d 	bl	800072c <__aeabi_ddiv>
 8007c72:	4633      	mov	r3, r6
 8007c74:	462a      	mov	r2, r5
 8007c76:	f7f8 fa77 	bl	8000168 <__aeabi_dsub>
 8007c7a:	4656      	mov	r6, sl
 8007c7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007c80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c84:	f7f8 fed8 	bl	8000a38 <__aeabi_d2iz>
 8007c88:	4605      	mov	r5, r0
 8007c8a:	f7f8 fbbb 	bl	8000404 <__aeabi_i2d>
 8007c8e:	4602      	mov	r2, r0
 8007c90:	460b      	mov	r3, r1
 8007c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c96:	f7f8 fa67 	bl	8000168 <__aeabi_dsub>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	460b      	mov	r3, r1
 8007c9e:	3530      	adds	r5, #48	@ 0x30
 8007ca0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007ca4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007ca8:	f806 5b01 	strb.w	r5, [r6], #1
 8007cac:	f7f8 fe86 	bl	80009bc <__aeabi_dcmplt>
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	d163      	bne.n	8007d7c <_dtoa_r+0x65c>
 8007cb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cb8:	2000      	movs	r0, #0
 8007cba:	495a      	ldr	r1, [pc, #360]	@ (8007e24 <_dtoa_r+0x704>)
 8007cbc:	f7f8 fa54 	bl	8000168 <__aeabi_dsub>
 8007cc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007cc4:	f7f8 fe7a 	bl	80009bc <__aeabi_dcmplt>
 8007cc8:	2800      	cmp	r0, #0
 8007cca:	f040 8087 	bne.w	8007ddc <_dtoa_r+0x6bc>
 8007cce:	42a6      	cmp	r6, r4
 8007cd0:	f43f af43 	beq.w	8007b5a <_dtoa_r+0x43a>
 8007cd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007cd8:	2200      	movs	r2, #0
 8007cda:	4b53      	ldr	r3, [pc, #332]	@ (8007e28 <_dtoa_r+0x708>)
 8007cdc:	f7f8 fbfc 	bl	80004d8 <__aeabi_dmul>
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cea:	4b4f      	ldr	r3, [pc, #316]	@ (8007e28 <_dtoa_r+0x708>)
 8007cec:	f7f8 fbf4 	bl	80004d8 <__aeabi_dmul>
 8007cf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cf4:	e7c4      	b.n	8007c80 <_dtoa_r+0x560>
 8007cf6:	4631      	mov	r1, r6
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f7f8 fbed 	bl	80004d8 <__aeabi_dmul>
 8007cfe:	4656      	mov	r6, sl
 8007d00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007d04:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d0a:	f7f8 fe95 	bl	8000a38 <__aeabi_d2iz>
 8007d0e:	4605      	mov	r5, r0
 8007d10:	f7f8 fb78 	bl	8000404 <__aeabi_i2d>
 8007d14:	4602      	mov	r2, r0
 8007d16:	460b      	mov	r3, r1
 8007d18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d1c:	f7f8 fa24 	bl	8000168 <__aeabi_dsub>
 8007d20:	4602      	mov	r2, r0
 8007d22:	460b      	mov	r3, r1
 8007d24:	3530      	adds	r5, #48	@ 0x30
 8007d26:	f806 5b01 	strb.w	r5, [r6], #1
 8007d2a:	42a6      	cmp	r6, r4
 8007d2c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d30:	f04f 0200 	mov.w	r2, #0
 8007d34:	d124      	bne.n	8007d80 <_dtoa_r+0x660>
 8007d36:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007d3a:	4b39      	ldr	r3, [pc, #228]	@ (8007e20 <_dtoa_r+0x700>)
 8007d3c:	f7f8 fa16 	bl	800016c <__adddf3>
 8007d40:	4602      	mov	r2, r0
 8007d42:	460b      	mov	r3, r1
 8007d44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d48:	f7f8 fe56 	bl	80009f8 <__aeabi_dcmpgt>
 8007d4c:	2800      	cmp	r0, #0
 8007d4e:	d145      	bne.n	8007ddc <_dtoa_r+0x6bc>
 8007d50:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007d54:	2000      	movs	r0, #0
 8007d56:	4932      	ldr	r1, [pc, #200]	@ (8007e20 <_dtoa_r+0x700>)
 8007d58:	f7f8 fa06 	bl	8000168 <__aeabi_dsub>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d64:	f7f8 fe2a 	bl	80009bc <__aeabi_dcmplt>
 8007d68:	2800      	cmp	r0, #0
 8007d6a:	f43f aef6 	beq.w	8007b5a <_dtoa_r+0x43a>
 8007d6e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007d70:	1e73      	subs	r3, r6, #1
 8007d72:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007d74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007d78:	2b30      	cmp	r3, #48	@ 0x30
 8007d7a:	d0f8      	beq.n	8007d6e <_dtoa_r+0x64e>
 8007d7c:	9f04      	ldr	r7, [sp, #16]
 8007d7e:	e73f      	b.n	8007c00 <_dtoa_r+0x4e0>
 8007d80:	4b29      	ldr	r3, [pc, #164]	@ (8007e28 <_dtoa_r+0x708>)
 8007d82:	f7f8 fba9 	bl	80004d8 <__aeabi_dmul>
 8007d86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d8a:	e7bc      	b.n	8007d06 <_dtoa_r+0x5e6>
 8007d8c:	d10c      	bne.n	8007da8 <_dtoa_r+0x688>
 8007d8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d92:	2200      	movs	r2, #0
 8007d94:	4b25      	ldr	r3, [pc, #148]	@ (8007e2c <_dtoa_r+0x70c>)
 8007d96:	f7f8 fb9f 	bl	80004d8 <__aeabi_dmul>
 8007d9a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007d9e:	f7f8 fe21 	bl	80009e4 <__aeabi_dcmpge>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	f000 815b 	beq.w	800805e <_dtoa_r+0x93e>
 8007da8:	2400      	movs	r4, #0
 8007daa:	4625      	mov	r5, r4
 8007dac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007dae:	4656      	mov	r6, sl
 8007db0:	43db      	mvns	r3, r3
 8007db2:	9304      	str	r3, [sp, #16]
 8007db4:	2700      	movs	r7, #0
 8007db6:	4621      	mov	r1, r4
 8007db8:	4658      	mov	r0, fp
 8007dba:	f001 fd91 	bl	80098e0 <_Bfree>
 8007dbe:	2d00      	cmp	r5, #0
 8007dc0:	d0dc      	beq.n	8007d7c <_dtoa_r+0x65c>
 8007dc2:	b12f      	cbz	r7, 8007dd0 <_dtoa_r+0x6b0>
 8007dc4:	42af      	cmp	r7, r5
 8007dc6:	d003      	beq.n	8007dd0 <_dtoa_r+0x6b0>
 8007dc8:	4639      	mov	r1, r7
 8007dca:	4658      	mov	r0, fp
 8007dcc:	f001 fd88 	bl	80098e0 <_Bfree>
 8007dd0:	4629      	mov	r1, r5
 8007dd2:	4658      	mov	r0, fp
 8007dd4:	f001 fd84 	bl	80098e0 <_Bfree>
 8007dd8:	e7d0      	b.n	8007d7c <_dtoa_r+0x65c>
 8007dda:	9704      	str	r7, [sp, #16]
 8007ddc:	4633      	mov	r3, r6
 8007dde:	461e      	mov	r6, r3
 8007de0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007de4:	2a39      	cmp	r2, #57	@ 0x39
 8007de6:	d107      	bne.n	8007df8 <_dtoa_r+0x6d8>
 8007de8:	459a      	cmp	sl, r3
 8007dea:	d1f8      	bne.n	8007dde <_dtoa_r+0x6be>
 8007dec:	9a04      	ldr	r2, [sp, #16]
 8007dee:	3201      	adds	r2, #1
 8007df0:	9204      	str	r2, [sp, #16]
 8007df2:	2230      	movs	r2, #48	@ 0x30
 8007df4:	f88a 2000 	strb.w	r2, [sl]
 8007df8:	781a      	ldrb	r2, [r3, #0]
 8007dfa:	3201      	adds	r2, #1
 8007dfc:	701a      	strb	r2, [r3, #0]
 8007dfe:	e7bd      	b.n	8007d7c <_dtoa_r+0x65c>
 8007e00:	2200      	movs	r2, #0
 8007e02:	4b09      	ldr	r3, [pc, #36]	@ (8007e28 <_dtoa_r+0x708>)
 8007e04:	f7f8 fb68 	bl	80004d8 <__aeabi_dmul>
 8007e08:	2200      	movs	r2, #0
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	4604      	mov	r4, r0
 8007e0e:	460d      	mov	r5, r1
 8007e10:	f7f8 fdca 	bl	80009a8 <__aeabi_dcmpeq>
 8007e14:	2800      	cmp	r0, #0
 8007e16:	f43f aebc 	beq.w	8007b92 <_dtoa_r+0x472>
 8007e1a:	e6f1      	b.n	8007c00 <_dtoa_r+0x4e0>
 8007e1c:	0800b208 	.word	0x0800b208
 8007e20:	3fe00000 	.word	0x3fe00000
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	40240000 	.word	0x40240000
 8007e2c:	40140000 	.word	0x40140000
 8007e30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e32:	2a00      	cmp	r2, #0
 8007e34:	f000 80db 	beq.w	8007fee <_dtoa_r+0x8ce>
 8007e38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007e3a:	2a01      	cmp	r2, #1
 8007e3c:	f300 80bf 	bgt.w	8007fbe <_dtoa_r+0x89e>
 8007e40:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007e42:	2a00      	cmp	r2, #0
 8007e44:	f000 80b7 	beq.w	8007fb6 <_dtoa_r+0x896>
 8007e48:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007e4c:	4646      	mov	r6, r8
 8007e4e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007e50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e52:	2101      	movs	r1, #1
 8007e54:	441a      	add	r2, r3
 8007e56:	4658      	mov	r0, fp
 8007e58:	4498      	add	r8, r3
 8007e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e5c:	f001 fe3e 	bl	8009adc <__i2b>
 8007e60:	4605      	mov	r5, r0
 8007e62:	b15e      	cbz	r6, 8007e7c <_dtoa_r+0x75c>
 8007e64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	dd08      	ble.n	8007e7c <_dtoa_r+0x75c>
 8007e6a:	42b3      	cmp	r3, r6
 8007e6c:	bfa8      	it	ge
 8007e6e:	4633      	movge	r3, r6
 8007e70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e72:	eba8 0803 	sub.w	r8, r8, r3
 8007e76:	1af6      	subs	r6, r6, r3
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e7e:	b1f3      	cbz	r3, 8007ebe <_dtoa_r+0x79e>
 8007e80:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	f000 80b7 	beq.w	8007ff6 <_dtoa_r+0x8d6>
 8007e88:	b18c      	cbz	r4, 8007eae <_dtoa_r+0x78e>
 8007e8a:	4629      	mov	r1, r5
 8007e8c:	4622      	mov	r2, r4
 8007e8e:	4658      	mov	r0, fp
 8007e90:	f001 fee2 	bl	8009c58 <__pow5mult>
 8007e94:	464a      	mov	r2, r9
 8007e96:	4601      	mov	r1, r0
 8007e98:	4605      	mov	r5, r0
 8007e9a:	4658      	mov	r0, fp
 8007e9c:	f001 fe34 	bl	8009b08 <__multiply>
 8007ea0:	4649      	mov	r1, r9
 8007ea2:	9004      	str	r0, [sp, #16]
 8007ea4:	4658      	mov	r0, fp
 8007ea6:	f001 fd1b 	bl	80098e0 <_Bfree>
 8007eaa:	9b04      	ldr	r3, [sp, #16]
 8007eac:	4699      	mov	r9, r3
 8007eae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007eb0:	1b1a      	subs	r2, r3, r4
 8007eb2:	d004      	beq.n	8007ebe <_dtoa_r+0x79e>
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	4658      	mov	r0, fp
 8007eb8:	f001 fece 	bl	8009c58 <__pow5mult>
 8007ebc:	4681      	mov	r9, r0
 8007ebe:	2101      	movs	r1, #1
 8007ec0:	4658      	mov	r0, fp
 8007ec2:	f001 fe0b 	bl	8009adc <__i2b>
 8007ec6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ec8:	4604      	mov	r4, r0
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 81c9 	beq.w	8008262 <_dtoa_r+0xb42>
 8007ed0:	461a      	mov	r2, r3
 8007ed2:	4601      	mov	r1, r0
 8007ed4:	4658      	mov	r0, fp
 8007ed6:	f001 febf 	bl	8009c58 <__pow5mult>
 8007eda:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007edc:	4604      	mov	r4, r0
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	f300 808f 	bgt.w	8008002 <_dtoa_r+0x8e2>
 8007ee4:	9b02      	ldr	r3, [sp, #8]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	f040 8087 	bne.w	8007ffa <_dtoa_r+0x8da>
 8007eec:	9b03      	ldr	r3, [sp, #12]
 8007eee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	f040 8083 	bne.w	8007ffe <_dtoa_r+0x8de>
 8007ef8:	9b03      	ldr	r3, [sp, #12]
 8007efa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007efe:	0d1b      	lsrs	r3, r3, #20
 8007f00:	051b      	lsls	r3, r3, #20
 8007f02:	b12b      	cbz	r3, 8007f10 <_dtoa_r+0x7f0>
 8007f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f06:	f108 0801 	add.w	r8, r8, #1
 8007f0a:	3301      	adds	r3, #1
 8007f0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f0e:	2301      	movs	r3, #1
 8007f10:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 81aa 	beq.w	800826e <_dtoa_r+0xb4e>
 8007f1a:	6923      	ldr	r3, [r4, #16]
 8007f1c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007f20:	6918      	ldr	r0, [r3, #16]
 8007f22:	f001 fd8f 	bl	8009a44 <__hi0bits>
 8007f26:	f1c0 0020 	rsb	r0, r0, #32
 8007f2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f2c:	4418      	add	r0, r3
 8007f2e:	f010 001f 	ands.w	r0, r0, #31
 8007f32:	d071      	beq.n	8008018 <_dtoa_r+0x8f8>
 8007f34:	f1c0 0320 	rsb	r3, r0, #32
 8007f38:	2b04      	cmp	r3, #4
 8007f3a:	dd65      	ble.n	8008008 <_dtoa_r+0x8e8>
 8007f3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f3e:	f1c0 001c 	rsb	r0, r0, #28
 8007f42:	4403      	add	r3, r0
 8007f44:	4480      	add	r8, r0
 8007f46:	4406      	add	r6, r0
 8007f48:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f4a:	f1b8 0f00 	cmp.w	r8, #0
 8007f4e:	dd05      	ble.n	8007f5c <_dtoa_r+0x83c>
 8007f50:	4649      	mov	r1, r9
 8007f52:	4642      	mov	r2, r8
 8007f54:	4658      	mov	r0, fp
 8007f56:	f001 fed9 	bl	8009d0c <__lshift>
 8007f5a:	4681      	mov	r9, r0
 8007f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	dd05      	ble.n	8007f6e <_dtoa_r+0x84e>
 8007f62:	4621      	mov	r1, r4
 8007f64:	461a      	mov	r2, r3
 8007f66:	4658      	mov	r0, fp
 8007f68:	f001 fed0 	bl	8009d0c <__lshift>
 8007f6c:	4604      	mov	r4, r0
 8007f6e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d053      	beq.n	800801c <_dtoa_r+0x8fc>
 8007f74:	4621      	mov	r1, r4
 8007f76:	4648      	mov	r0, r9
 8007f78:	f001 ff34 	bl	8009de4 <__mcmp>
 8007f7c:	2800      	cmp	r0, #0
 8007f7e:	da4d      	bge.n	800801c <_dtoa_r+0x8fc>
 8007f80:	1e7b      	subs	r3, r7, #1
 8007f82:	4649      	mov	r1, r9
 8007f84:	9304      	str	r3, [sp, #16]
 8007f86:	220a      	movs	r2, #10
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4658      	mov	r0, fp
 8007f8c:	f001 fcca 	bl	8009924 <__multadd>
 8007f90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f92:	4681      	mov	r9, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	f000 816c 	beq.w	8008272 <_dtoa_r+0xb52>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	4629      	mov	r1, r5
 8007f9e:	220a      	movs	r2, #10
 8007fa0:	4658      	mov	r0, fp
 8007fa2:	f001 fcbf 	bl	8009924 <__multadd>
 8007fa6:	9b08      	ldr	r3, [sp, #32]
 8007fa8:	4605      	mov	r5, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	dc61      	bgt.n	8008072 <_dtoa_r+0x952>
 8007fae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007fb0:	2b02      	cmp	r3, #2
 8007fb2:	dc3b      	bgt.n	800802c <_dtoa_r+0x90c>
 8007fb4:	e05d      	b.n	8008072 <_dtoa_r+0x952>
 8007fb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007fb8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007fbc:	e746      	b.n	8007e4c <_dtoa_r+0x72c>
 8007fbe:	9b07      	ldr	r3, [sp, #28]
 8007fc0:	1e5c      	subs	r4, r3, #1
 8007fc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007fc4:	42a3      	cmp	r3, r4
 8007fc6:	bfbf      	itttt	lt
 8007fc8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007fca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007fcc:	1ae3      	sublt	r3, r4, r3
 8007fce:	18d2      	addlt	r2, r2, r3
 8007fd0:	bfa8      	it	ge
 8007fd2:	1b1c      	subge	r4, r3, r4
 8007fd4:	9b07      	ldr	r3, [sp, #28]
 8007fd6:	bfbe      	ittt	lt
 8007fd8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007fda:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007fdc:	2400      	movlt	r4, #0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	bfb5      	itete	lt
 8007fe2:	eba8 0603 	sublt.w	r6, r8, r3
 8007fe6:	4646      	movge	r6, r8
 8007fe8:	2300      	movlt	r3, #0
 8007fea:	9b07      	ldrge	r3, [sp, #28]
 8007fec:	e730      	b.n	8007e50 <_dtoa_r+0x730>
 8007fee:	4646      	mov	r6, r8
 8007ff0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007ff2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ff4:	e735      	b.n	8007e62 <_dtoa_r+0x742>
 8007ff6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ff8:	e75c      	b.n	8007eb4 <_dtoa_r+0x794>
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e788      	b.n	8007f10 <_dtoa_r+0x7f0>
 8007ffe:	9b02      	ldr	r3, [sp, #8]
 8008000:	e786      	b.n	8007f10 <_dtoa_r+0x7f0>
 8008002:	2300      	movs	r3, #0
 8008004:	930a      	str	r3, [sp, #40]	@ 0x28
 8008006:	e788      	b.n	8007f1a <_dtoa_r+0x7fa>
 8008008:	d09f      	beq.n	8007f4a <_dtoa_r+0x82a>
 800800a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800800c:	331c      	adds	r3, #28
 800800e:	441a      	add	r2, r3
 8008010:	4498      	add	r8, r3
 8008012:	441e      	add	r6, r3
 8008014:	9209      	str	r2, [sp, #36]	@ 0x24
 8008016:	e798      	b.n	8007f4a <_dtoa_r+0x82a>
 8008018:	4603      	mov	r3, r0
 800801a:	e7f6      	b.n	800800a <_dtoa_r+0x8ea>
 800801c:	9b07      	ldr	r3, [sp, #28]
 800801e:	9704      	str	r7, [sp, #16]
 8008020:	2b00      	cmp	r3, #0
 8008022:	dc20      	bgt.n	8008066 <_dtoa_r+0x946>
 8008024:	9308      	str	r3, [sp, #32]
 8008026:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008028:	2b02      	cmp	r3, #2
 800802a:	dd1e      	ble.n	800806a <_dtoa_r+0x94a>
 800802c:	9b08      	ldr	r3, [sp, #32]
 800802e:	2b00      	cmp	r3, #0
 8008030:	f47f aebc 	bne.w	8007dac <_dtoa_r+0x68c>
 8008034:	4621      	mov	r1, r4
 8008036:	2205      	movs	r2, #5
 8008038:	4658      	mov	r0, fp
 800803a:	f001 fc73 	bl	8009924 <__multadd>
 800803e:	4601      	mov	r1, r0
 8008040:	4604      	mov	r4, r0
 8008042:	4648      	mov	r0, r9
 8008044:	f001 fece 	bl	8009de4 <__mcmp>
 8008048:	2800      	cmp	r0, #0
 800804a:	f77f aeaf 	ble.w	8007dac <_dtoa_r+0x68c>
 800804e:	2331      	movs	r3, #49	@ 0x31
 8008050:	4656      	mov	r6, sl
 8008052:	f806 3b01 	strb.w	r3, [r6], #1
 8008056:	9b04      	ldr	r3, [sp, #16]
 8008058:	3301      	adds	r3, #1
 800805a:	9304      	str	r3, [sp, #16]
 800805c:	e6aa      	b.n	8007db4 <_dtoa_r+0x694>
 800805e:	9c07      	ldr	r4, [sp, #28]
 8008060:	9704      	str	r7, [sp, #16]
 8008062:	4625      	mov	r5, r4
 8008064:	e7f3      	b.n	800804e <_dtoa_r+0x92e>
 8008066:	9b07      	ldr	r3, [sp, #28]
 8008068:	9308      	str	r3, [sp, #32]
 800806a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800806c:	2b00      	cmp	r3, #0
 800806e:	f000 8104 	beq.w	800827a <_dtoa_r+0xb5a>
 8008072:	2e00      	cmp	r6, #0
 8008074:	dd05      	ble.n	8008082 <_dtoa_r+0x962>
 8008076:	4629      	mov	r1, r5
 8008078:	4632      	mov	r2, r6
 800807a:	4658      	mov	r0, fp
 800807c:	f001 fe46 	bl	8009d0c <__lshift>
 8008080:	4605      	mov	r5, r0
 8008082:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008084:	2b00      	cmp	r3, #0
 8008086:	d05a      	beq.n	800813e <_dtoa_r+0xa1e>
 8008088:	4658      	mov	r0, fp
 800808a:	6869      	ldr	r1, [r5, #4]
 800808c:	f001 fbe8 	bl	8009860 <_Balloc>
 8008090:	4606      	mov	r6, r0
 8008092:	b928      	cbnz	r0, 80080a0 <_dtoa_r+0x980>
 8008094:	4602      	mov	r2, r0
 8008096:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800809a:	4b83      	ldr	r3, [pc, #524]	@ (80082a8 <_dtoa_r+0xb88>)
 800809c:	f7ff bb54 	b.w	8007748 <_dtoa_r+0x28>
 80080a0:	692a      	ldr	r2, [r5, #16]
 80080a2:	f105 010c 	add.w	r1, r5, #12
 80080a6:	3202      	adds	r2, #2
 80080a8:	0092      	lsls	r2, r2, #2
 80080aa:	300c      	adds	r0, #12
 80080ac:	f7ff fa8f 	bl	80075ce <memcpy>
 80080b0:	2201      	movs	r2, #1
 80080b2:	4631      	mov	r1, r6
 80080b4:	4658      	mov	r0, fp
 80080b6:	f001 fe29 	bl	8009d0c <__lshift>
 80080ba:	462f      	mov	r7, r5
 80080bc:	4605      	mov	r5, r0
 80080be:	f10a 0301 	add.w	r3, sl, #1
 80080c2:	9307      	str	r3, [sp, #28]
 80080c4:	9b08      	ldr	r3, [sp, #32]
 80080c6:	4453      	add	r3, sl
 80080c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080ca:	9b02      	ldr	r3, [sp, #8]
 80080cc:	f003 0301 	and.w	r3, r3, #1
 80080d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80080d2:	9b07      	ldr	r3, [sp, #28]
 80080d4:	4621      	mov	r1, r4
 80080d6:	3b01      	subs	r3, #1
 80080d8:	4648      	mov	r0, r9
 80080da:	9302      	str	r3, [sp, #8]
 80080dc:	f7ff fa98 	bl	8007610 <quorem>
 80080e0:	4639      	mov	r1, r7
 80080e2:	9008      	str	r0, [sp, #32]
 80080e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80080e8:	4648      	mov	r0, r9
 80080ea:	f001 fe7b 	bl	8009de4 <__mcmp>
 80080ee:	462a      	mov	r2, r5
 80080f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80080f2:	4621      	mov	r1, r4
 80080f4:	4658      	mov	r0, fp
 80080f6:	f001 fe91 	bl	8009e1c <__mdiff>
 80080fa:	68c2      	ldr	r2, [r0, #12]
 80080fc:	4606      	mov	r6, r0
 80080fe:	bb02      	cbnz	r2, 8008142 <_dtoa_r+0xa22>
 8008100:	4601      	mov	r1, r0
 8008102:	4648      	mov	r0, r9
 8008104:	f001 fe6e 	bl	8009de4 <__mcmp>
 8008108:	4602      	mov	r2, r0
 800810a:	4631      	mov	r1, r6
 800810c:	4658      	mov	r0, fp
 800810e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008110:	f001 fbe6 	bl	80098e0 <_Bfree>
 8008114:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008116:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008118:	9e07      	ldr	r6, [sp, #28]
 800811a:	ea43 0102 	orr.w	r1, r3, r2
 800811e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008120:	4319      	orrs	r1, r3
 8008122:	d110      	bne.n	8008146 <_dtoa_r+0xa26>
 8008124:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008128:	d029      	beq.n	800817e <_dtoa_r+0xa5e>
 800812a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	dd02      	ble.n	8008136 <_dtoa_r+0xa16>
 8008130:	9b08      	ldr	r3, [sp, #32]
 8008132:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008136:	9b02      	ldr	r3, [sp, #8]
 8008138:	f883 8000 	strb.w	r8, [r3]
 800813c:	e63b      	b.n	8007db6 <_dtoa_r+0x696>
 800813e:	4628      	mov	r0, r5
 8008140:	e7bb      	b.n	80080ba <_dtoa_r+0x99a>
 8008142:	2201      	movs	r2, #1
 8008144:	e7e1      	b.n	800810a <_dtoa_r+0x9ea>
 8008146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008148:	2b00      	cmp	r3, #0
 800814a:	db04      	blt.n	8008156 <_dtoa_r+0xa36>
 800814c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800814e:	430b      	orrs	r3, r1
 8008150:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008152:	430b      	orrs	r3, r1
 8008154:	d120      	bne.n	8008198 <_dtoa_r+0xa78>
 8008156:	2a00      	cmp	r2, #0
 8008158:	dded      	ble.n	8008136 <_dtoa_r+0xa16>
 800815a:	4649      	mov	r1, r9
 800815c:	2201      	movs	r2, #1
 800815e:	4658      	mov	r0, fp
 8008160:	f001 fdd4 	bl	8009d0c <__lshift>
 8008164:	4621      	mov	r1, r4
 8008166:	4681      	mov	r9, r0
 8008168:	f001 fe3c 	bl	8009de4 <__mcmp>
 800816c:	2800      	cmp	r0, #0
 800816e:	dc03      	bgt.n	8008178 <_dtoa_r+0xa58>
 8008170:	d1e1      	bne.n	8008136 <_dtoa_r+0xa16>
 8008172:	f018 0f01 	tst.w	r8, #1
 8008176:	d0de      	beq.n	8008136 <_dtoa_r+0xa16>
 8008178:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800817c:	d1d8      	bne.n	8008130 <_dtoa_r+0xa10>
 800817e:	2339      	movs	r3, #57	@ 0x39
 8008180:	9a02      	ldr	r2, [sp, #8]
 8008182:	7013      	strb	r3, [r2, #0]
 8008184:	4633      	mov	r3, r6
 8008186:	461e      	mov	r6, r3
 8008188:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800818c:	3b01      	subs	r3, #1
 800818e:	2a39      	cmp	r2, #57	@ 0x39
 8008190:	d052      	beq.n	8008238 <_dtoa_r+0xb18>
 8008192:	3201      	adds	r2, #1
 8008194:	701a      	strb	r2, [r3, #0]
 8008196:	e60e      	b.n	8007db6 <_dtoa_r+0x696>
 8008198:	2a00      	cmp	r2, #0
 800819a:	dd07      	ble.n	80081ac <_dtoa_r+0xa8c>
 800819c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80081a0:	d0ed      	beq.n	800817e <_dtoa_r+0xa5e>
 80081a2:	9a02      	ldr	r2, [sp, #8]
 80081a4:	f108 0301 	add.w	r3, r8, #1
 80081a8:	7013      	strb	r3, [r2, #0]
 80081aa:	e604      	b.n	8007db6 <_dtoa_r+0x696>
 80081ac:	9b07      	ldr	r3, [sp, #28]
 80081ae:	9a07      	ldr	r2, [sp, #28]
 80081b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80081b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d028      	beq.n	800820c <_dtoa_r+0xaec>
 80081ba:	4649      	mov	r1, r9
 80081bc:	2300      	movs	r3, #0
 80081be:	220a      	movs	r2, #10
 80081c0:	4658      	mov	r0, fp
 80081c2:	f001 fbaf 	bl	8009924 <__multadd>
 80081c6:	42af      	cmp	r7, r5
 80081c8:	4681      	mov	r9, r0
 80081ca:	f04f 0300 	mov.w	r3, #0
 80081ce:	f04f 020a 	mov.w	r2, #10
 80081d2:	4639      	mov	r1, r7
 80081d4:	4658      	mov	r0, fp
 80081d6:	d107      	bne.n	80081e8 <_dtoa_r+0xac8>
 80081d8:	f001 fba4 	bl	8009924 <__multadd>
 80081dc:	4607      	mov	r7, r0
 80081de:	4605      	mov	r5, r0
 80081e0:	9b07      	ldr	r3, [sp, #28]
 80081e2:	3301      	adds	r3, #1
 80081e4:	9307      	str	r3, [sp, #28]
 80081e6:	e774      	b.n	80080d2 <_dtoa_r+0x9b2>
 80081e8:	f001 fb9c 	bl	8009924 <__multadd>
 80081ec:	4629      	mov	r1, r5
 80081ee:	4607      	mov	r7, r0
 80081f0:	2300      	movs	r3, #0
 80081f2:	220a      	movs	r2, #10
 80081f4:	4658      	mov	r0, fp
 80081f6:	f001 fb95 	bl	8009924 <__multadd>
 80081fa:	4605      	mov	r5, r0
 80081fc:	e7f0      	b.n	80081e0 <_dtoa_r+0xac0>
 80081fe:	9b08      	ldr	r3, [sp, #32]
 8008200:	2700      	movs	r7, #0
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfcc      	ite	gt
 8008206:	461e      	movgt	r6, r3
 8008208:	2601      	movle	r6, #1
 800820a:	4456      	add	r6, sl
 800820c:	4649      	mov	r1, r9
 800820e:	2201      	movs	r2, #1
 8008210:	4658      	mov	r0, fp
 8008212:	f001 fd7b 	bl	8009d0c <__lshift>
 8008216:	4621      	mov	r1, r4
 8008218:	4681      	mov	r9, r0
 800821a:	f001 fde3 	bl	8009de4 <__mcmp>
 800821e:	2800      	cmp	r0, #0
 8008220:	dcb0      	bgt.n	8008184 <_dtoa_r+0xa64>
 8008222:	d102      	bne.n	800822a <_dtoa_r+0xb0a>
 8008224:	f018 0f01 	tst.w	r8, #1
 8008228:	d1ac      	bne.n	8008184 <_dtoa_r+0xa64>
 800822a:	4633      	mov	r3, r6
 800822c:	461e      	mov	r6, r3
 800822e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008232:	2a30      	cmp	r2, #48	@ 0x30
 8008234:	d0fa      	beq.n	800822c <_dtoa_r+0xb0c>
 8008236:	e5be      	b.n	8007db6 <_dtoa_r+0x696>
 8008238:	459a      	cmp	sl, r3
 800823a:	d1a4      	bne.n	8008186 <_dtoa_r+0xa66>
 800823c:	9b04      	ldr	r3, [sp, #16]
 800823e:	3301      	adds	r3, #1
 8008240:	9304      	str	r3, [sp, #16]
 8008242:	2331      	movs	r3, #49	@ 0x31
 8008244:	f88a 3000 	strb.w	r3, [sl]
 8008248:	e5b5      	b.n	8007db6 <_dtoa_r+0x696>
 800824a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800824c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80082ac <_dtoa_r+0xb8c>
 8008250:	b11b      	cbz	r3, 800825a <_dtoa_r+0xb3a>
 8008252:	f10a 0308 	add.w	r3, sl, #8
 8008256:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008258:	6013      	str	r3, [r2, #0]
 800825a:	4650      	mov	r0, sl
 800825c:	b017      	add	sp, #92	@ 0x5c
 800825e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008262:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008264:	2b01      	cmp	r3, #1
 8008266:	f77f ae3d 	ble.w	8007ee4 <_dtoa_r+0x7c4>
 800826a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800826c:	930a      	str	r3, [sp, #40]	@ 0x28
 800826e:	2001      	movs	r0, #1
 8008270:	e65b      	b.n	8007f2a <_dtoa_r+0x80a>
 8008272:	9b08      	ldr	r3, [sp, #32]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f77f aed6 	ble.w	8008026 <_dtoa_r+0x906>
 800827a:	4656      	mov	r6, sl
 800827c:	4621      	mov	r1, r4
 800827e:	4648      	mov	r0, r9
 8008280:	f7ff f9c6 	bl	8007610 <quorem>
 8008284:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008288:	9b08      	ldr	r3, [sp, #32]
 800828a:	f806 8b01 	strb.w	r8, [r6], #1
 800828e:	eba6 020a 	sub.w	r2, r6, sl
 8008292:	4293      	cmp	r3, r2
 8008294:	ddb3      	ble.n	80081fe <_dtoa_r+0xade>
 8008296:	4649      	mov	r1, r9
 8008298:	2300      	movs	r3, #0
 800829a:	220a      	movs	r2, #10
 800829c:	4658      	mov	r0, fp
 800829e:	f001 fb41 	bl	8009924 <__multadd>
 80082a2:	4681      	mov	r9, r0
 80082a4:	e7ea      	b.n	800827c <_dtoa_r+0xb5c>
 80082a6:	bf00      	nop
 80082a8:	0800b0dd 	.word	0x0800b0dd
 80082ac:	0800b061 	.word	0x0800b061

080082b0 <_free_r>:
 80082b0:	b538      	push	{r3, r4, r5, lr}
 80082b2:	4605      	mov	r5, r0
 80082b4:	2900      	cmp	r1, #0
 80082b6:	d040      	beq.n	800833a <_free_r+0x8a>
 80082b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082bc:	1f0c      	subs	r4, r1, #4
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfb8      	it	lt
 80082c2:	18e4      	addlt	r4, r4, r3
 80082c4:	f001 fac0 	bl	8009848 <__malloc_lock>
 80082c8:	4a1c      	ldr	r2, [pc, #112]	@ (800833c <_free_r+0x8c>)
 80082ca:	6813      	ldr	r3, [r2, #0]
 80082cc:	b933      	cbnz	r3, 80082dc <_free_r+0x2c>
 80082ce:	6063      	str	r3, [r4, #4]
 80082d0:	6014      	str	r4, [r2, #0]
 80082d2:	4628      	mov	r0, r5
 80082d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80082d8:	f001 babc 	b.w	8009854 <__malloc_unlock>
 80082dc:	42a3      	cmp	r3, r4
 80082de:	d908      	bls.n	80082f2 <_free_r+0x42>
 80082e0:	6820      	ldr	r0, [r4, #0]
 80082e2:	1821      	adds	r1, r4, r0
 80082e4:	428b      	cmp	r3, r1
 80082e6:	bf01      	itttt	eq
 80082e8:	6819      	ldreq	r1, [r3, #0]
 80082ea:	685b      	ldreq	r3, [r3, #4]
 80082ec:	1809      	addeq	r1, r1, r0
 80082ee:	6021      	streq	r1, [r4, #0]
 80082f0:	e7ed      	b.n	80082ce <_free_r+0x1e>
 80082f2:	461a      	mov	r2, r3
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	b10b      	cbz	r3, 80082fc <_free_r+0x4c>
 80082f8:	42a3      	cmp	r3, r4
 80082fa:	d9fa      	bls.n	80082f2 <_free_r+0x42>
 80082fc:	6811      	ldr	r1, [r2, #0]
 80082fe:	1850      	adds	r0, r2, r1
 8008300:	42a0      	cmp	r0, r4
 8008302:	d10b      	bne.n	800831c <_free_r+0x6c>
 8008304:	6820      	ldr	r0, [r4, #0]
 8008306:	4401      	add	r1, r0
 8008308:	1850      	adds	r0, r2, r1
 800830a:	4283      	cmp	r3, r0
 800830c:	6011      	str	r1, [r2, #0]
 800830e:	d1e0      	bne.n	80082d2 <_free_r+0x22>
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	685b      	ldr	r3, [r3, #4]
 8008314:	4408      	add	r0, r1
 8008316:	6010      	str	r0, [r2, #0]
 8008318:	6053      	str	r3, [r2, #4]
 800831a:	e7da      	b.n	80082d2 <_free_r+0x22>
 800831c:	d902      	bls.n	8008324 <_free_r+0x74>
 800831e:	230c      	movs	r3, #12
 8008320:	602b      	str	r3, [r5, #0]
 8008322:	e7d6      	b.n	80082d2 <_free_r+0x22>
 8008324:	6820      	ldr	r0, [r4, #0]
 8008326:	1821      	adds	r1, r4, r0
 8008328:	428b      	cmp	r3, r1
 800832a:	bf01      	itttt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	1809      	addeq	r1, r1, r0
 8008332:	6021      	streq	r1, [r4, #0]
 8008334:	6063      	str	r3, [r4, #4]
 8008336:	6054      	str	r4, [r2, #4]
 8008338:	e7cb      	b.n	80082d2 <_free_r+0x22>
 800833a:	bd38      	pop	{r3, r4, r5, pc}
 800833c:	20000c18 	.word	0x20000c18

08008340 <rshift>:
 8008340:	6903      	ldr	r3, [r0, #16]
 8008342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008346:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800834a:	f100 0414 	add.w	r4, r0, #20
 800834e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008352:	dd46      	ble.n	80083e2 <rshift+0xa2>
 8008354:	f011 011f 	ands.w	r1, r1, #31
 8008358:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800835c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008360:	d10c      	bne.n	800837c <rshift+0x3c>
 8008362:	4629      	mov	r1, r5
 8008364:	f100 0710 	add.w	r7, r0, #16
 8008368:	42b1      	cmp	r1, r6
 800836a:	d335      	bcc.n	80083d8 <rshift+0x98>
 800836c:	1a9b      	subs	r3, r3, r2
 800836e:	009b      	lsls	r3, r3, #2
 8008370:	1eea      	subs	r2, r5, #3
 8008372:	4296      	cmp	r6, r2
 8008374:	bf38      	it	cc
 8008376:	2300      	movcc	r3, #0
 8008378:	4423      	add	r3, r4
 800837a:	e015      	b.n	80083a8 <rshift+0x68>
 800837c:	46a1      	mov	r9, r4
 800837e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008382:	f1c1 0820 	rsb	r8, r1, #32
 8008386:	40cf      	lsrs	r7, r1
 8008388:	f105 0e04 	add.w	lr, r5, #4
 800838c:	4576      	cmp	r6, lr
 800838e:	46f4      	mov	ip, lr
 8008390:	d816      	bhi.n	80083c0 <rshift+0x80>
 8008392:	1a9a      	subs	r2, r3, r2
 8008394:	0092      	lsls	r2, r2, #2
 8008396:	3a04      	subs	r2, #4
 8008398:	3501      	adds	r5, #1
 800839a:	42ae      	cmp	r6, r5
 800839c:	bf38      	it	cc
 800839e:	2200      	movcc	r2, #0
 80083a0:	18a3      	adds	r3, r4, r2
 80083a2:	50a7      	str	r7, [r4, r2]
 80083a4:	b107      	cbz	r7, 80083a8 <rshift+0x68>
 80083a6:	3304      	adds	r3, #4
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	eba3 0204 	sub.w	r2, r3, r4
 80083ae:	bf08      	it	eq
 80083b0:	2300      	moveq	r3, #0
 80083b2:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80083b6:	6102      	str	r2, [r0, #16]
 80083b8:	bf08      	it	eq
 80083ba:	6143      	streq	r3, [r0, #20]
 80083bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083c0:	f8dc c000 	ldr.w	ip, [ip]
 80083c4:	fa0c fc08 	lsl.w	ip, ip, r8
 80083c8:	ea4c 0707 	orr.w	r7, ip, r7
 80083cc:	f849 7b04 	str.w	r7, [r9], #4
 80083d0:	f85e 7b04 	ldr.w	r7, [lr], #4
 80083d4:	40cf      	lsrs	r7, r1
 80083d6:	e7d9      	b.n	800838c <rshift+0x4c>
 80083d8:	f851 cb04 	ldr.w	ip, [r1], #4
 80083dc:	f847 cf04 	str.w	ip, [r7, #4]!
 80083e0:	e7c2      	b.n	8008368 <rshift+0x28>
 80083e2:	4623      	mov	r3, r4
 80083e4:	e7e0      	b.n	80083a8 <rshift+0x68>

080083e6 <__hexdig_fun>:
 80083e6:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80083ea:	2b09      	cmp	r3, #9
 80083ec:	d802      	bhi.n	80083f4 <__hexdig_fun+0xe>
 80083ee:	3820      	subs	r0, #32
 80083f0:	b2c0      	uxtb	r0, r0
 80083f2:	4770      	bx	lr
 80083f4:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80083f8:	2b05      	cmp	r3, #5
 80083fa:	d801      	bhi.n	8008400 <__hexdig_fun+0x1a>
 80083fc:	3847      	subs	r0, #71	@ 0x47
 80083fe:	e7f7      	b.n	80083f0 <__hexdig_fun+0xa>
 8008400:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8008404:	2b05      	cmp	r3, #5
 8008406:	d801      	bhi.n	800840c <__hexdig_fun+0x26>
 8008408:	3827      	subs	r0, #39	@ 0x27
 800840a:	e7f1      	b.n	80083f0 <__hexdig_fun+0xa>
 800840c:	2000      	movs	r0, #0
 800840e:	4770      	bx	lr

08008410 <__gethex>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	468a      	mov	sl, r1
 8008416:	4690      	mov	r8, r2
 8008418:	b085      	sub	sp, #20
 800841a:	9302      	str	r3, [sp, #8]
 800841c:	680b      	ldr	r3, [r1, #0]
 800841e:	9001      	str	r0, [sp, #4]
 8008420:	1c9c      	adds	r4, r3, #2
 8008422:	46a1      	mov	r9, r4
 8008424:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008428:	2830      	cmp	r0, #48	@ 0x30
 800842a:	d0fa      	beq.n	8008422 <__gethex+0x12>
 800842c:	eba9 0303 	sub.w	r3, r9, r3
 8008430:	f1a3 0b02 	sub.w	fp, r3, #2
 8008434:	f7ff ffd7 	bl	80083e6 <__hexdig_fun>
 8008438:	4605      	mov	r5, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d168      	bne.n	8008510 <__gethex+0x100>
 800843e:	2201      	movs	r2, #1
 8008440:	4648      	mov	r0, r9
 8008442:	499f      	ldr	r1, [pc, #636]	@ (80086c0 <__gethex+0x2b0>)
 8008444:	f7ff f824 	bl	8007490 <strncmp>
 8008448:	4607      	mov	r7, r0
 800844a:	2800      	cmp	r0, #0
 800844c:	d167      	bne.n	800851e <__gethex+0x10e>
 800844e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008452:	4626      	mov	r6, r4
 8008454:	f7ff ffc7 	bl	80083e6 <__hexdig_fun>
 8008458:	2800      	cmp	r0, #0
 800845a:	d062      	beq.n	8008522 <__gethex+0x112>
 800845c:	4623      	mov	r3, r4
 800845e:	7818      	ldrb	r0, [r3, #0]
 8008460:	4699      	mov	r9, r3
 8008462:	2830      	cmp	r0, #48	@ 0x30
 8008464:	f103 0301 	add.w	r3, r3, #1
 8008468:	d0f9      	beq.n	800845e <__gethex+0x4e>
 800846a:	f7ff ffbc 	bl	80083e6 <__hexdig_fun>
 800846e:	fab0 f580 	clz	r5, r0
 8008472:	f04f 0b01 	mov.w	fp, #1
 8008476:	096d      	lsrs	r5, r5, #5
 8008478:	464a      	mov	r2, r9
 800847a:	4616      	mov	r6, r2
 800847c:	7830      	ldrb	r0, [r6, #0]
 800847e:	3201      	adds	r2, #1
 8008480:	f7ff ffb1 	bl	80083e6 <__hexdig_fun>
 8008484:	2800      	cmp	r0, #0
 8008486:	d1f8      	bne.n	800847a <__gethex+0x6a>
 8008488:	2201      	movs	r2, #1
 800848a:	4630      	mov	r0, r6
 800848c:	498c      	ldr	r1, [pc, #560]	@ (80086c0 <__gethex+0x2b0>)
 800848e:	f7fe ffff 	bl	8007490 <strncmp>
 8008492:	2800      	cmp	r0, #0
 8008494:	d13f      	bne.n	8008516 <__gethex+0x106>
 8008496:	b944      	cbnz	r4, 80084aa <__gethex+0x9a>
 8008498:	1c74      	adds	r4, r6, #1
 800849a:	4622      	mov	r2, r4
 800849c:	4616      	mov	r6, r2
 800849e:	7830      	ldrb	r0, [r6, #0]
 80084a0:	3201      	adds	r2, #1
 80084a2:	f7ff ffa0 	bl	80083e6 <__hexdig_fun>
 80084a6:	2800      	cmp	r0, #0
 80084a8:	d1f8      	bne.n	800849c <__gethex+0x8c>
 80084aa:	1ba4      	subs	r4, r4, r6
 80084ac:	00a7      	lsls	r7, r4, #2
 80084ae:	7833      	ldrb	r3, [r6, #0]
 80084b0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 80084b4:	2b50      	cmp	r3, #80	@ 0x50
 80084b6:	d13e      	bne.n	8008536 <__gethex+0x126>
 80084b8:	7873      	ldrb	r3, [r6, #1]
 80084ba:	2b2b      	cmp	r3, #43	@ 0x2b
 80084bc:	d033      	beq.n	8008526 <__gethex+0x116>
 80084be:	2b2d      	cmp	r3, #45	@ 0x2d
 80084c0:	d034      	beq.n	800852c <__gethex+0x11c>
 80084c2:	2400      	movs	r4, #0
 80084c4:	1c71      	adds	r1, r6, #1
 80084c6:	7808      	ldrb	r0, [r1, #0]
 80084c8:	f7ff ff8d 	bl	80083e6 <__hexdig_fun>
 80084cc:	1e43      	subs	r3, r0, #1
 80084ce:	b2db      	uxtb	r3, r3
 80084d0:	2b18      	cmp	r3, #24
 80084d2:	d830      	bhi.n	8008536 <__gethex+0x126>
 80084d4:	f1a0 0210 	sub.w	r2, r0, #16
 80084d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80084dc:	f7ff ff83 	bl	80083e6 <__hexdig_fun>
 80084e0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80084e4:	fa5f fc8c 	uxtb.w	ip, ip
 80084e8:	f1bc 0f18 	cmp.w	ip, #24
 80084ec:	f04f 030a 	mov.w	r3, #10
 80084f0:	d91e      	bls.n	8008530 <__gethex+0x120>
 80084f2:	b104      	cbz	r4, 80084f6 <__gethex+0xe6>
 80084f4:	4252      	negs	r2, r2
 80084f6:	4417      	add	r7, r2
 80084f8:	f8ca 1000 	str.w	r1, [sl]
 80084fc:	b1ed      	cbz	r5, 800853a <__gethex+0x12a>
 80084fe:	f1bb 0f00 	cmp.w	fp, #0
 8008502:	bf0c      	ite	eq
 8008504:	2506      	moveq	r5, #6
 8008506:	2500      	movne	r5, #0
 8008508:	4628      	mov	r0, r5
 800850a:	b005      	add	sp, #20
 800850c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008510:	2500      	movs	r5, #0
 8008512:	462c      	mov	r4, r5
 8008514:	e7b0      	b.n	8008478 <__gethex+0x68>
 8008516:	2c00      	cmp	r4, #0
 8008518:	d1c7      	bne.n	80084aa <__gethex+0x9a>
 800851a:	4627      	mov	r7, r4
 800851c:	e7c7      	b.n	80084ae <__gethex+0x9e>
 800851e:	464e      	mov	r6, r9
 8008520:	462f      	mov	r7, r5
 8008522:	2501      	movs	r5, #1
 8008524:	e7c3      	b.n	80084ae <__gethex+0x9e>
 8008526:	2400      	movs	r4, #0
 8008528:	1cb1      	adds	r1, r6, #2
 800852a:	e7cc      	b.n	80084c6 <__gethex+0xb6>
 800852c:	2401      	movs	r4, #1
 800852e:	e7fb      	b.n	8008528 <__gethex+0x118>
 8008530:	fb03 0002 	mla	r0, r3, r2, r0
 8008534:	e7ce      	b.n	80084d4 <__gethex+0xc4>
 8008536:	4631      	mov	r1, r6
 8008538:	e7de      	b.n	80084f8 <__gethex+0xe8>
 800853a:	4629      	mov	r1, r5
 800853c:	eba6 0309 	sub.w	r3, r6, r9
 8008540:	3b01      	subs	r3, #1
 8008542:	2b07      	cmp	r3, #7
 8008544:	dc0a      	bgt.n	800855c <__gethex+0x14c>
 8008546:	9801      	ldr	r0, [sp, #4]
 8008548:	f001 f98a 	bl	8009860 <_Balloc>
 800854c:	4604      	mov	r4, r0
 800854e:	b940      	cbnz	r0, 8008562 <__gethex+0x152>
 8008550:	4602      	mov	r2, r0
 8008552:	21e4      	movs	r1, #228	@ 0xe4
 8008554:	4b5b      	ldr	r3, [pc, #364]	@ (80086c4 <__gethex+0x2b4>)
 8008556:	485c      	ldr	r0, [pc, #368]	@ (80086c8 <__gethex+0x2b8>)
 8008558:	f002 f84c 	bl	800a5f4 <__assert_func>
 800855c:	3101      	adds	r1, #1
 800855e:	105b      	asrs	r3, r3, #1
 8008560:	e7ef      	b.n	8008542 <__gethex+0x132>
 8008562:	2300      	movs	r3, #0
 8008564:	f100 0a14 	add.w	sl, r0, #20
 8008568:	4655      	mov	r5, sl
 800856a:	469b      	mov	fp, r3
 800856c:	45b1      	cmp	r9, r6
 800856e:	d337      	bcc.n	80085e0 <__gethex+0x1d0>
 8008570:	f845 bb04 	str.w	fp, [r5], #4
 8008574:	eba5 050a 	sub.w	r5, r5, sl
 8008578:	10ad      	asrs	r5, r5, #2
 800857a:	6125      	str	r5, [r4, #16]
 800857c:	4658      	mov	r0, fp
 800857e:	f001 fa61 	bl	8009a44 <__hi0bits>
 8008582:	016d      	lsls	r5, r5, #5
 8008584:	f8d8 6000 	ldr.w	r6, [r8]
 8008588:	1a2d      	subs	r5, r5, r0
 800858a:	42b5      	cmp	r5, r6
 800858c:	dd54      	ble.n	8008638 <__gethex+0x228>
 800858e:	1bad      	subs	r5, r5, r6
 8008590:	4629      	mov	r1, r5
 8008592:	4620      	mov	r0, r4
 8008594:	f001 fde9 	bl	800a16a <__any_on>
 8008598:	4681      	mov	r9, r0
 800859a:	b178      	cbz	r0, 80085bc <__gethex+0x1ac>
 800859c:	f04f 0901 	mov.w	r9, #1
 80085a0:	1e6b      	subs	r3, r5, #1
 80085a2:	1159      	asrs	r1, r3, #5
 80085a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80085a8:	f003 021f 	and.w	r2, r3, #31
 80085ac:	fa09 f202 	lsl.w	r2, r9, r2
 80085b0:	420a      	tst	r2, r1
 80085b2:	d003      	beq.n	80085bc <__gethex+0x1ac>
 80085b4:	454b      	cmp	r3, r9
 80085b6:	dc36      	bgt.n	8008626 <__gethex+0x216>
 80085b8:	f04f 0902 	mov.w	r9, #2
 80085bc:	4629      	mov	r1, r5
 80085be:	4620      	mov	r0, r4
 80085c0:	f7ff febe 	bl	8008340 <rshift>
 80085c4:	442f      	add	r7, r5
 80085c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80085ca:	42bb      	cmp	r3, r7
 80085cc:	da42      	bge.n	8008654 <__gethex+0x244>
 80085ce:	4621      	mov	r1, r4
 80085d0:	9801      	ldr	r0, [sp, #4]
 80085d2:	f001 f985 	bl	80098e0 <_Bfree>
 80085d6:	2300      	movs	r3, #0
 80085d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085da:	25a3      	movs	r5, #163	@ 0xa3
 80085dc:	6013      	str	r3, [r2, #0]
 80085de:	e793      	b.n	8008508 <__gethex+0xf8>
 80085e0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80085e4:	2a2e      	cmp	r2, #46	@ 0x2e
 80085e6:	d012      	beq.n	800860e <__gethex+0x1fe>
 80085e8:	2b20      	cmp	r3, #32
 80085ea:	d104      	bne.n	80085f6 <__gethex+0x1e6>
 80085ec:	f845 bb04 	str.w	fp, [r5], #4
 80085f0:	f04f 0b00 	mov.w	fp, #0
 80085f4:	465b      	mov	r3, fp
 80085f6:	7830      	ldrb	r0, [r6, #0]
 80085f8:	9303      	str	r3, [sp, #12]
 80085fa:	f7ff fef4 	bl	80083e6 <__hexdig_fun>
 80085fe:	9b03      	ldr	r3, [sp, #12]
 8008600:	f000 000f 	and.w	r0, r0, #15
 8008604:	4098      	lsls	r0, r3
 8008606:	ea4b 0b00 	orr.w	fp, fp, r0
 800860a:	3304      	adds	r3, #4
 800860c:	e7ae      	b.n	800856c <__gethex+0x15c>
 800860e:	45b1      	cmp	r9, r6
 8008610:	d8ea      	bhi.n	80085e8 <__gethex+0x1d8>
 8008612:	2201      	movs	r2, #1
 8008614:	4630      	mov	r0, r6
 8008616:	492a      	ldr	r1, [pc, #168]	@ (80086c0 <__gethex+0x2b0>)
 8008618:	9303      	str	r3, [sp, #12]
 800861a:	f7fe ff39 	bl	8007490 <strncmp>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	2800      	cmp	r0, #0
 8008622:	d1e1      	bne.n	80085e8 <__gethex+0x1d8>
 8008624:	e7a2      	b.n	800856c <__gethex+0x15c>
 8008626:	4620      	mov	r0, r4
 8008628:	1ea9      	subs	r1, r5, #2
 800862a:	f001 fd9e 	bl	800a16a <__any_on>
 800862e:	2800      	cmp	r0, #0
 8008630:	d0c2      	beq.n	80085b8 <__gethex+0x1a8>
 8008632:	f04f 0903 	mov.w	r9, #3
 8008636:	e7c1      	b.n	80085bc <__gethex+0x1ac>
 8008638:	da09      	bge.n	800864e <__gethex+0x23e>
 800863a:	1b75      	subs	r5, r6, r5
 800863c:	4621      	mov	r1, r4
 800863e:	462a      	mov	r2, r5
 8008640:	9801      	ldr	r0, [sp, #4]
 8008642:	f001 fb63 	bl	8009d0c <__lshift>
 8008646:	4604      	mov	r4, r0
 8008648:	1b7f      	subs	r7, r7, r5
 800864a:	f100 0a14 	add.w	sl, r0, #20
 800864e:	f04f 0900 	mov.w	r9, #0
 8008652:	e7b8      	b.n	80085c6 <__gethex+0x1b6>
 8008654:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008658:	42bd      	cmp	r5, r7
 800865a:	dd6f      	ble.n	800873c <__gethex+0x32c>
 800865c:	1bed      	subs	r5, r5, r7
 800865e:	42ae      	cmp	r6, r5
 8008660:	dc34      	bgt.n	80086cc <__gethex+0x2bc>
 8008662:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d022      	beq.n	80086b0 <__gethex+0x2a0>
 800866a:	2b03      	cmp	r3, #3
 800866c:	d024      	beq.n	80086b8 <__gethex+0x2a8>
 800866e:	2b01      	cmp	r3, #1
 8008670:	d115      	bne.n	800869e <__gethex+0x28e>
 8008672:	42ae      	cmp	r6, r5
 8008674:	d113      	bne.n	800869e <__gethex+0x28e>
 8008676:	2e01      	cmp	r6, #1
 8008678:	d10b      	bne.n	8008692 <__gethex+0x282>
 800867a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800867e:	9a02      	ldr	r2, [sp, #8]
 8008680:	2562      	movs	r5, #98	@ 0x62
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	2301      	movs	r3, #1
 8008686:	6123      	str	r3, [r4, #16]
 8008688:	f8ca 3000 	str.w	r3, [sl]
 800868c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800868e:	601c      	str	r4, [r3, #0]
 8008690:	e73a      	b.n	8008508 <__gethex+0xf8>
 8008692:	4620      	mov	r0, r4
 8008694:	1e71      	subs	r1, r6, #1
 8008696:	f001 fd68 	bl	800a16a <__any_on>
 800869a:	2800      	cmp	r0, #0
 800869c:	d1ed      	bne.n	800867a <__gethex+0x26a>
 800869e:	4621      	mov	r1, r4
 80086a0:	9801      	ldr	r0, [sp, #4]
 80086a2:	f001 f91d 	bl	80098e0 <_Bfree>
 80086a6:	2300      	movs	r3, #0
 80086a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80086aa:	2550      	movs	r5, #80	@ 0x50
 80086ac:	6013      	str	r3, [r2, #0]
 80086ae:	e72b      	b.n	8008508 <__gethex+0xf8>
 80086b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1f3      	bne.n	800869e <__gethex+0x28e>
 80086b6:	e7e0      	b.n	800867a <__gethex+0x26a>
 80086b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d1dd      	bne.n	800867a <__gethex+0x26a>
 80086be:	e7ee      	b.n	800869e <__gethex+0x28e>
 80086c0:	0800af01 	.word	0x0800af01
 80086c4:	0800b0dd 	.word	0x0800b0dd
 80086c8:	0800b0ee 	.word	0x0800b0ee
 80086cc:	1e6f      	subs	r7, r5, #1
 80086ce:	f1b9 0f00 	cmp.w	r9, #0
 80086d2:	d130      	bne.n	8008736 <__gethex+0x326>
 80086d4:	b127      	cbz	r7, 80086e0 <__gethex+0x2d0>
 80086d6:	4639      	mov	r1, r7
 80086d8:	4620      	mov	r0, r4
 80086da:	f001 fd46 	bl	800a16a <__any_on>
 80086de:	4681      	mov	r9, r0
 80086e0:	2301      	movs	r3, #1
 80086e2:	4629      	mov	r1, r5
 80086e4:	1b76      	subs	r6, r6, r5
 80086e6:	2502      	movs	r5, #2
 80086e8:	117a      	asrs	r2, r7, #5
 80086ea:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80086ee:	f007 071f 	and.w	r7, r7, #31
 80086f2:	40bb      	lsls	r3, r7
 80086f4:	4213      	tst	r3, r2
 80086f6:	4620      	mov	r0, r4
 80086f8:	bf18      	it	ne
 80086fa:	f049 0902 	orrne.w	r9, r9, #2
 80086fe:	f7ff fe1f 	bl	8008340 <rshift>
 8008702:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8008706:	f1b9 0f00 	cmp.w	r9, #0
 800870a:	d047      	beq.n	800879c <__gethex+0x38c>
 800870c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008710:	2b02      	cmp	r3, #2
 8008712:	d015      	beq.n	8008740 <__gethex+0x330>
 8008714:	2b03      	cmp	r3, #3
 8008716:	d017      	beq.n	8008748 <__gethex+0x338>
 8008718:	2b01      	cmp	r3, #1
 800871a:	d109      	bne.n	8008730 <__gethex+0x320>
 800871c:	f019 0f02 	tst.w	r9, #2
 8008720:	d006      	beq.n	8008730 <__gethex+0x320>
 8008722:	f8da 3000 	ldr.w	r3, [sl]
 8008726:	ea49 0903 	orr.w	r9, r9, r3
 800872a:	f019 0f01 	tst.w	r9, #1
 800872e:	d10e      	bne.n	800874e <__gethex+0x33e>
 8008730:	f045 0510 	orr.w	r5, r5, #16
 8008734:	e032      	b.n	800879c <__gethex+0x38c>
 8008736:	f04f 0901 	mov.w	r9, #1
 800873a:	e7d1      	b.n	80086e0 <__gethex+0x2d0>
 800873c:	2501      	movs	r5, #1
 800873e:	e7e2      	b.n	8008706 <__gethex+0x2f6>
 8008740:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008742:	f1c3 0301 	rsb	r3, r3, #1
 8008746:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008748:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800874a:	2b00      	cmp	r3, #0
 800874c:	d0f0      	beq.n	8008730 <__gethex+0x320>
 800874e:	f04f 0c00 	mov.w	ip, #0
 8008752:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008756:	f104 0314 	add.w	r3, r4, #20
 800875a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800875e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008762:	4618      	mov	r0, r3
 8008764:	f853 2b04 	ldr.w	r2, [r3], #4
 8008768:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800876c:	d01b      	beq.n	80087a6 <__gethex+0x396>
 800876e:	3201      	adds	r2, #1
 8008770:	6002      	str	r2, [r0, #0]
 8008772:	2d02      	cmp	r5, #2
 8008774:	f104 0314 	add.w	r3, r4, #20
 8008778:	d13c      	bne.n	80087f4 <__gethex+0x3e4>
 800877a:	f8d8 2000 	ldr.w	r2, [r8]
 800877e:	3a01      	subs	r2, #1
 8008780:	42b2      	cmp	r2, r6
 8008782:	d109      	bne.n	8008798 <__gethex+0x388>
 8008784:	2201      	movs	r2, #1
 8008786:	1171      	asrs	r1, r6, #5
 8008788:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800878c:	f006 061f 	and.w	r6, r6, #31
 8008790:	fa02 f606 	lsl.w	r6, r2, r6
 8008794:	421e      	tst	r6, r3
 8008796:	d13a      	bne.n	800880e <__gethex+0x3fe>
 8008798:	f045 0520 	orr.w	r5, r5, #32
 800879c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800879e:	601c      	str	r4, [r3, #0]
 80087a0:	9b02      	ldr	r3, [sp, #8]
 80087a2:	601f      	str	r7, [r3, #0]
 80087a4:	e6b0      	b.n	8008508 <__gethex+0xf8>
 80087a6:	4299      	cmp	r1, r3
 80087a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80087ac:	d8d9      	bhi.n	8008762 <__gethex+0x352>
 80087ae:	68a3      	ldr	r3, [r4, #8]
 80087b0:	459b      	cmp	fp, r3
 80087b2:	db17      	blt.n	80087e4 <__gethex+0x3d4>
 80087b4:	6861      	ldr	r1, [r4, #4]
 80087b6:	9801      	ldr	r0, [sp, #4]
 80087b8:	3101      	adds	r1, #1
 80087ba:	f001 f851 	bl	8009860 <_Balloc>
 80087be:	4681      	mov	r9, r0
 80087c0:	b918      	cbnz	r0, 80087ca <__gethex+0x3ba>
 80087c2:	4602      	mov	r2, r0
 80087c4:	2184      	movs	r1, #132	@ 0x84
 80087c6:	4b19      	ldr	r3, [pc, #100]	@ (800882c <__gethex+0x41c>)
 80087c8:	e6c5      	b.n	8008556 <__gethex+0x146>
 80087ca:	6922      	ldr	r2, [r4, #16]
 80087cc:	f104 010c 	add.w	r1, r4, #12
 80087d0:	3202      	adds	r2, #2
 80087d2:	0092      	lsls	r2, r2, #2
 80087d4:	300c      	adds	r0, #12
 80087d6:	f7fe fefa 	bl	80075ce <memcpy>
 80087da:	4621      	mov	r1, r4
 80087dc:	9801      	ldr	r0, [sp, #4]
 80087de:	f001 f87f 	bl	80098e0 <_Bfree>
 80087e2:	464c      	mov	r4, r9
 80087e4:	6923      	ldr	r3, [r4, #16]
 80087e6:	1c5a      	adds	r2, r3, #1
 80087e8:	6122      	str	r2, [r4, #16]
 80087ea:	2201      	movs	r2, #1
 80087ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80087f0:	615a      	str	r2, [r3, #20]
 80087f2:	e7be      	b.n	8008772 <__gethex+0x362>
 80087f4:	6922      	ldr	r2, [r4, #16]
 80087f6:	455a      	cmp	r2, fp
 80087f8:	dd0b      	ble.n	8008812 <__gethex+0x402>
 80087fa:	2101      	movs	r1, #1
 80087fc:	4620      	mov	r0, r4
 80087fe:	f7ff fd9f 	bl	8008340 <rshift>
 8008802:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008806:	3701      	adds	r7, #1
 8008808:	42bb      	cmp	r3, r7
 800880a:	f6ff aee0 	blt.w	80085ce <__gethex+0x1be>
 800880e:	2501      	movs	r5, #1
 8008810:	e7c2      	b.n	8008798 <__gethex+0x388>
 8008812:	f016 061f 	ands.w	r6, r6, #31
 8008816:	d0fa      	beq.n	800880e <__gethex+0x3fe>
 8008818:	4453      	add	r3, sl
 800881a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800881e:	f001 f911 	bl	8009a44 <__hi0bits>
 8008822:	f1c6 0620 	rsb	r6, r6, #32
 8008826:	42b0      	cmp	r0, r6
 8008828:	dbe7      	blt.n	80087fa <__gethex+0x3ea>
 800882a:	e7f0      	b.n	800880e <__gethex+0x3fe>
 800882c:	0800b0dd 	.word	0x0800b0dd

08008830 <L_shift>:
 8008830:	f1c2 0208 	rsb	r2, r2, #8
 8008834:	0092      	lsls	r2, r2, #2
 8008836:	b570      	push	{r4, r5, r6, lr}
 8008838:	f1c2 0620 	rsb	r6, r2, #32
 800883c:	6843      	ldr	r3, [r0, #4]
 800883e:	6804      	ldr	r4, [r0, #0]
 8008840:	fa03 f506 	lsl.w	r5, r3, r6
 8008844:	432c      	orrs	r4, r5
 8008846:	40d3      	lsrs	r3, r2
 8008848:	6004      	str	r4, [r0, #0]
 800884a:	f840 3f04 	str.w	r3, [r0, #4]!
 800884e:	4288      	cmp	r0, r1
 8008850:	d3f4      	bcc.n	800883c <L_shift+0xc>
 8008852:	bd70      	pop	{r4, r5, r6, pc}

08008854 <__match>:
 8008854:	b530      	push	{r4, r5, lr}
 8008856:	6803      	ldr	r3, [r0, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800885e:	b914      	cbnz	r4, 8008866 <__match+0x12>
 8008860:	6003      	str	r3, [r0, #0]
 8008862:	2001      	movs	r0, #1
 8008864:	bd30      	pop	{r4, r5, pc}
 8008866:	f813 2b01 	ldrb.w	r2, [r3], #1
 800886a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800886e:	2d19      	cmp	r5, #25
 8008870:	bf98      	it	ls
 8008872:	3220      	addls	r2, #32
 8008874:	42a2      	cmp	r2, r4
 8008876:	d0f0      	beq.n	800885a <__match+0x6>
 8008878:	2000      	movs	r0, #0
 800887a:	e7f3      	b.n	8008864 <__match+0x10>

0800887c <__hexnan>:
 800887c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008880:	2500      	movs	r5, #0
 8008882:	680b      	ldr	r3, [r1, #0]
 8008884:	4682      	mov	sl, r0
 8008886:	115e      	asrs	r6, r3, #5
 8008888:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800888c:	f013 031f 	ands.w	r3, r3, #31
 8008890:	bf18      	it	ne
 8008892:	3604      	addne	r6, #4
 8008894:	1f37      	subs	r7, r6, #4
 8008896:	4690      	mov	r8, r2
 8008898:	46b9      	mov	r9, r7
 800889a:	463c      	mov	r4, r7
 800889c:	46ab      	mov	fp, r5
 800889e:	b087      	sub	sp, #28
 80088a0:	6801      	ldr	r1, [r0, #0]
 80088a2:	9301      	str	r3, [sp, #4]
 80088a4:	f846 5c04 	str.w	r5, [r6, #-4]
 80088a8:	9502      	str	r5, [sp, #8]
 80088aa:	784a      	ldrb	r2, [r1, #1]
 80088ac:	1c4b      	adds	r3, r1, #1
 80088ae:	9303      	str	r3, [sp, #12]
 80088b0:	b342      	cbz	r2, 8008904 <__hexnan+0x88>
 80088b2:	4610      	mov	r0, r2
 80088b4:	9105      	str	r1, [sp, #20]
 80088b6:	9204      	str	r2, [sp, #16]
 80088b8:	f7ff fd95 	bl	80083e6 <__hexdig_fun>
 80088bc:	2800      	cmp	r0, #0
 80088be:	d151      	bne.n	8008964 <__hexnan+0xe8>
 80088c0:	9a04      	ldr	r2, [sp, #16]
 80088c2:	9905      	ldr	r1, [sp, #20]
 80088c4:	2a20      	cmp	r2, #32
 80088c6:	d818      	bhi.n	80088fa <__hexnan+0x7e>
 80088c8:	9b02      	ldr	r3, [sp, #8]
 80088ca:	459b      	cmp	fp, r3
 80088cc:	dd13      	ble.n	80088f6 <__hexnan+0x7a>
 80088ce:	454c      	cmp	r4, r9
 80088d0:	d206      	bcs.n	80088e0 <__hexnan+0x64>
 80088d2:	2d07      	cmp	r5, #7
 80088d4:	dc04      	bgt.n	80088e0 <__hexnan+0x64>
 80088d6:	462a      	mov	r2, r5
 80088d8:	4649      	mov	r1, r9
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff ffa8 	bl	8008830 <L_shift>
 80088e0:	4544      	cmp	r4, r8
 80088e2:	d952      	bls.n	800898a <__hexnan+0x10e>
 80088e4:	2300      	movs	r3, #0
 80088e6:	f1a4 0904 	sub.w	r9, r4, #4
 80088ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80088ee:	461d      	mov	r5, r3
 80088f0:	464c      	mov	r4, r9
 80088f2:	f8cd b008 	str.w	fp, [sp, #8]
 80088f6:	9903      	ldr	r1, [sp, #12]
 80088f8:	e7d7      	b.n	80088aa <__hexnan+0x2e>
 80088fa:	2a29      	cmp	r2, #41	@ 0x29
 80088fc:	d157      	bne.n	80089ae <__hexnan+0x132>
 80088fe:	3102      	adds	r1, #2
 8008900:	f8ca 1000 	str.w	r1, [sl]
 8008904:	f1bb 0f00 	cmp.w	fp, #0
 8008908:	d051      	beq.n	80089ae <__hexnan+0x132>
 800890a:	454c      	cmp	r4, r9
 800890c:	d206      	bcs.n	800891c <__hexnan+0xa0>
 800890e:	2d07      	cmp	r5, #7
 8008910:	dc04      	bgt.n	800891c <__hexnan+0xa0>
 8008912:	462a      	mov	r2, r5
 8008914:	4649      	mov	r1, r9
 8008916:	4620      	mov	r0, r4
 8008918:	f7ff ff8a 	bl	8008830 <L_shift>
 800891c:	4544      	cmp	r4, r8
 800891e:	d936      	bls.n	800898e <__hexnan+0x112>
 8008920:	4623      	mov	r3, r4
 8008922:	f1a8 0204 	sub.w	r2, r8, #4
 8008926:	f853 1b04 	ldr.w	r1, [r3], #4
 800892a:	429f      	cmp	r7, r3
 800892c:	f842 1f04 	str.w	r1, [r2, #4]!
 8008930:	d2f9      	bcs.n	8008926 <__hexnan+0xaa>
 8008932:	1b3b      	subs	r3, r7, r4
 8008934:	f023 0303 	bic.w	r3, r3, #3
 8008938:	3304      	adds	r3, #4
 800893a:	3401      	adds	r4, #1
 800893c:	3e03      	subs	r6, #3
 800893e:	42b4      	cmp	r4, r6
 8008940:	bf88      	it	hi
 8008942:	2304      	movhi	r3, #4
 8008944:	2200      	movs	r2, #0
 8008946:	4443      	add	r3, r8
 8008948:	f843 2b04 	str.w	r2, [r3], #4
 800894c:	429f      	cmp	r7, r3
 800894e:	d2fb      	bcs.n	8008948 <__hexnan+0xcc>
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	b91b      	cbnz	r3, 800895c <__hexnan+0xe0>
 8008954:	4547      	cmp	r7, r8
 8008956:	d128      	bne.n	80089aa <__hexnan+0x12e>
 8008958:	2301      	movs	r3, #1
 800895a:	603b      	str	r3, [r7, #0]
 800895c:	2005      	movs	r0, #5
 800895e:	b007      	add	sp, #28
 8008960:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008964:	3501      	adds	r5, #1
 8008966:	2d08      	cmp	r5, #8
 8008968:	f10b 0b01 	add.w	fp, fp, #1
 800896c:	dd06      	ble.n	800897c <__hexnan+0x100>
 800896e:	4544      	cmp	r4, r8
 8008970:	d9c1      	bls.n	80088f6 <__hexnan+0x7a>
 8008972:	2300      	movs	r3, #0
 8008974:	2501      	movs	r5, #1
 8008976:	f844 3c04 	str.w	r3, [r4, #-4]
 800897a:	3c04      	subs	r4, #4
 800897c:	6822      	ldr	r2, [r4, #0]
 800897e:	f000 000f 	and.w	r0, r0, #15
 8008982:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008986:	6020      	str	r0, [r4, #0]
 8008988:	e7b5      	b.n	80088f6 <__hexnan+0x7a>
 800898a:	2508      	movs	r5, #8
 800898c:	e7b3      	b.n	80088f6 <__hexnan+0x7a>
 800898e:	9b01      	ldr	r3, [sp, #4]
 8008990:	2b00      	cmp	r3, #0
 8008992:	d0dd      	beq.n	8008950 <__hexnan+0xd4>
 8008994:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008998:	f1c3 0320 	rsb	r3, r3, #32
 800899c:	40da      	lsrs	r2, r3
 800899e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80089a2:	4013      	ands	r3, r2
 80089a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80089a8:	e7d2      	b.n	8008950 <__hexnan+0xd4>
 80089aa:	3f04      	subs	r7, #4
 80089ac:	e7d0      	b.n	8008950 <__hexnan+0xd4>
 80089ae:	2004      	movs	r0, #4
 80089b0:	e7d5      	b.n	800895e <__hexnan+0xe2>

080089b2 <__ssputs_r>:
 80089b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b6:	461f      	mov	r7, r3
 80089b8:	688e      	ldr	r6, [r1, #8]
 80089ba:	4682      	mov	sl, r0
 80089bc:	42be      	cmp	r6, r7
 80089be:	460c      	mov	r4, r1
 80089c0:	4690      	mov	r8, r2
 80089c2:	680b      	ldr	r3, [r1, #0]
 80089c4:	d82d      	bhi.n	8008a22 <__ssputs_r+0x70>
 80089c6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80089ca:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80089ce:	d026      	beq.n	8008a1e <__ssputs_r+0x6c>
 80089d0:	6965      	ldr	r5, [r4, #20]
 80089d2:	6909      	ldr	r1, [r1, #16]
 80089d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80089d8:	eba3 0901 	sub.w	r9, r3, r1
 80089dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80089e0:	1c7b      	adds	r3, r7, #1
 80089e2:	444b      	add	r3, r9
 80089e4:	106d      	asrs	r5, r5, #1
 80089e6:	429d      	cmp	r5, r3
 80089e8:	bf38      	it	cc
 80089ea:	461d      	movcc	r5, r3
 80089ec:	0553      	lsls	r3, r2, #21
 80089ee:	d527      	bpl.n	8008a40 <__ssputs_r+0x8e>
 80089f0:	4629      	mov	r1, r5
 80089f2:	f000 fc69 	bl	80092c8 <_malloc_r>
 80089f6:	4606      	mov	r6, r0
 80089f8:	b360      	cbz	r0, 8008a54 <__ssputs_r+0xa2>
 80089fa:	464a      	mov	r2, r9
 80089fc:	6921      	ldr	r1, [r4, #16]
 80089fe:	f7fe fde6 	bl	80075ce <memcpy>
 8008a02:	89a3      	ldrh	r3, [r4, #12]
 8008a04:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008a08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	6126      	str	r6, [r4, #16]
 8008a10:	444e      	add	r6, r9
 8008a12:	6026      	str	r6, [r4, #0]
 8008a14:	463e      	mov	r6, r7
 8008a16:	6165      	str	r5, [r4, #20]
 8008a18:	eba5 0509 	sub.w	r5, r5, r9
 8008a1c:	60a5      	str	r5, [r4, #8]
 8008a1e:	42be      	cmp	r6, r7
 8008a20:	d900      	bls.n	8008a24 <__ssputs_r+0x72>
 8008a22:	463e      	mov	r6, r7
 8008a24:	4632      	mov	r2, r6
 8008a26:	4641      	mov	r1, r8
 8008a28:	6820      	ldr	r0, [r4, #0]
 8008a2a:	f001 fd97 	bl	800a55c <memmove>
 8008a2e:	2000      	movs	r0, #0
 8008a30:	68a3      	ldr	r3, [r4, #8]
 8008a32:	1b9b      	subs	r3, r3, r6
 8008a34:	60a3      	str	r3, [r4, #8]
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	4433      	add	r3, r6
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a40:	462a      	mov	r2, r5
 8008a42:	f001 fbeb 	bl	800a21c <_realloc_r>
 8008a46:	4606      	mov	r6, r0
 8008a48:	2800      	cmp	r0, #0
 8008a4a:	d1e0      	bne.n	8008a0e <__ssputs_r+0x5c>
 8008a4c:	4650      	mov	r0, sl
 8008a4e:	6921      	ldr	r1, [r4, #16]
 8008a50:	f7ff fc2e 	bl	80082b0 <_free_r>
 8008a54:	230c      	movs	r3, #12
 8008a56:	f8ca 3000 	str.w	r3, [sl]
 8008a5a:	89a3      	ldrh	r3, [r4, #12]
 8008a5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a64:	81a3      	strh	r3, [r4, #12]
 8008a66:	e7e9      	b.n	8008a3c <__ssputs_r+0x8a>

08008a68 <_svfiprintf_r>:
 8008a68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a6c:	4698      	mov	r8, r3
 8008a6e:	898b      	ldrh	r3, [r1, #12]
 8008a70:	4607      	mov	r7, r0
 8008a72:	061b      	lsls	r3, r3, #24
 8008a74:	460d      	mov	r5, r1
 8008a76:	4614      	mov	r4, r2
 8008a78:	b09d      	sub	sp, #116	@ 0x74
 8008a7a:	d510      	bpl.n	8008a9e <_svfiprintf_r+0x36>
 8008a7c:	690b      	ldr	r3, [r1, #16]
 8008a7e:	b973      	cbnz	r3, 8008a9e <_svfiprintf_r+0x36>
 8008a80:	2140      	movs	r1, #64	@ 0x40
 8008a82:	f000 fc21 	bl	80092c8 <_malloc_r>
 8008a86:	6028      	str	r0, [r5, #0]
 8008a88:	6128      	str	r0, [r5, #16]
 8008a8a:	b930      	cbnz	r0, 8008a9a <_svfiprintf_r+0x32>
 8008a8c:	230c      	movs	r3, #12
 8008a8e:	603b      	str	r3, [r7, #0]
 8008a90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008a94:	b01d      	add	sp, #116	@ 0x74
 8008a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9a:	2340      	movs	r3, #64	@ 0x40
 8008a9c:	616b      	str	r3, [r5, #20]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aa2:	2320      	movs	r3, #32
 8008aa4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008aa8:	2330      	movs	r3, #48	@ 0x30
 8008aaa:	f04f 0901 	mov.w	r9, #1
 8008aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008ab2:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8008c4c <_svfiprintf_r+0x1e4>
 8008ab6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aba:	4623      	mov	r3, r4
 8008abc:	469a      	mov	sl, r3
 8008abe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008ac2:	b10a      	cbz	r2, 8008ac8 <_svfiprintf_r+0x60>
 8008ac4:	2a25      	cmp	r2, #37	@ 0x25
 8008ac6:	d1f9      	bne.n	8008abc <_svfiprintf_r+0x54>
 8008ac8:	ebba 0b04 	subs.w	fp, sl, r4
 8008acc:	d00b      	beq.n	8008ae6 <_svfiprintf_r+0x7e>
 8008ace:	465b      	mov	r3, fp
 8008ad0:	4622      	mov	r2, r4
 8008ad2:	4629      	mov	r1, r5
 8008ad4:	4638      	mov	r0, r7
 8008ad6:	f7ff ff6c 	bl	80089b2 <__ssputs_r>
 8008ada:	3001      	adds	r0, #1
 8008adc:	f000 80a7 	beq.w	8008c2e <_svfiprintf_r+0x1c6>
 8008ae0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ae2:	445a      	add	r2, fp
 8008ae4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ae6:	f89a 3000 	ldrb.w	r3, [sl]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 809f 	beq.w	8008c2e <_svfiprintf_r+0x1c6>
 8008af0:	2300      	movs	r3, #0
 8008af2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008af6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008afa:	f10a 0a01 	add.w	sl, sl, #1
 8008afe:	9304      	str	r3, [sp, #16]
 8008b00:	9307      	str	r3, [sp, #28]
 8008b02:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008b06:	931a      	str	r3, [sp, #104]	@ 0x68
 8008b08:	4654      	mov	r4, sl
 8008b0a:	2205      	movs	r2, #5
 8008b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b10:	484e      	ldr	r0, [pc, #312]	@ (8008c4c <_svfiprintf_r+0x1e4>)
 8008b12:	f7fe fd4e 	bl	80075b2 <memchr>
 8008b16:	9a04      	ldr	r2, [sp, #16]
 8008b18:	b9d8      	cbnz	r0, 8008b52 <_svfiprintf_r+0xea>
 8008b1a:	06d0      	lsls	r0, r2, #27
 8008b1c:	bf44      	itt	mi
 8008b1e:	2320      	movmi	r3, #32
 8008b20:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b24:	0711      	lsls	r1, r2, #28
 8008b26:	bf44      	itt	mi
 8008b28:	232b      	movmi	r3, #43	@ 0x2b
 8008b2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b2e:	f89a 3000 	ldrb.w	r3, [sl]
 8008b32:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b34:	d015      	beq.n	8008b62 <_svfiprintf_r+0xfa>
 8008b36:	4654      	mov	r4, sl
 8008b38:	2000      	movs	r0, #0
 8008b3a:	f04f 0c0a 	mov.w	ip, #10
 8008b3e:	9a07      	ldr	r2, [sp, #28]
 8008b40:	4621      	mov	r1, r4
 8008b42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b46:	3b30      	subs	r3, #48	@ 0x30
 8008b48:	2b09      	cmp	r3, #9
 8008b4a:	d94b      	bls.n	8008be4 <_svfiprintf_r+0x17c>
 8008b4c:	b1b0      	cbz	r0, 8008b7c <_svfiprintf_r+0x114>
 8008b4e:	9207      	str	r2, [sp, #28]
 8008b50:	e014      	b.n	8008b7c <_svfiprintf_r+0x114>
 8008b52:	eba0 0308 	sub.w	r3, r0, r8
 8008b56:	fa09 f303 	lsl.w	r3, r9, r3
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	46a2      	mov	sl, r4
 8008b5e:	9304      	str	r3, [sp, #16]
 8008b60:	e7d2      	b.n	8008b08 <_svfiprintf_r+0xa0>
 8008b62:	9b03      	ldr	r3, [sp, #12]
 8008b64:	1d19      	adds	r1, r3, #4
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	9103      	str	r1, [sp, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	bfbb      	ittet	lt
 8008b6e:	425b      	neglt	r3, r3
 8008b70:	f042 0202 	orrlt.w	r2, r2, #2
 8008b74:	9307      	strge	r3, [sp, #28]
 8008b76:	9307      	strlt	r3, [sp, #28]
 8008b78:	bfb8      	it	lt
 8008b7a:	9204      	strlt	r2, [sp, #16]
 8008b7c:	7823      	ldrb	r3, [r4, #0]
 8008b7e:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b80:	d10a      	bne.n	8008b98 <_svfiprintf_r+0x130>
 8008b82:	7863      	ldrb	r3, [r4, #1]
 8008b84:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b86:	d132      	bne.n	8008bee <_svfiprintf_r+0x186>
 8008b88:	9b03      	ldr	r3, [sp, #12]
 8008b8a:	3402      	adds	r4, #2
 8008b8c:	1d1a      	adds	r2, r3, #4
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	9203      	str	r2, [sp, #12]
 8008b92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b96:	9305      	str	r3, [sp, #20]
 8008b98:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8008c50 <_svfiprintf_r+0x1e8>
 8008b9c:	2203      	movs	r2, #3
 8008b9e:	4650      	mov	r0, sl
 8008ba0:	7821      	ldrb	r1, [r4, #0]
 8008ba2:	f7fe fd06 	bl	80075b2 <memchr>
 8008ba6:	b138      	cbz	r0, 8008bb8 <_svfiprintf_r+0x150>
 8008ba8:	2240      	movs	r2, #64	@ 0x40
 8008baa:	9b04      	ldr	r3, [sp, #16]
 8008bac:	eba0 000a 	sub.w	r0, r0, sl
 8008bb0:	4082      	lsls	r2, r0
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	3401      	adds	r4, #1
 8008bb6:	9304      	str	r3, [sp, #16]
 8008bb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bbc:	2206      	movs	r2, #6
 8008bbe:	4825      	ldr	r0, [pc, #148]	@ (8008c54 <_svfiprintf_r+0x1ec>)
 8008bc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bc4:	f7fe fcf5 	bl	80075b2 <memchr>
 8008bc8:	2800      	cmp	r0, #0
 8008bca:	d036      	beq.n	8008c3a <_svfiprintf_r+0x1d2>
 8008bcc:	4b22      	ldr	r3, [pc, #136]	@ (8008c58 <_svfiprintf_r+0x1f0>)
 8008bce:	bb1b      	cbnz	r3, 8008c18 <_svfiprintf_r+0x1b0>
 8008bd0:	9b03      	ldr	r3, [sp, #12]
 8008bd2:	3307      	adds	r3, #7
 8008bd4:	f023 0307 	bic.w	r3, r3, #7
 8008bd8:	3308      	adds	r3, #8
 8008bda:	9303      	str	r3, [sp, #12]
 8008bdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bde:	4433      	add	r3, r6
 8008be0:	9309      	str	r3, [sp, #36]	@ 0x24
 8008be2:	e76a      	b.n	8008aba <_svfiprintf_r+0x52>
 8008be4:	460c      	mov	r4, r1
 8008be6:	2001      	movs	r0, #1
 8008be8:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bec:	e7a8      	b.n	8008b40 <_svfiprintf_r+0xd8>
 8008bee:	2300      	movs	r3, #0
 8008bf0:	f04f 0c0a 	mov.w	ip, #10
 8008bf4:	4619      	mov	r1, r3
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	9305      	str	r3, [sp, #20]
 8008bfa:	4620      	mov	r0, r4
 8008bfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c00:	3a30      	subs	r2, #48	@ 0x30
 8008c02:	2a09      	cmp	r2, #9
 8008c04:	d903      	bls.n	8008c0e <_svfiprintf_r+0x1a6>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d0c6      	beq.n	8008b98 <_svfiprintf_r+0x130>
 8008c0a:	9105      	str	r1, [sp, #20]
 8008c0c:	e7c4      	b.n	8008b98 <_svfiprintf_r+0x130>
 8008c0e:	4604      	mov	r4, r0
 8008c10:	2301      	movs	r3, #1
 8008c12:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c16:	e7f0      	b.n	8008bfa <_svfiprintf_r+0x192>
 8008c18:	ab03      	add	r3, sp, #12
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	462a      	mov	r2, r5
 8008c1e:	4638      	mov	r0, r7
 8008c20:	4b0e      	ldr	r3, [pc, #56]	@ (8008c5c <_svfiprintf_r+0x1f4>)
 8008c22:	a904      	add	r1, sp, #16
 8008c24:	f7fc fe26 	bl	8005874 <_printf_float>
 8008c28:	1c42      	adds	r2, r0, #1
 8008c2a:	4606      	mov	r6, r0
 8008c2c:	d1d6      	bne.n	8008bdc <_svfiprintf_r+0x174>
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	065b      	lsls	r3, r3, #25
 8008c32:	f53f af2d 	bmi.w	8008a90 <_svfiprintf_r+0x28>
 8008c36:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c38:	e72c      	b.n	8008a94 <_svfiprintf_r+0x2c>
 8008c3a:	ab03      	add	r3, sp, #12
 8008c3c:	9300      	str	r3, [sp, #0]
 8008c3e:	462a      	mov	r2, r5
 8008c40:	4638      	mov	r0, r7
 8008c42:	4b06      	ldr	r3, [pc, #24]	@ (8008c5c <_svfiprintf_r+0x1f4>)
 8008c44:	a904      	add	r1, sp, #16
 8008c46:	f7fd f8b3 	bl	8005db0 <_printf_i>
 8008c4a:	e7ed      	b.n	8008c28 <_svfiprintf_r+0x1c0>
 8008c4c:	0800b14e 	.word	0x0800b14e
 8008c50:	0800b154 	.word	0x0800b154
 8008c54:	0800b158 	.word	0x0800b158
 8008c58:	08005875 	.word	0x08005875
 8008c5c:	080089b3 	.word	0x080089b3

08008c60 <_sungetc_r>:
 8008c60:	b538      	push	{r3, r4, r5, lr}
 8008c62:	1c4b      	adds	r3, r1, #1
 8008c64:	4614      	mov	r4, r2
 8008c66:	d103      	bne.n	8008c70 <_sungetc_r+0x10>
 8008c68:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	bd38      	pop	{r3, r4, r5, pc}
 8008c70:	8993      	ldrh	r3, [r2, #12]
 8008c72:	b2cd      	uxtb	r5, r1
 8008c74:	f023 0320 	bic.w	r3, r3, #32
 8008c78:	8193      	strh	r3, [r2, #12]
 8008c7a:	6853      	ldr	r3, [r2, #4]
 8008c7c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8008c7e:	b18a      	cbz	r2, 8008ca4 <_sungetc_r+0x44>
 8008c80:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8008c82:	429a      	cmp	r2, r3
 8008c84:	dd08      	ble.n	8008c98 <_sungetc_r+0x38>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	1e5a      	subs	r2, r3, #1
 8008c8a:	6022      	str	r2, [r4, #0]
 8008c8c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008c90:	6863      	ldr	r3, [r4, #4]
 8008c92:	3301      	adds	r3, #1
 8008c94:	6063      	str	r3, [r4, #4]
 8008c96:	e7e9      	b.n	8008c6c <_sungetc_r+0xc>
 8008c98:	4621      	mov	r1, r4
 8008c9a:	f001 fa87 	bl	800a1ac <__submore>
 8008c9e:	2800      	cmp	r0, #0
 8008ca0:	d0f1      	beq.n	8008c86 <_sungetc_r+0x26>
 8008ca2:	e7e1      	b.n	8008c68 <_sungetc_r+0x8>
 8008ca4:	6921      	ldr	r1, [r4, #16]
 8008ca6:	6822      	ldr	r2, [r4, #0]
 8008ca8:	b141      	cbz	r1, 8008cbc <_sungetc_r+0x5c>
 8008caa:	4291      	cmp	r1, r2
 8008cac:	d206      	bcs.n	8008cbc <_sungetc_r+0x5c>
 8008cae:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8008cb2:	42a9      	cmp	r1, r5
 8008cb4:	d102      	bne.n	8008cbc <_sungetc_r+0x5c>
 8008cb6:	3a01      	subs	r2, #1
 8008cb8:	6022      	str	r2, [r4, #0]
 8008cba:	e7ea      	b.n	8008c92 <_sungetc_r+0x32>
 8008cbc:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8008cc0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	63a3      	str	r3, [r4, #56]	@ 0x38
 8008cca:	4623      	mov	r3, r4
 8008ccc:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008cd0:	6023      	str	r3, [r4, #0]
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	e7de      	b.n	8008c94 <_sungetc_r+0x34>

08008cd6 <__ssrefill_r>:
 8008cd6:	b510      	push	{r4, lr}
 8008cd8:	460c      	mov	r4, r1
 8008cda:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8008cdc:	b169      	cbz	r1, 8008cfa <__ssrefill_r+0x24>
 8008cde:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008ce2:	4299      	cmp	r1, r3
 8008ce4:	d001      	beq.n	8008cea <__ssrefill_r+0x14>
 8008ce6:	f7ff fae3 	bl	80082b0 <_free_r>
 8008cea:	2000      	movs	r0, #0
 8008cec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008cee:	6360      	str	r0, [r4, #52]	@ 0x34
 8008cf0:	6063      	str	r3, [r4, #4]
 8008cf2:	b113      	cbz	r3, 8008cfa <__ssrefill_r+0x24>
 8008cf4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8008cf6:	6023      	str	r3, [r4, #0]
 8008cf8:	bd10      	pop	{r4, pc}
 8008cfa:	6923      	ldr	r3, [r4, #16]
 8008cfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	2300      	movs	r3, #0
 8008d04:	6063      	str	r3, [r4, #4]
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	f043 0320 	orr.w	r3, r3, #32
 8008d0c:	81a3      	strh	r3, [r4, #12]
 8008d0e:	e7f3      	b.n	8008cf8 <__ssrefill_r+0x22>

08008d10 <__ssvfiscanf_r>:
 8008d10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008d14:	460c      	mov	r4, r1
 8008d16:	2100      	movs	r1, #0
 8008d18:	4606      	mov	r6, r0
 8008d1a:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8008d1e:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8008d22:	49aa      	ldr	r1, [pc, #680]	@ (8008fcc <__ssvfiscanf_r+0x2bc>)
 8008d24:	f10d 0804 	add.w	r8, sp, #4
 8008d28:	91a0      	str	r1, [sp, #640]	@ 0x280
 8008d2a:	49a9      	ldr	r1, [pc, #676]	@ (8008fd0 <__ssvfiscanf_r+0x2c0>)
 8008d2c:	4fa9      	ldr	r7, [pc, #676]	@ (8008fd4 <__ssvfiscanf_r+0x2c4>)
 8008d2e:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8008d32:	91a1      	str	r1, [sp, #644]	@ 0x284
 8008d34:	9300      	str	r3, [sp, #0]
 8008d36:	7813      	ldrb	r3, [r2, #0]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	f000 8159 	beq.w	8008ff0 <__ssvfiscanf_r+0x2e0>
 8008d3e:	5cf9      	ldrb	r1, [r7, r3]
 8008d40:	1c55      	adds	r5, r2, #1
 8008d42:	f011 0108 	ands.w	r1, r1, #8
 8008d46:	d019      	beq.n	8008d7c <__ssvfiscanf_r+0x6c>
 8008d48:	6863      	ldr	r3, [r4, #4]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	dd0f      	ble.n	8008d6e <__ssvfiscanf_r+0x5e>
 8008d4e:	6823      	ldr	r3, [r4, #0]
 8008d50:	781a      	ldrb	r2, [r3, #0]
 8008d52:	5cba      	ldrb	r2, [r7, r2]
 8008d54:	0712      	lsls	r2, r2, #28
 8008d56:	d401      	bmi.n	8008d5c <__ssvfiscanf_r+0x4c>
 8008d58:	462a      	mov	r2, r5
 8008d5a:	e7ec      	b.n	8008d36 <__ssvfiscanf_r+0x26>
 8008d5c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008d5e:	3301      	adds	r3, #1
 8008d60:	3201      	adds	r2, #1
 8008d62:	9245      	str	r2, [sp, #276]	@ 0x114
 8008d64:	6862      	ldr	r2, [r4, #4]
 8008d66:	6023      	str	r3, [r4, #0]
 8008d68:	3a01      	subs	r2, #1
 8008d6a:	6062      	str	r2, [r4, #4]
 8008d6c:	e7ec      	b.n	8008d48 <__ssvfiscanf_r+0x38>
 8008d6e:	4621      	mov	r1, r4
 8008d70:	4630      	mov	r0, r6
 8008d72:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008d74:	4798      	blx	r3
 8008d76:	2800      	cmp	r0, #0
 8008d78:	d0e9      	beq.n	8008d4e <__ssvfiscanf_r+0x3e>
 8008d7a:	e7ed      	b.n	8008d58 <__ssvfiscanf_r+0x48>
 8008d7c:	2b25      	cmp	r3, #37	@ 0x25
 8008d7e:	d012      	beq.n	8008da6 <__ssvfiscanf_r+0x96>
 8008d80:	4699      	mov	r9, r3
 8008d82:	6863      	ldr	r3, [r4, #4]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f340 8094 	ble.w	8008eb2 <__ssvfiscanf_r+0x1a2>
 8008d8a:	6822      	ldr	r2, [r4, #0]
 8008d8c:	7813      	ldrb	r3, [r2, #0]
 8008d8e:	454b      	cmp	r3, r9
 8008d90:	f040 812e 	bne.w	8008ff0 <__ssvfiscanf_r+0x2e0>
 8008d94:	6863      	ldr	r3, [r4, #4]
 8008d96:	3201      	adds	r2, #1
 8008d98:	3b01      	subs	r3, #1
 8008d9a:	6063      	str	r3, [r4, #4]
 8008d9c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8008d9e:	6022      	str	r2, [r4, #0]
 8008da0:	3301      	adds	r3, #1
 8008da2:	9345      	str	r3, [sp, #276]	@ 0x114
 8008da4:	e7d8      	b.n	8008d58 <__ssvfiscanf_r+0x48>
 8008da6:	9141      	str	r1, [sp, #260]	@ 0x104
 8008da8:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008daa:	7853      	ldrb	r3, [r2, #1]
 8008dac:	2b2a      	cmp	r3, #42	@ 0x2a
 8008dae:	bf04      	itt	eq
 8008db0:	2310      	moveq	r3, #16
 8008db2:	1c95      	addeq	r5, r2, #2
 8008db4:	f04f 020a 	mov.w	r2, #10
 8008db8:	bf08      	it	eq
 8008dba:	9341      	streq	r3, [sp, #260]	@ 0x104
 8008dbc:	46a9      	mov	r9, r5
 8008dbe:	f819 1b01 	ldrb.w	r1, [r9], #1
 8008dc2:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8008dc6:	2b09      	cmp	r3, #9
 8008dc8:	d91e      	bls.n	8008e08 <__ssvfiscanf_r+0xf8>
 8008dca:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8008fd8 <__ssvfiscanf_r+0x2c8>
 8008dce:	2203      	movs	r2, #3
 8008dd0:	4650      	mov	r0, sl
 8008dd2:	f7fe fbee 	bl	80075b2 <memchr>
 8008dd6:	b138      	cbz	r0, 8008de8 <__ssvfiscanf_r+0xd8>
 8008dd8:	2301      	movs	r3, #1
 8008dda:	464d      	mov	r5, r9
 8008ddc:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008dde:	eba0 000a 	sub.w	r0, r0, sl
 8008de2:	4083      	lsls	r3, r0
 8008de4:	4313      	orrs	r3, r2
 8008de6:	9341      	str	r3, [sp, #260]	@ 0x104
 8008de8:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008dec:	2b78      	cmp	r3, #120	@ 0x78
 8008dee:	d806      	bhi.n	8008dfe <__ssvfiscanf_r+0xee>
 8008df0:	2b57      	cmp	r3, #87	@ 0x57
 8008df2:	d810      	bhi.n	8008e16 <__ssvfiscanf_r+0x106>
 8008df4:	2b25      	cmp	r3, #37	@ 0x25
 8008df6:	d0c3      	beq.n	8008d80 <__ssvfiscanf_r+0x70>
 8008df8:	d856      	bhi.n	8008ea8 <__ssvfiscanf_r+0x198>
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d064      	beq.n	8008ec8 <__ssvfiscanf_r+0x1b8>
 8008dfe:	2303      	movs	r3, #3
 8008e00:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008e02:	230a      	movs	r3, #10
 8008e04:	9342      	str	r3, [sp, #264]	@ 0x108
 8008e06:	e077      	b.n	8008ef8 <__ssvfiscanf_r+0x1e8>
 8008e08:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8008e0a:	464d      	mov	r5, r9
 8008e0c:	fb02 1103 	mla	r1, r2, r3, r1
 8008e10:	3930      	subs	r1, #48	@ 0x30
 8008e12:	9143      	str	r1, [sp, #268]	@ 0x10c
 8008e14:	e7d2      	b.n	8008dbc <__ssvfiscanf_r+0xac>
 8008e16:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8008e1a:	2a20      	cmp	r2, #32
 8008e1c:	d8ef      	bhi.n	8008dfe <__ssvfiscanf_r+0xee>
 8008e1e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e24 <__ssvfiscanf_r+0x114>)
 8008e20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e24:	08008ed7 	.word	0x08008ed7
 8008e28:	08008dff 	.word	0x08008dff
 8008e2c:	08008dff 	.word	0x08008dff
 8008e30:	08008f31 	.word	0x08008f31
 8008e34:	08008dff 	.word	0x08008dff
 8008e38:	08008dff 	.word	0x08008dff
 8008e3c:	08008dff 	.word	0x08008dff
 8008e40:	08008dff 	.word	0x08008dff
 8008e44:	08008dff 	.word	0x08008dff
 8008e48:	08008dff 	.word	0x08008dff
 8008e4c:	08008dff 	.word	0x08008dff
 8008e50:	08008f47 	.word	0x08008f47
 8008e54:	08008f2d 	.word	0x08008f2d
 8008e58:	08008eaf 	.word	0x08008eaf
 8008e5c:	08008eaf 	.word	0x08008eaf
 8008e60:	08008eaf 	.word	0x08008eaf
 8008e64:	08008dff 	.word	0x08008dff
 8008e68:	08008ee9 	.word	0x08008ee9
 8008e6c:	08008dff 	.word	0x08008dff
 8008e70:	08008dff 	.word	0x08008dff
 8008e74:	08008dff 	.word	0x08008dff
 8008e78:	08008dff 	.word	0x08008dff
 8008e7c:	08008f57 	.word	0x08008f57
 8008e80:	08008ef1 	.word	0x08008ef1
 8008e84:	08008ecf 	.word	0x08008ecf
 8008e88:	08008dff 	.word	0x08008dff
 8008e8c:	08008dff 	.word	0x08008dff
 8008e90:	08008f53 	.word	0x08008f53
 8008e94:	08008dff 	.word	0x08008dff
 8008e98:	08008f2d 	.word	0x08008f2d
 8008e9c:	08008dff 	.word	0x08008dff
 8008ea0:	08008dff 	.word	0x08008dff
 8008ea4:	08008ed7 	.word	0x08008ed7
 8008ea8:	3b45      	subs	r3, #69	@ 0x45
 8008eaa:	2b02      	cmp	r3, #2
 8008eac:	d8a7      	bhi.n	8008dfe <__ssvfiscanf_r+0xee>
 8008eae:	2305      	movs	r3, #5
 8008eb0:	e021      	b.n	8008ef6 <__ssvfiscanf_r+0x1e6>
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008eb8:	4798      	blx	r3
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f43f af65 	beq.w	8008d8a <__ssvfiscanf_r+0x7a>
 8008ec0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f040 808c 	bne.w	8008fe0 <__ssvfiscanf_r+0x2d0>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ecc:	e08c      	b.n	8008fe8 <__ssvfiscanf_r+0x2d8>
 8008ece:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008ed0:	f042 0220 	orr.w	r2, r2, #32
 8008ed4:	9241      	str	r2, [sp, #260]	@ 0x104
 8008ed6:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8008ed8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008edc:	9241      	str	r2, [sp, #260]	@ 0x104
 8008ede:	2210      	movs	r2, #16
 8008ee0:	2b6e      	cmp	r3, #110	@ 0x6e
 8008ee2:	9242      	str	r2, [sp, #264]	@ 0x108
 8008ee4:	d902      	bls.n	8008eec <__ssvfiscanf_r+0x1dc>
 8008ee6:	e005      	b.n	8008ef4 <__ssvfiscanf_r+0x1e4>
 8008ee8:	2300      	movs	r3, #0
 8008eea:	9342      	str	r3, [sp, #264]	@ 0x108
 8008eec:	2303      	movs	r3, #3
 8008eee:	e002      	b.n	8008ef6 <__ssvfiscanf_r+0x1e6>
 8008ef0:	2308      	movs	r3, #8
 8008ef2:	9342      	str	r3, [sp, #264]	@ 0x108
 8008ef4:	2304      	movs	r3, #4
 8008ef6:	9347      	str	r3, [sp, #284]	@ 0x11c
 8008ef8:	6863      	ldr	r3, [r4, #4]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	dd39      	ble.n	8008f72 <__ssvfiscanf_r+0x262>
 8008efe:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008f00:	0659      	lsls	r1, r3, #25
 8008f02:	d404      	bmi.n	8008f0e <__ssvfiscanf_r+0x1fe>
 8008f04:	6823      	ldr	r3, [r4, #0]
 8008f06:	781a      	ldrb	r2, [r3, #0]
 8008f08:	5cba      	ldrb	r2, [r7, r2]
 8008f0a:	0712      	lsls	r2, r2, #28
 8008f0c:	d438      	bmi.n	8008f80 <__ssvfiscanf_r+0x270>
 8008f0e:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8008f10:	2b02      	cmp	r3, #2
 8008f12:	dc47      	bgt.n	8008fa4 <__ssvfiscanf_r+0x294>
 8008f14:	466b      	mov	r3, sp
 8008f16:	4622      	mov	r2, r4
 8008f18:	4630      	mov	r0, r6
 8008f1a:	a941      	add	r1, sp, #260	@ 0x104
 8008f1c:	f000 fa66 	bl	80093ec <_scanf_chars>
 8008f20:	2801      	cmp	r0, #1
 8008f22:	d065      	beq.n	8008ff0 <__ssvfiscanf_r+0x2e0>
 8008f24:	2802      	cmp	r0, #2
 8008f26:	f47f af17 	bne.w	8008d58 <__ssvfiscanf_r+0x48>
 8008f2a:	e7c9      	b.n	8008ec0 <__ssvfiscanf_r+0x1b0>
 8008f2c:	220a      	movs	r2, #10
 8008f2e:	e7d7      	b.n	8008ee0 <__ssvfiscanf_r+0x1d0>
 8008f30:	4629      	mov	r1, r5
 8008f32:	4640      	mov	r0, r8
 8008f34:	f000 fba6 	bl	8009684 <__sccl>
 8008f38:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f40:	9341      	str	r3, [sp, #260]	@ 0x104
 8008f42:	2301      	movs	r3, #1
 8008f44:	e7d7      	b.n	8008ef6 <__ssvfiscanf_r+0x1e6>
 8008f46:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8008f48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f4c:	9341      	str	r3, [sp, #260]	@ 0x104
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e7d1      	b.n	8008ef6 <__ssvfiscanf_r+0x1e6>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e7cf      	b.n	8008ef6 <__ssvfiscanf_r+0x1e6>
 8008f56:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8008f58:	06c3      	lsls	r3, r0, #27
 8008f5a:	f53f aefd 	bmi.w	8008d58 <__ssvfiscanf_r+0x48>
 8008f5e:	9b00      	ldr	r3, [sp, #0]
 8008f60:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008f62:	1d19      	adds	r1, r3, #4
 8008f64:	9100      	str	r1, [sp, #0]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	07c0      	lsls	r0, r0, #31
 8008f6a:	bf4c      	ite	mi
 8008f6c:	801a      	strhmi	r2, [r3, #0]
 8008f6e:	601a      	strpl	r2, [r3, #0]
 8008f70:	e6f2      	b.n	8008d58 <__ssvfiscanf_r+0x48>
 8008f72:	4621      	mov	r1, r4
 8008f74:	4630      	mov	r0, r6
 8008f76:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008f78:	4798      	blx	r3
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	d0bf      	beq.n	8008efe <__ssvfiscanf_r+0x1ee>
 8008f7e:	e79f      	b.n	8008ec0 <__ssvfiscanf_r+0x1b0>
 8008f80:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8008f82:	3201      	adds	r2, #1
 8008f84:	9245      	str	r2, [sp, #276]	@ 0x114
 8008f86:	6862      	ldr	r2, [r4, #4]
 8008f88:	3a01      	subs	r2, #1
 8008f8a:	2a00      	cmp	r2, #0
 8008f8c:	6062      	str	r2, [r4, #4]
 8008f8e:	dd02      	ble.n	8008f96 <__ssvfiscanf_r+0x286>
 8008f90:	3301      	adds	r3, #1
 8008f92:	6023      	str	r3, [r4, #0]
 8008f94:	e7b6      	b.n	8008f04 <__ssvfiscanf_r+0x1f4>
 8008f96:	4621      	mov	r1, r4
 8008f98:	4630      	mov	r0, r6
 8008f9a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8008f9c:	4798      	blx	r3
 8008f9e:	2800      	cmp	r0, #0
 8008fa0:	d0b0      	beq.n	8008f04 <__ssvfiscanf_r+0x1f4>
 8008fa2:	e78d      	b.n	8008ec0 <__ssvfiscanf_r+0x1b0>
 8008fa4:	2b04      	cmp	r3, #4
 8008fa6:	dc06      	bgt.n	8008fb6 <__ssvfiscanf_r+0x2a6>
 8008fa8:	466b      	mov	r3, sp
 8008faa:	4622      	mov	r2, r4
 8008fac:	4630      	mov	r0, r6
 8008fae:	a941      	add	r1, sp, #260	@ 0x104
 8008fb0:	f000 fa76 	bl	80094a0 <_scanf_i>
 8008fb4:	e7b4      	b.n	8008f20 <__ssvfiscanf_r+0x210>
 8008fb6:	4b09      	ldr	r3, [pc, #36]	@ (8008fdc <__ssvfiscanf_r+0x2cc>)
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f43f aecd 	beq.w	8008d58 <__ssvfiscanf_r+0x48>
 8008fbe:	466b      	mov	r3, sp
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	4630      	mov	r0, r6
 8008fc4:	a941      	add	r1, sp, #260	@ 0x104
 8008fc6:	f7fd f813 	bl	8005ff0 <_scanf_float>
 8008fca:	e7a9      	b.n	8008f20 <__ssvfiscanf_r+0x210>
 8008fcc:	08008c61 	.word	0x08008c61
 8008fd0:	08008cd7 	.word	0x08008cd7
 8008fd4:	0800af61 	.word	0x0800af61
 8008fd8:	0800b154 	.word	0x0800b154
 8008fdc:	08005ff1 	.word	0x08005ff1
 8008fe0:	89a3      	ldrh	r3, [r4, #12]
 8008fe2:	065b      	lsls	r3, r3, #25
 8008fe4:	f53f af70 	bmi.w	8008ec8 <__ssvfiscanf_r+0x1b8>
 8008fe8:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8008ff2:	e7f9      	b.n	8008fe8 <__ssvfiscanf_r+0x2d8>

08008ff4 <__sfputc_r>:
 8008ff4:	6893      	ldr	r3, [r2, #8]
 8008ff6:	b410      	push	{r4}
 8008ff8:	3b01      	subs	r3, #1
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	6093      	str	r3, [r2, #8]
 8008ffe:	da07      	bge.n	8009010 <__sfputc_r+0x1c>
 8009000:	6994      	ldr	r4, [r2, #24]
 8009002:	42a3      	cmp	r3, r4
 8009004:	db01      	blt.n	800900a <__sfputc_r+0x16>
 8009006:	290a      	cmp	r1, #10
 8009008:	d102      	bne.n	8009010 <__sfputc_r+0x1c>
 800900a:	bc10      	pop	{r4}
 800900c:	f001 b9a4 	b.w	800a358 <__swbuf_r>
 8009010:	6813      	ldr	r3, [r2, #0]
 8009012:	1c58      	adds	r0, r3, #1
 8009014:	6010      	str	r0, [r2, #0]
 8009016:	7019      	strb	r1, [r3, #0]
 8009018:	4608      	mov	r0, r1
 800901a:	bc10      	pop	{r4}
 800901c:	4770      	bx	lr

0800901e <__sfputs_r>:
 800901e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009020:	4606      	mov	r6, r0
 8009022:	460f      	mov	r7, r1
 8009024:	4614      	mov	r4, r2
 8009026:	18d5      	adds	r5, r2, r3
 8009028:	42ac      	cmp	r4, r5
 800902a:	d101      	bne.n	8009030 <__sfputs_r+0x12>
 800902c:	2000      	movs	r0, #0
 800902e:	e007      	b.n	8009040 <__sfputs_r+0x22>
 8009030:	463a      	mov	r2, r7
 8009032:	4630      	mov	r0, r6
 8009034:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009038:	f7ff ffdc 	bl	8008ff4 <__sfputc_r>
 800903c:	1c43      	adds	r3, r0, #1
 800903e:	d1f3      	bne.n	8009028 <__sfputs_r+0xa>
 8009040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009044 <_vfiprintf_r>:
 8009044:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009048:	460d      	mov	r5, r1
 800904a:	4614      	mov	r4, r2
 800904c:	4698      	mov	r8, r3
 800904e:	4606      	mov	r6, r0
 8009050:	b09d      	sub	sp, #116	@ 0x74
 8009052:	b118      	cbz	r0, 800905c <_vfiprintf_r+0x18>
 8009054:	6a03      	ldr	r3, [r0, #32]
 8009056:	b90b      	cbnz	r3, 800905c <_vfiprintf_r+0x18>
 8009058:	f7fd faf6 	bl	8006648 <__sinit>
 800905c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800905e:	07d9      	lsls	r1, r3, #31
 8009060:	d405      	bmi.n	800906e <_vfiprintf_r+0x2a>
 8009062:	89ab      	ldrh	r3, [r5, #12]
 8009064:	059a      	lsls	r2, r3, #22
 8009066:	d402      	bmi.n	800906e <_vfiprintf_r+0x2a>
 8009068:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800906a:	f7fe faa0 	bl	80075ae <__retarget_lock_acquire_recursive>
 800906e:	89ab      	ldrh	r3, [r5, #12]
 8009070:	071b      	lsls	r3, r3, #28
 8009072:	d501      	bpl.n	8009078 <_vfiprintf_r+0x34>
 8009074:	692b      	ldr	r3, [r5, #16]
 8009076:	b99b      	cbnz	r3, 80090a0 <_vfiprintf_r+0x5c>
 8009078:	4629      	mov	r1, r5
 800907a:	4630      	mov	r0, r6
 800907c:	f001 f9aa 	bl	800a3d4 <__swsetup_r>
 8009080:	b170      	cbz	r0, 80090a0 <_vfiprintf_r+0x5c>
 8009082:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009084:	07dc      	lsls	r4, r3, #31
 8009086:	d504      	bpl.n	8009092 <_vfiprintf_r+0x4e>
 8009088:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800908c:	b01d      	add	sp, #116	@ 0x74
 800908e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009092:	89ab      	ldrh	r3, [r5, #12]
 8009094:	0598      	lsls	r0, r3, #22
 8009096:	d4f7      	bmi.n	8009088 <_vfiprintf_r+0x44>
 8009098:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800909a:	f7fe fa89 	bl	80075b0 <__retarget_lock_release_recursive>
 800909e:	e7f3      	b.n	8009088 <_vfiprintf_r+0x44>
 80090a0:	2300      	movs	r3, #0
 80090a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80090a4:	2320      	movs	r3, #32
 80090a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80090aa:	2330      	movs	r3, #48	@ 0x30
 80090ac:	f04f 0901 	mov.w	r9, #1
 80090b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80090b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8009260 <_vfiprintf_r+0x21c>
 80090b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80090bc:	4623      	mov	r3, r4
 80090be:	469a      	mov	sl, r3
 80090c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80090c4:	b10a      	cbz	r2, 80090ca <_vfiprintf_r+0x86>
 80090c6:	2a25      	cmp	r2, #37	@ 0x25
 80090c8:	d1f9      	bne.n	80090be <_vfiprintf_r+0x7a>
 80090ca:	ebba 0b04 	subs.w	fp, sl, r4
 80090ce:	d00b      	beq.n	80090e8 <_vfiprintf_r+0xa4>
 80090d0:	465b      	mov	r3, fp
 80090d2:	4622      	mov	r2, r4
 80090d4:	4629      	mov	r1, r5
 80090d6:	4630      	mov	r0, r6
 80090d8:	f7ff ffa1 	bl	800901e <__sfputs_r>
 80090dc:	3001      	adds	r0, #1
 80090de:	f000 80a7 	beq.w	8009230 <_vfiprintf_r+0x1ec>
 80090e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090e4:	445a      	add	r2, fp
 80090e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80090e8:	f89a 3000 	ldrb.w	r3, [sl]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	f000 809f 	beq.w	8009230 <_vfiprintf_r+0x1ec>
 80090f2:	2300      	movs	r3, #0
 80090f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80090fc:	f10a 0a01 	add.w	sl, sl, #1
 8009100:	9304      	str	r3, [sp, #16]
 8009102:	9307      	str	r3, [sp, #28]
 8009104:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009108:	931a      	str	r3, [sp, #104]	@ 0x68
 800910a:	4654      	mov	r4, sl
 800910c:	2205      	movs	r2, #5
 800910e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009112:	4853      	ldr	r0, [pc, #332]	@ (8009260 <_vfiprintf_r+0x21c>)
 8009114:	f7fe fa4d 	bl	80075b2 <memchr>
 8009118:	9a04      	ldr	r2, [sp, #16]
 800911a:	b9d8      	cbnz	r0, 8009154 <_vfiprintf_r+0x110>
 800911c:	06d1      	lsls	r1, r2, #27
 800911e:	bf44      	itt	mi
 8009120:	2320      	movmi	r3, #32
 8009122:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009126:	0713      	lsls	r3, r2, #28
 8009128:	bf44      	itt	mi
 800912a:	232b      	movmi	r3, #43	@ 0x2b
 800912c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009130:	f89a 3000 	ldrb.w	r3, [sl]
 8009134:	2b2a      	cmp	r3, #42	@ 0x2a
 8009136:	d015      	beq.n	8009164 <_vfiprintf_r+0x120>
 8009138:	4654      	mov	r4, sl
 800913a:	2000      	movs	r0, #0
 800913c:	f04f 0c0a 	mov.w	ip, #10
 8009140:	9a07      	ldr	r2, [sp, #28]
 8009142:	4621      	mov	r1, r4
 8009144:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009148:	3b30      	subs	r3, #48	@ 0x30
 800914a:	2b09      	cmp	r3, #9
 800914c:	d94b      	bls.n	80091e6 <_vfiprintf_r+0x1a2>
 800914e:	b1b0      	cbz	r0, 800917e <_vfiprintf_r+0x13a>
 8009150:	9207      	str	r2, [sp, #28]
 8009152:	e014      	b.n	800917e <_vfiprintf_r+0x13a>
 8009154:	eba0 0308 	sub.w	r3, r0, r8
 8009158:	fa09 f303 	lsl.w	r3, r9, r3
 800915c:	4313      	orrs	r3, r2
 800915e:	46a2      	mov	sl, r4
 8009160:	9304      	str	r3, [sp, #16]
 8009162:	e7d2      	b.n	800910a <_vfiprintf_r+0xc6>
 8009164:	9b03      	ldr	r3, [sp, #12]
 8009166:	1d19      	adds	r1, r3, #4
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	9103      	str	r1, [sp, #12]
 800916c:	2b00      	cmp	r3, #0
 800916e:	bfbb      	ittet	lt
 8009170:	425b      	neglt	r3, r3
 8009172:	f042 0202 	orrlt.w	r2, r2, #2
 8009176:	9307      	strge	r3, [sp, #28]
 8009178:	9307      	strlt	r3, [sp, #28]
 800917a:	bfb8      	it	lt
 800917c:	9204      	strlt	r2, [sp, #16]
 800917e:	7823      	ldrb	r3, [r4, #0]
 8009180:	2b2e      	cmp	r3, #46	@ 0x2e
 8009182:	d10a      	bne.n	800919a <_vfiprintf_r+0x156>
 8009184:	7863      	ldrb	r3, [r4, #1]
 8009186:	2b2a      	cmp	r3, #42	@ 0x2a
 8009188:	d132      	bne.n	80091f0 <_vfiprintf_r+0x1ac>
 800918a:	9b03      	ldr	r3, [sp, #12]
 800918c:	3402      	adds	r4, #2
 800918e:	1d1a      	adds	r2, r3, #4
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	9203      	str	r2, [sp, #12]
 8009194:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009198:	9305      	str	r3, [sp, #20]
 800919a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8009264 <_vfiprintf_r+0x220>
 800919e:	2203      	movs	r2, #3
 80091a0:	4650      	mov	r0, sl
 80091a2:	7821      	ldrb	r1, [r4, #0]
 80091a4:	f7fe fa05 	bl	80075b2 <memchr>
 80091a8:	b138      	cbz	r0, 80091ba <_vfiprintf_r+0x176>
 80091aa:	2240      	movs	r2, #64	@ 0x40
 80091ac:	9b04      	ldr	r3, [sp, #16]
 80091ae:	eba0 000a 	sub.w	r0, r0, sl
 80091b2:	4082      	lsls	r2, r0
 80091b4:	4313      	orrs	r3, r2
 80091b6:	3401      	adds	r4, #1
 80091b8:	9304      	str	r3, [sp, #16]
 80091ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091be:	2206      	movs	r2, #6
 80091c0:	4829      	ldr	r0, [pc, #164]	@ (8009268 <_vfiprintf_r+0x224>)
 80091c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80091c6:	f7fe f9f4 	bl	80075b2 <memchr>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	d03f      	beq.n	800924e <_vfiprintf_r+0x20a>
 80091ce:	4b27      	ldr	r3, [pc, #156]	@ (800926c <_vfiprintf_r+0x228>)
 80091d0:	bb1b      	cbnz	r3, 800921a <_vfiprintf_r+0x1d6>
 80091d2:	9b03      	ldr	r3, [sp, #12]
 80091d4:	3307      	adds	r3, #7
 80091d6:	f023 0307 	bic.w	r3, r3, #7
 80091da:	3308      	adds	r3, #8
 80091dc:	9303      	str	r3, [sp, #12]
 80091de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091e0:	443b      	add	r3, r7
 80091e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80091e4:	e76a      	b.n	80090bc <_vfiprintf_r+0x78>
 80091e6:	460c      	mov	r4, r1
 80091e8:	2001      	movs	r0, #1
 80091ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80091ee:	e7a8      	b.n	8009142 <_vfiprintf_r+0xfe>
 80091f0:	2300      	movs	r3, #0
 80091f2:	f04f 0c0a 	mov.w	ip, #10
 80091f6:	4619      	mov	r1, r3
 80091f8:	3401      	adds	r4, #1
 80091fa:	9305      	str	r3, [sp, #20]
 80091fc:	4620      	mov	r0, r4
 80091fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009202:	3a30      	subs	r2, #48	@ 0x30
 8009204:	2a09      	cmp	r2, #9
 8009206:	d903      	bls.n	8009210 <_vfiprintf_r+0x1cc>
 8009208:	2b00      	cmp	r3, #0
 800920a:	d0c6      	beq.n	800919a <_vfiprintf_r+0x156>
 800920c:	9105      	str	r1, [sp, #20]
 800920e:	e7c4      	b.n	800919a <_vfiprintf_r+0x156>
 8009210:	4604      	mov	r4, r0
 8009212:	2301      	movs	r3, #1
 8009214:	fb0c 2101 	mla	r1, ip, r1, r2
 8009218:	e7f0      	b.n	80091fc <_vfiprintf_r+0x1b8>
 800921a:	ab03      	add	r3, sp, #12
 800921c:	9300      	str	r3, [sp, #0]
 800921e:	462a      	mov	r2, r5
 8009220:	4630      	mov	r0, r6
 8009222:	4b13      	ldr	r3, [pc, #76]	@ (8009270 <_vfiprintf_r+0x22c>)
 8009224:	a904      	add	r1, sp, #16
 8009226:	f7fc fb25 	bl	8005874 <_printf_float>
 800922a:	4607      	mov	r7, r0
 800922c:	1c78      	adds	r0, r7, #1
 800922e:	d1d6      	bne.n	80091de <_vfiprintf_r+0x19a>
 8009230:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009232:	07d9      	lsls	r1, r3, #31
 8009234:	d405      	bmi.n	8009242 <_vfiprintf_r+0x1fe>
 8009236:	89ab      	ldrh	r3, [r5, #12]
 8009238:	059a      	lsls	r2, r3, #22
 800923a:	d402      	bmi.n	8009242 <_vfiprintf_r+0x1fe>
 800923c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800923e:	f7fe f9b7 	bl	80075b0 <__retarget_lock_release_recursive>
 8009242:	89ab      	ldrh	r3, [r5, #12]
 8009244:	065b      	lsls	r3, r3, #25
 8009246:	f53f af1f 	bmi.w	8009088 <_vfiprintf_r+0x44>
 800924a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800924c:	e71e      	b.n	800908c <_vfiprintf_r+0x48>
 800924e:	ab03      	add	r3, sp, #12
 8009250:	9300      	str	r3, [sp, #0]
 8009252:	462a      	mov	r2, r5
 8009254:	4630      	mov	r0, r6
 8009256:	4b06      	ldr	r3, [pc, #24]	@ (8009270 <_vfiprintf_r+0x22c>)
 8009258:	a904      	add	r1, sp, #16
 800925a:	f7fc fda9 	bl	8005db0 <_printf_i>
 800925e:	e7e4      	b.n	800922a <_vfiprintf_r+0x1e6>
 8009260:	0800b14e 	.word	0x0800b14e
 8009264:	0800b154 	.word	0x0800b154
 8009268:	0800b158 	.word	0x0800b158
 800926c:	08005875 	.word	0x08005875
 8009270:	0800901f 	.word	0x0800901f

08009274 <malloc>:
 8009274:	4b02      	ldr	r3, [pc, #8]	@ (8009280 <malloc+0xc>)
 8009276:	4601      	mov	r1, r0
 8009278:	6818      	ldr	r0, [r3, #0]
 800927a:	f000 b825 	b.w	80092c8 <_malloc_r>
 800927e:	bf00      	nop
 8009280:	200001ac 	.word	0x200001ac

08009284 <sbrk_aligned>:
 8009284:	b570      	push	{r4, r5, r6, lr}
 8009286:	4e0f      	ldr	r6, [pc, #60]	@ (80092c4 <sbrk_aligned+0x40>)
 8009288:	460c      	mov	r4, r1
 800928a:	6831      	ldr	r1, [r6, #0]
 800928c:	4605      	mov	r5, r0
 800928e:	b911      	cbnz	r1, 8009296 <sbrk_aligned+0x12>
 8009290:	f001 f9a0 	bl	800a5d4 <_sbrk_r>
 8009294:	6030      	str	r0, [r6, #0]
 8009296:	4621      	mov	r1, r4
 8009298:	4628      	mov	r0, r5
 800929a:	f001 f99b 	bl	800a5d4 <_sbrk_r>
 800929e:	1c43      	adds	r3, r0, #1
 80092a0:	d103      	bne.n	80092aa <sbrk_aligned+0x26>
 80092a2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80092a6:	4620      	mov	r0, r4
 80092a8:	bd70      	pop	{r4, r5, r6, pc}
 80092aa:	1cc4      	adds	r4, r0, #3
 80092ac:	f024 0403 	bic.w	r4, r4, #3
 80092b0:	42a0      	cmp	r0, r4
 80092b2:	d0f8      	beq.n	80092a6 <sbrk_aligned+0x22>
 80092b4:	1a21      	subs	r1, r4, r0
 80092b6:	4628      	mov	r0, r5
 80092b8:	f001 f98c 	bl	800a5d4 <_sbrk_r>
 80092bc:	3001      	adds	r0, #1
 80092be:	d1f2      	bne.n	80092a6 <sbrk_aligned+0x22>
 80092c0:	e7ef      	b.n	80092a2 <sbrk_aligned+0x1e>
 80092c2:	bf00      	nop
 80092c4:	20000c14 	.word	0x20000c14

080092c8 <_malloc_r>:
 80092c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092cc:	1ccd      	adds	r5, r1, #3
 80092ce:	f025 0503 	bic.w	r5, r5, #3
 80092d2:	3508      	adds	r5, #8
 80092d4:	2d0c      	cmp	r5, #12
 80092d6:	bf38      	it	cc
 80092d8:	250c      	movcc	r5, #12
 80092da:	2d00      	cmp	r5, #0
 80092dc:	4606      	mov	r6, r0
 80092de:	db01      	blt.n	80092e4 <_malloc_r+0x1c>
 80092e0:	42a9      	cmp	r1, r5
 80092e2:	d904      	bls.n	80092ee <_malloc_r+0x26>
 80092e4:	230c      	movs	r3, #12
 80092e6:	6033      	str	r3, [r6, #0]
 80092e8:	2000      	movs	r0, #0
 80092ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80093c4 <_malloc_r+0xfc>
 80092f2:	f000 faa9 	bl	8009848 <__malloc_lock>
 80092f6:	f8d8 3000 	ldr.w	r3, [r8]
 80092fa:	461c      	mov	r4, r3
 80092fc:	bb44      	cbnz	r4, 8009350 <_malloc_r+0x88>
 80092fe:	4629      	mov	r1, r5
 8009300:	4630      	mov	r0, r6
 8009302:	f7ff ffbf 	bl	8009284 <sbrk_aligned>
 8009306:	1c43      	adds	r3, r0, #1
 8009308:	4604      	mov	r4, r0
 800930a:	d158      	bne.n	80093be <_malloc_r+0xf6>
 800930c:	f8d8 4000 	ldr.w	r4, [r8]
 8009310:	4627      	mov	r7, r4
 8009312:	2f00      	cmp	r7, #0
 8009314:	d143      	bne.n	800939e <_malloc_r+0xd6>
 8009316:	2c00      	cmp	r4, #0
 8009318:	d04b      	beq.n	80093b2 <_malloc_r+0xea>
 800931a:	6823      	ldr	r3, [r4, #0]
 800931c:	4639      	mov	r1, r7
 800931e:	4630      	mov	r0, r6
 8009320:	eb04 0903 	add.w	r9, r4, r3
 8009324:	f001 f956 	bl	800a5d4 <_sbrk_r>
 8009328:	4581      	cmp	r9, r0
 800932a:	d142      	bne.n	80093b2 <_malloc_r+0xea>
 800932c:	6821      	ldr	r1, [r4, #0]
 800932e:	4630      	mov	r0, r6
 8009330:	1a6d      	subs	r5, r5, r1
 8009332:	4629      	mov	r1, r5
 8009334:	f7ff ffa6 	bl	8009284 <sbrk_aligned>
 8009338:	3001      	adds	r0, #1
 800933a:	d03a      	beq.n	80093b2 <_malloc_r+0xea>
 800933c:	6823      	ldr	r3, [r4, #0]
 800933e:	442b      	add	r3, r5
 8009340:	6023      	str	r3, [r4, #0]
 8009342:	f8d8 3000 	ldr.w	r3, [r8]
 8009346:	685a      	ldr	r2, [r3, #4]
 8009348:	bb62      	cbnz	r2, 80093a4 <_malloc_r+0xdc>
 800934a:	f8c8 7000 	str.w	r7, [r8]
 800934e:	e00f      	b.n	8009370 <_malloc_r+0xa8>
 8009350:	6822      	ldr	r2, [r4, #0]
 8009352:	1b52      	subs	r2, r2, r5
 8009354:	d420      	bmi.n	8009398 <_malloc_r+0xd0>
 8009356:	2a0b      	cmp	r2, #11
 8009358:	d917      	bls.n	800938a <_malloc_r+0xc2>
 800935a:	1961      	adds	r1, r4, r5
 800935c:	42a3      	cmp	r3, r4
 800935e:	6025      	str	r5, [r4, #0]
 8009360:	bf18      	it	ne
 8009362:	6059      	strne	r1, [r3, #4]
 8009364:	6863      	ldr	r3, [r4, #4]
 8009366:	bf08      	it	eq
 8009368:	f8c8 1000 	streq.w	r1, [r8]
 800936c:	5162      	str	r2, [r4, r5]
 800936e:	604b      	str	r3, [r1, #4]
 8009370:	4630      	mov	r0, r6
 8009372:	f000 fa6f 	bl	8009854 <__malloc_unlock>
 8009376:	f104 000b 	add.w	r0, r4, #11
 800937a:	1d23      	adds	r3, r4, #4
 800937c:	f020 0007 	bic.w	r0, r0, #7
 8009380:	1ac2      	subs	r2, r0, r3
 8009382:	bf1c      	itt	ne
 8009384:	1a1b      	subne	r3, r3, r0
 8009386:	50a3      	strne	r3, [r4, r2]
 8009388:	e7af      	b.n	80092ea <_malloc_r+0x22>
 800938a:	6862      	ldr	r2, [r4, #4]
 800938c:	42a3      	cmp	r3, r4
 800938e:	bf0c      	ite	eq
 8009390:	f8c8 2000 	streq.w	r2, [r8]
 8009394:	605a      	strne	r2, [r3, #4]
 8009396:	e7eb      	b.n	8009370 <_malloc_r+0xa8>
 8009398:	4623      	mov	r3, r4
 800939a:	6864      	ldr	r4, [r4, #4]
 800939c:	e7ae      	b.n	80092fc <_malloc_r+0x34>
 800939e:	463c      	mov	r4, r7
 80093a0:	687f      	ldr	r7, [r7, #4]
 80093a2:	e7b6      	b.n	8009312 <_malloc_r+0x4a>
 80093a4:	461a      	mov	r2, r3
 80093a6:	685b      	ldr	r3, [r3, #4]
 80093a8:	42a3      	cmp	r3, r4
 80093aa:	d1fb      	bne.n	80093a4 <_malloc_r+0xdc>
 80093ac:	2300      	movs	r3, #0
 80093ae:	6053      	str	r3, [r2, #4]
 80093b0:	e7de      	b.n	8009370 <_malloc_r+0xa8>
 80093b2:	230c      	movs	r3, #12
 80093b4:	4630      	mov	r0, r6
 80093b6:	6033      	str	r3, [r6, #0]
 80093b8:	f000 fa4c 	bl	8009854 <__malloc_unlock>
 80093bc:	e794      	b.n	80092e8 <_malloc_r+0x20>
 80093be:	6005      	str	r5, [r0, #0]
 80093c0:	e7d6      	b.n	8009370 <_malloc_r+0xa8>
 80093c2:	bf00      	nop
 80093c4:	20000c18 	.word	0x20000c18

080093c8 <__ascii_mbtowc>:
 80093c8:	b082      	sub	sp, #8
 80093ca:	b901      	cbnz	r1, 80093ce <__ascii_mbtowc+0x6>
 80093cc:	a901      	add	r1, sp, #4
 80093ce:	b142      	cbz	r2, 80093e2 <__ascii_mbtowc+0x1a>
 80093d0:	b14b      	cbz	r3, 80093e6 <__ascii_mbtowc+0x1e>
 80093d2:	7813      	ldrb	r3, [r2, #0]
 80093d4:	600b      	str	r3, [r1, #0]
 80093d6:	7812      	ldrb	r2, [r2, #0]
 80093d8:	1e10      	subs	r0, r2, #0
 80093da:	bf18      	it	ne
 80093dc:	2001      	movne	r0, #1
 80093de:	b002      	add	sp, #8
 80093e0:	4770      	bx	lr
 80093e2:	4610      	mov	r0, r2
 80093e4:	e7fb      	b.n	80093de <__ascii_mbtowc+0x16>
 80093e6:	f06f 0001 	mvn.w	r0, #1
 80093ea:	e7f8      	b.n	80093de <__ascii_mbtowc+0x16>

080093ec <_scanf_chars>:
 80093ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f0:	4615      	mov	r5, r2
 80093f2:	688a      	ldr	r2, [r1, #8]
 80093f4:	4680      	mov	r8, r0
 80093f6:	460c      	mov	r4, r1
 80093f8:	b932      	cbnz	r2, 8009408 <_scanf_chars+0x1c>
 80093fa:	698a      	ldr	r2, [r1, #24]
 80093fc:	2a00      	cmp	r2, #0
 80093fe:	bf14      	ite	ne
 8009400:	f04f 32ff 	movne.w	r2, #4294967295	@ 0xffffffff
 8009404:	2201      	moveq	r2, #1
 8009406:	608a      	str	r2, [r1, #8]
 8009408:	2700      	movs	r7, #0
 800940a:	6822      	ldr	r2, [r4, #0]
 800940c:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800949c <_scanf_chars+0xb0>
 8009410:	06d1      	lsls	r1, r2, #27
 8009412:	bf5f      	itttt	pl
 8009414:	681a      	ldrpl	r2, [r3, #0]
 8009416:	1d11      	addpl	r1, r2, #4
 8009418:	6019      	strpl	r1, [r3, #0]
 800941a:	6816      	ldrpl	r6, [r2, #0]
 800941c:	69a0      	ldr	r0, [r4, #24]
 800941e:	b188      	cbz	r0, 8009444 <_scanf_chars+0x58>
 8009420:	2801      	cmp	r0, #1
 8009422:	d107      	bne.n	8009434 <_scanf_chars+0x48>
 8009424:	682b      	ldr	r3, [r5, #0]
 8009426:	781a      	ldrb	r2, [r3, #0]
 8009428:	6963      	ldr	r3, [r4, #20]
 800942a:	5c9b      	ldrb	r3, [r3, r2]
 800942c:	b953      	cbnz	r3, 8009444 <_scanf_chars+0x58>
 800942e:	2f00      	cmp	r7, #0
 8009430:	d031      	beq.n	8009496 <_scanf_chars+0xaa>
 8009432:	e022      	b.n	800947a <_scanf_chars+0x8e>
 8009434:	2802      	cmp	r0, #2
 8009436:	d120      	bne.n	800947a <_scanf_chars+0x8e>
 8009438:	682b      	ldr	r3, [r5, #0]
 800943a:	781b      	ldrb	r3, [r3, #0]
 800943c:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009440:	071b      	lsls	r3, r3, #28
 8009442:	d41a      	bmi.n	800947a <_scanf_chars+0x8e>
 8009444:	6823      	ldr	r3, [r4, #0]
 8009446:	3701      	adds	r7, #1
 8009448:	06da      	lsls	r2, r3, #27
 800944a:	bf5e      	ittt	pl
 800944c:	682b      	ldrpl	r3, [r5, #0]
 800944e:	781b      	ldrbpl	r3, [r3, #0]
 8009450:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009454:	682a      	ldr	r2, [r5, #0]
 8009456:	686b      	ldr	r3, [r5, #4]
 8009458:	3201      	adds	r2, #1
 800945a:	602a      	str	r2, [r5, #0]
 800945c:	68a2      	ldr	r2, [r4, #8]
 800945e:	3b01      	subs	r3, #1
 8009460:	3a01      	subs	r2, #1
 8009462:	606b      	str	r3, [r5, #4]
 8009464:	60a2      	str	r2, [r4, #8]
 8009466:	b142      	cbz	r2, 800947a <_scanf_chars+0x8e>
 8009468:	2b00      	cmp	r3, #0
 800946a:	dcd7      	bgt.n	800941c <_scanf_chars+0x30>
 800946c:	4629      	mov	r1, r5
 800946e:	4640      	mov	r0, r8
 8009470:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009474:	4798      	blx	r3
 8009476:	2800      	cmp	r0, #0
 8009478:	d0d0      	beq.n	800941c <_scanf_chars+0x30>
 800947a:	6823      	ldr	r3, [r4, #0]
 800947c:	f013 0310 	ands.w	r3, r3, #16
 8009480:	d105      	bne.n	800948e <_scanf_chars+0xa2>
 8009482:	68e2      	ldr	r2, [r4, #12]
 8009484:	3201      	adds	r2, #1
 8009486:	60e2      	str	r2, [r4, #12]
 8009488:	69a2      	ldr	r2, [r4, #24]
 800948a:	b102      	cbz	r2, 800948e <_scanf_chars+0xa2>
 800948c:	7033      	strb	r3, [r6, #0]
 800948e:	2000      	movs	r0, #0
 8009490:	6923      	ldr	r3, [r4, #16]
 8009492:	443b      	add	r3, r7
 8009494:	6123      	str	r3, [r4, #16]
 8009496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949a:	bf00      	nop
 800949c:	0800af61 	.word	0x0800af61

080094a0 <_scanf_i>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	460c      	mov	r4, r1
 80094a6:	4698      	mov	r8, r3
 80094a8:	4b72      	ldr	r3, [pc, #456]	@ (8009674 <_scanf_i+0x1d4>)
 80094aa:	b087      	sub	sp, #28
 80094ac:	4682      	mov	sl, r0
 80094ae:	4616      	mov	r6, r2
 80094b0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80094b4:	ab03      	add	r3, sp, #12
 80094b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80094ba:	4b6f      	ldr	r3, [pc, #444]	@ (8009678 <_scanf_i+0x1d8>)
 80094bc:	69a1      	ldr	r1, [r4, #24]
 80094be:	4a6f      	ldr	r2, [pc, #444]	@ (800967c <_scanf_i+0x1dc>)
 80094c0:	4627      	mov	r7, r4
 80094c2:	2903      	cmp	r1, #3
 80094c4:	bf08      	it	eq
 80094c6:	461a      	moveq	r2, r3
 80094c8:	68a3      	ldr	r3, [r4, #8]
 80094ca:	9201      	str	r2, [sp, #4]
 80094cc:	1e5a      	subs	r2, r3, #1
 80094ce:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80094d2:	bf81      	itttt	hi
 80094d4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80094d8:	eb03 0905 	addhi.w	r9, r3, r5
 80094dc:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80094e0:	60a3      	strhi	r3, [r4, #8]
 80094e2:	f857 3b1c 	ldr.w	r3, [r7], #28
 80094e6:	bf98      	it	ls
 80094e8:	f04f 0900 	movls.w	r9, #0
 80094ec:	463d      	mov	r5, r7
 80094ee:	f04f 0b00 	mov.w	fp, #0
 80094f2:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80094f6:	6023      	str	r3, [r4, #0]
 80094f8:	6831      	ldr	r1, [r6, #0]
 80094fa:	ab03      	add	r3, sp, #12
 80094fc:	2202      	movs	r2, #2
 80094fe:	7809      	ldrb	r1, [r1, #0]
 8009500:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009504:	f7fe f855 	bl	80075b2 <memchr>
 8009508:	b328      	cbz	r0, 8009556 <_scanf_i+0xb6>
 800950a:	f1bb 0f01 	cmp.w	fp, #1
 800950e:	d159      	bne.n	80095c4 <_scanf_i+0x124>
 8009510:	6862      	ldr	r2, [r4, #4]
 8009512:	b92a      	cbnz	r2, 8009520 <_scanf_i+0x80>
 8009514:	2108      	movs	r1, #8
 8009516:	6822      	ldr	r2, [r4, #0]
 8009518:	6061      	str	r1, [r4, #4]
 800951a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800951e:	6022      	str	r2, [r4, #0]
 8009520:	6822      	ldr	r2, [r4, #0]
 8009522:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009526:	6022      	str	r2, [r4, #0]
 8009528:	68a2      	ldr	r2, [r4, #8]
 800952a:	1e51      	subs	r1, r2, #1
 800952c:	60a1      	str	r1, [r4, #8]
 800952e:	b192      	cbz	r2, 8009556 <_scanf_i+0xb6>
 8009530:	6832      	ldr	r2, [r6, #0]
 8009532:	1c51      	adds	r1, r2, #1
 8009534:	6031      	str	r1, [r6, #0]
 8009536:	7812      	ldrb	r2, [r2, #0]
 8009538:	f805 2b01 	strb.w	r2, [r5], #1
 800953c:	6872      	ldr	r2, [r6, #4]
 800953e:	3a01      	subs	r2, #1
 8009540:	2a00      	cmp	r2, #0
 8009542:	6072      	str	r2, [r6, #4]
 8009544:	dc07      	bgt.n	8009556 <_scanf_i+0xb6>
 8009546:	4631      	mov	r1, r6
 8009548:	4650      	mov	r0, sl
 800954a:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800954e:	4790      	blx	r2
 8009550:	2800      	cmp	r0, #0
 8009552:	f040 8085 	bne.w	8009660 <_scanf_i+0x1c0>
 8009556:	f10b 0b01 	add.w	fp, fp, #1
 800955a:	f1bb 0f03 	cmp.w	fp, #3
 800955e:	d1cb      	bne.n	80094f8 <_scanf_i+0x58>
 8009560:	6863      	ldr	r3, [r4, #4]
 8009562:	b90b      	cbnz	r3, 8009568 <_scanf_i+0xc8>
 8009564:	230a      	movs	r3, #10
 8009566:	6063      	str	r3, [r4, #4]
 8009568:	6863      	ldr	r3, [r4, #4]
 800956a:	4945      	ldr	r1, [pc, #276]	@ (8009680 <_scanf_i+0x1e0>)
 800956c:	6960      	ldr	r0, [r4, #20]
 800956e:	1ac9      	subs	r1, r1, r3
 8009570:	f000 f888 	bl	8009684 <__sccl>
 8009574:	f04f 0b00 	mov.w	fp, #0
 8009578:	68a3      	ldr	r3, [r4, #8]
 800957a:	6822      	ldr	r2, [r4, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d03d      	beq.n	80095fc <_scanf_i+0x15c>
 8009580:	6831      	ldr	r1, [r6, #0]
 8009582:	6960      	ldr	r0, [r4, #20]
 8009584:	f891 c000 	ldrb.w	ip, [r1]
 8009588:	f810 000c 	ldrb.w	r0, [r0, ip]
 800958c:	2800      	cmp	r0, #0
 800958e:	d035      	beq.n	80095fc <_scanf_i+0x15c>
 8009590:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009594:	d124      	bne.n	80095e0 <_scanf_i+0x140>
 8009596:	0510      	lsls	r0, r2, #20
 8009598:	d522      	bpl.n	80095e0 <_scanf_i+0x140>
 800959a:	f10b 0b01 	add.w	fp, fp, #1
 800959e:	f1b9 0f00 	cmp.w	r9, #0
 80095a2:	d003      	beq.n	80095ac <_scanf_i+0x10c>
 80095a4:	3301      	adds	r3, #1
 80095a6:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 80095aa:	60a3      	str	r3, [r4, #8]
 80095ac:	6873      	ldr	r3, [r6, #4]
 80095ae:	3b01      	subs	r3, #1
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	6073      	str	r3, [r6, #4]
 80095b4:	dd1b      	ble.n	80095ee <_scanf_i+0x14e>
 80095b6:	6833      	ldr	r3, [r6, #0]
 80095b8:	3301      	adds	r3, #1
 80095ba:	6033      	str	r3, [r6, #0]
 80095bc:	68a3      	ldr	r3, [r4, #8]
 80095be:	3b01      	subs	r3, #1
 80095c0:	60a3      	str	r3, [r4, #8]
 80095c2:	e7d9      	b.n	8009578 <_scanf_i+0xd8>
 80095c4:	f1bb 0f02 	cmp.w	fp, #2
 80095c8:	d1ae      	bne.n	8009528 <_scanf_i+0x88>
 80095ca:	6822      	ldr	r2, [r4, #0]
 80095cc:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 80095d0:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80095d4:	d1bf      	bne.n	8009556 <_scanf_i+0xb6>
 80095d6:	2110      	movs	r1, #16
 80095d8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80095dc:	6061      	str	r1, [r4, #4]
 80095de:	e7a2      	b.n	8009526 <_scanf_i+0x86>
 80095e0:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 80095e4:	6022      	str	r2, [r4, #0]
 80095e6:	780b      	ldrb	r3, [r1, #0]
 80095e8:	f805 3b01 	strb.w	r3, [r5], #1
 80095ec:	e7de      	b.n	80095ac <_scanf_i+0x10c>
 80095ee:	4631      	mov	r1, r6
 80095f0:	4650      	mov	r0, sl
 80095f2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80095f6:	4798      	blx	r3
 80095f8:	2800      	cmp	r0, #0
 80095fa:	d0df      	beq.n	80095bc <_scanf_i+0x11c>
 80095fc:	6823      	ldr	r3, [r4, #0]
 80095fe:	05d9      	lsls	r1, r3, #23
 8009600:	d50d      	bpl.n	800961e <_scanf_i+0x17e>
 8009602:	42bd      	cmp	r5, r7
 8009604:	d909      	bls.n	800961a <_scanf_i+0x17a>
 8009606:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800960a:	4632      	mov	r2, r6
 800960c:	4650      	mov	r0, sl
 800960e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009612:	f105 39ff 	add.w	r9, r5, #4294967295	@ 0xffffffff
 8009616:	4798      	blx	r3
 8009618:	464d      	mov	r5, r9
 800961a:	42bd      	cmp	r5, r7
 800961c:	d028      	beq.n	8009670 <_scanf_i+0x1d0>
 800961e:	6822      	ldr	r2, [r4, #0]
 8009620:	f012 0210 	ands.w	r2, r2, #16
 8009624:	d113      	bne.n	800964e <_scanf_i+0x1ae>
 8009626:	702a      	strb	r2, [r5, #0]
 8009628:	4639      	mov	r1, r7
 800962a:	6863      	ldr	r3, [r4, #4]
 800962c:	4650      	mov	r0, sl
 800962e:	9e01      	ldr	r6, [sp, #4]
 8009630:	47b0      	blx	r6
 8009632:	f8d8 3000 	ldr.w	r3, [r8]
 8009636:	6821      	ldr	r1, [r4, #0]
 8009638:	1d1a      	adds	r2, r3, #4
 800963a:	f8c8 2000 	str.w	r2, [r8]
 800963e:	f011 0f20 	tst.w	r1, #32
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	d00f      	beq.n	8009666 <_scanf_i+0x1c6>
 8009646:	6018      	str	r0, [r3, #0]
 8009648:	68e3      	ldr	r3, [r4, #12]
 800964a:	3301      	adds	r3, #1
 800964c:	60e3      	str	r3, [r4, #12]
 800964e:	2000      	movs	r0, #0
 8009650:	6923      	ldr	r3, [r4, #16]
 8009652:	1bed      	subs	r5, r5, r7
 8009654:	445d      	add	r5, fp
 8009656:	442b      	add	r3, r5
 8009658:	6123      	str	r3, [r4, #16]
 800965a:	b007      	add	sp, #28
 800965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009660:	f04f 0b00 	mov.w	fp, #0
 8009664:	e7ca      	b.n	80095fc <_scanf_i+0x15c>
 8009666:	07ca      	lsls	r2, r1, #31
 8009668:	bf4c      	ite	mi
 800966a:	8018      	strhmi	r0, [r3, #0]
 800966c:	6018      	strpl	r0, [r3, #0]
 800966e:	e7eb      	b.n	8009648 <_scanf_i+0x1a8>
 8009670:	2001      	movs	r0, #1
 8009672:	e7f2      	b.n	800965a <_scanf_i+0x1ba>
 8009674:	0800ae94 	.word	0x0800ae94
 8009678:	08007371 	.word	0x08007371
 800967c:	0800a355 	.word	0x0800a355
 8009680:	0800b16f 	.word	0x0800b16f

08009684 <__sccl>:
 8009684:	b570      	push	{r4, r5, r6, lr}
 8009686:	780b      	ldrb	r3, [r1, #0]
 8009688:	4604      	mov	r4, r0
 800968a:	2b5e      	cmp	r3, #94	@ 0x5e
 800968c:	bf0b      	itete	eq
 800968e:	784b      	ldrbeq	r3, [r1, #1]
 8009690:	1c4a      	addne	r2, r1, #1
 8009692:	1c8a      	addeq	r2, r1, #2
 8009694:	2100      	movne	r1, #0
 8009696:	bf08      	it	eq
 8009698:	2101      	moveq	r1, #1
 800969a:	3801      	subs	r0, #1
 800969c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 80096a0:	f800 1f01 	strb.w	r1, [r0, #1]!
 80096a4:	42a8      	cmp	r0, r5
 80096a6:	d1fb      	bne.n	80096a0 <__sccl+0x1c>
 80096a8:	b90b      	cbnz	r3, 80096ae <__sccl+0x2a>
 80096aa:	1e50      	subs	r0, r2, #1
 80096ac:	bd70      	pop	{r4, r5, r6, pc}
 80096ae:	f081 0101 	eor.w	r1, r1, #1
 80096b2:	4610      	mov	r0, r2
 80096b4:	54e1      	strb	r1, [r4, r3]
 80096b6:	4602      	mov	r2, r0
 80096b8:	f812 5b01 	ldrb.w	r5, [r2], #1
 80096bc:	2d2d      	cmp	r5, #45	@ 0x2d
 80096be:	d005      	beq.n	80096cc <__sccl+0x48>
 80096c0:	2d5d      	cmp	r5, #93	@ 0x5d
 80096c2:	d016      	beq.n	80096f2 <__sccl+0x6e>
 80096c4:	2d00      	cmp	r5, #0
 80096c6:	d0f1      	beq.n	80096ac <__sccl+0x28>
 80096c8:	462b      	mov	r3, r5
 80096ca:	e7f2      	b.n	80096b2 <__sccl+0x2e>
 80096cc:	7846      	ldrb	r6, [r0, #1]
 80096ce:	2e5d      	cmp	r6, #93	@ 0x5d
 80096d0:	d0fa      	beq.n	80096c8 <__sccl+0x44>
 80096d2:	42b3      	cmp	r3, r6
 80096d4:	dcf8      	bgt.n	80096c8 <__sccl+0x44>
 80096d6:	461a      	mov	r2, r3
 80096d8:	3002      	adds	r0, #2
 80096da:	3201      	adds	r2, #1
 80096dc:	4296      	cmp	r6, r2
 80096de:	54a1      	strb	r1, [r4, r2]
 80096e0:	dcfb      	bgt.n	80096da <__sccl+0x56>
 80096e2:	1af2      	subs	r2, r6, r3
 80096e4:	3a01      	subs	r2, #1
 80096e6:	42b3      	cmp	r3, r6
 80096e8:	bfa8      	it	ge
 80096ea:	2200      	movge	r2, #0
 80096ec:	1c5d      	adds	r5, r3, #1
 80096ee:	18ab      	adds	r3, r5, r2
 80096f0:	e7e1      	b.n	80096b6 <__sccl+0x32>
 80096f2:	4610      	mov	r0, r2
 80096f4:	e7da      	b.n	80096ac <__sccl+0x28>
	...

080096f8 <__sflush_r>:
 80096f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fe:	0716      	lsls	r6, r2, #28
 8009700:	4605      	mov	r5, r0
 8009702:	460c      	mov	r4, r1
 8009704:	d454      	bmi.n	80097b0 <__sflush_r+0xb8>
 8009706:	684b      	ldr	r3, [r1, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	dc02      	bgt.n	8009712 <__sflush_r+0x1a>
 800970c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800970e:	2b00      	cmp	r3, #0
 8009710:	dd48      	ble.n	80097a4 <__sflush_r+0xac>
 8009712:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009714:	2e00      	cmp	r6, #0
 8009716:	d045      	beq.n	80097a4 <__sflush_r+0xac>
 8009718:	2300      	movs	r3, #0
 800971a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800971e:	682f      	ldr	r7, [r5, #0]
 8009720:	6a21      	ldr	r1, [r4, #32]
 8009722:	602b      	str	r3, [r5, #0]
 8009724:	d030      	beq.n	8009788 <__sflush_r+0x90>
 8009726:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	0759      	lsls	r1, r3, #29
 800972c:	d505      	bpl.n	800973a <__sflush_r+0x42>
 800972e:	6863      	ldr	r3, [r4, #4]
 8009730:	1ad2      	subs	r2, r2, r3
 8009732:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009734:	b10b      	cbz	r3, 800973a <__sflush_r+0x42>
 8009736:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009738:	1ad2      	subs	r2, r2, r3
 800973a:	2300      	movs	r3, #0
 800973c:	4628      	mov	r0, r5
 800973e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009740:	6a21      	ldr	r1, [r4, #32]
 8009742:	47b0      	blx	r6
 8009744:	1c43      	adds	r3, r0, #1
 8009746:	89a3      	ldrh	r3, [r4, #12]
 8009748:	d106      	bne.n	8009758 <__sflush_r+0x60>
 800974a:	6829      	ldr	r1, [r5, #0]
 800974c:	291d      	cmp	r1, #29
 800974e:	d82b      	bhi.n	80097a8 <__sflush_r+0xb0>
 8009750:	4a28      	ldr	r2, [pc, #160]	@ (80097f4 <__sflush_r+0xfc>)
 8009752:	410a      	asrs	r2, r1
 8009754:	07d6      	lsls	r6, r2, #31
 8009756:	d427      	bmi.n	80097a8 <__sflush_r+0xb0>
 8009758:	2200      	movs	r2, #0
 800975a:	6062      	str	r2, [r4, #4]
 800975c:	6922      	ldr	r2, [r4, #16]
 800975e:	04d9      	lsls	r1, r3, #19
 8009760:	6022      	str	r2, [r4, #0]
 8009762:	d504      	bpl.n	800976e <__sflush_r+0x76>
 8009764:	1c42      	adds	r2, r0, #1
 8009766:	d101      	bne.n	800976c <__sflush_r+0x74>
 8009768:	682b      	ldr	r3, [r5, #0]
 800976a:	b903      	cbnz	r3, 800976e <__sflush_r+0x76>
 800976c:	6560      	str	r0, [r4, #84]	@ 0x54
 800976e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009770:	602f      	str	r7, [r5, #0]
 8009772:	b1b9      	cbz	r1, 80097a4 <__sflush_r+0xac>
 8009774:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009778:	4299      	cmp	r1, r3
 800977a:	d002      	beq.n	8009782 <__sflush_r+0x8a>
 800977c:	4628      	mov	r0, r5
 800977e:	f7fe fd97 	bl	80082b0 <_free_r>
 8009782:	2300      	movs	r3, #0
 8009784:	6363      	str	r3, [r4, #52]	@ 0x34
 8009786:	e00d      	b.n	80097a4 <__sflush_r+0xac>
 8009788:	2301      	movs	r3, #1
 800978a:	4628      	mov	r0, r5
 800978c:	47b0      	blx	r6
 800978e:	4602      	mov	r2, r0
 8009790:	1c50      	adds	r0, r2, #1
 8009792:	d1c9      	bne.n	8009728 <__sflush_r+0x30>
 8009794:	682b      	ldr	r3, [r5, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d0c6      	beq.n	8009728 <__sflush_r+0x30>
 800979a:	2b1d      	cmp	r3, #29
 800979c:	d001      	beq.n	80097a2 <__sflush_r+0xaa>
 800979e:	2b16      	cmp	r3, #22
 80097a0:	d11d      	bne.n	80097de <__sflush_r+0xe6>
 80097a2:	602f      	str	r7, [r5, #0]
 80097a4:	2000      	movs	r0, #0
 80097a6:	e021      	b.n	80097ec <__sflush_r+0xf4>
 80097a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097ac:	b21b      	sxth	r3, r3
 80097ae:	e01a      	b.n	80097e6 <__sflush_r+0xee>
 80097b0:	690f      	ldr	r7, [r1, #16]
 80097b2:	2f00      	cmp	r7, #0
 80097b4:	d0f6      	beq.n	80097a4 <__sflush_r+0xac>
 80097b6:	0793      	lsls	r3, r2, #30
 80097b8:	bf18      	it	ne
 80097ba:	2300      	movne	r3, #0
 80097bc:	680e      	ldr	r6, [r1, #0]
 80097be:	bf08      	it	eq
 80097c0:	694b      	ldreq	r3, [r1, #20]
 80097c2:	1bf6      	subs	r6, r6, r7
 80097c4:	600f      	str	r7, [r1, #0]
 80097c6:	608b      	str	r3, [r1, #8]
 80097c8:	2e00      	cmp	r6, #0
 80097ca:	ddeb      	ble.n	80097a4 <__sflush_r+0xac>
 80097cc:	4633      	mov	r3, r6
 80097ce:	463a      	mov	r2, r7
 80097d0:	4628      	mov	r0, r5
 80097d2:	6a21      	ldr	r1, [r4, #32]
 80097d4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80097d8:	47e0      	blx	ip
 80097da:	2800      	cmp	r0, #0
 80097dc:	dc07      	bgt.n	80097ee <__sflush_r+0xf6>
 80097de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80097e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097ea:	81a3      	strh	r3, [r4, #12]
 80097ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80097ee:	4407      	add	r7, r0
 80097f0:	1a36      	subs	r6, r6, r0
 80097f2:	e7e9      	b.n	80097c8 <__sflush_r+0xd0>
 80097f4:	dfbffffe 	.word	0xdfbffffe

080097f8 <_fflush_r>:
 80097f8:	b538      	push	{r3, r4, r5, lr}
 80097fa:	690b      	ldr	r3, [r1, #16]
 80097fc:	4605      	mov	r5, r0
 80097fe:	460c      	mov	r4, r1
 8009800:	b913      	cbnz	r3, 8009808 <_fflush_r+0x10>
 8009802:	2500      	movs	r5, #0
 8009804:	4628      	mov	r0, r5
 8009806:	bd38      	pop	{r3, r4, r5, pc}
 8009808:	b118      	cbz	r0, 8009812 <_fflush_r+0x1a>
 800980a:	6a03      	ldr	r3, [r0, #32]
 800980c:	b90b      	cbnz	r3, 8009812 <_fflush_r+0x1a>
 800980e:	f7fc ff1b 	bl	8006648 <__sinit>
 8009812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009816:	2b00      	cmp	r3, #0
 8009818:	d0f3      	beq.n	8009802 <_fflush_r+0xa>
 800981a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800981c:	07d0      	lsls	r0, r2, #31
 800981e:	d404      	bmi.n	800982a <_fflush_r+0x32>
 8009820:	0599      	lsls	r1, r3, #22
 8009822:	d402      	bmi.n	800982a <_fflush_r+0x32>
 8009824:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009826:	f7fd fec2 	bl	80075ae <__retarget_lock_acquire_recursive>
 800982a:	4628      	mov	r0, r5
 800982c:	4621      	mov	r1, r4
 800982e:	f7ff ff63 	bl	80096f8 <__sflush_r>
 8009832:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009834:	4605      	mov	r5, r0
 8009836:	07da      	lsls	r2, r3, #31
 8009838:	d4e4      	bmi.n	8009804 <_fflush_r+0xc>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	059b      	lsls	r3, r3, #22
 800983e:	d4e1      	bmi.n	8009804 <_fflush_r+0xc>
 8009840:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009842:	f7fd feb5 	bl	80075b0 <__retarget_lock_release_recursive>
 8009846:	e7dd      	b.n	8009804 <_fflush_r+0xc>

08009848 <__malloc_lock>:
 8009848:	4801      	ldr	r0, [pc, #4]	@ (8009850 <__malloc_lock+0x8>)
 800984a:	f7fd beb0 	b.w	80075ae <__retarget_lock_acquire_recursive>
 800984e:	bf00      	nop
 8009850:	20000c10 	.word	0x20000c10

08009854 <__malloc_unlock>:
 8009854:	4801      	ldr	r0, [pc, #4]	@ (800985c <__malloc_unlock+0x8>)
 8009856:	f7fd beab 	b.w	80075b0 <__retarget_lock_release_recursive>
 800985a:	bf00      	nop
 800985c:	20000c10 	.word	0x20000c10

08009860 <_Balloc>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	69c6      	ldr	r6, [r0, #28]
 8009864:	4604      	mov	r4, r0
 8009866:	460d      	mov	r5, r1
 8009868:	b976      	cbnz	r6, 8009888 <_Balloc+0x28>
 800986a:	2010      	movs	r0, #16
 800986c:	f7ff fd02 	bl	8009274 <malloc>
 8009870:	4602      	mov	r2, r0
 8009872:	61e0      	str	r0, [r4, #28]
 8009874:	b920      	cbnz	r0, 8009880 <_Balloc+0x20>
 8009876:	216b      	movs	r1, #107	@ 0x6b
 8009878:	4b17      	ldr	r3, [pc, #92]	@ (80098d8 <_Balloc+0x78>)
 800987a:	4818      	ldr	r0, [pc, #96]	@ (80098dc <_Balloc+0x7c>)
 800987c:	f000 feba 	bl	800a5f4 <__assert_func>
 8009880:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009884:	6006      	str	r6, [r0, #0]
 8009886:	60c6      	str	r6, [r0, #12]
 8009888:	69e6      	ldr	r6, [r4, #28]
 800988a:	68f3      	ldr	r3, [r6, #12]
 800988c:	b183      	cbz	r3, 80098b0 <_Balloc+0x50>
 800988e:	69e3      	ldr	r3, [r4, #28]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009896:	b9b8      	cbnz	r0, 80098c8 <_Balloc+0x68>
 8009898:	2101      	movs	r1, #1
 800989a:	fa01 f605 	lsl.w	r6, r1, r5
 800989e:	1d72      	adds	r2, r6, #5
 80098a0:	4620      	mov	r0, r4
 80098a2:	0092      	lsls	r2, r2, #2
 80098a4:	f000 fec4 	bl	800a630 <_calloc_r>
 80098a8:	b160      	cbz	r0, 80098c4 <_Balloc+0x64>
 80098aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80098ae:	e00e      	b.n	80098ce <_Balloc+0x6e>
 80098b0:	2221      	movs	r2, #33	@ 0x21
 80098b2:	2104      	movs	r1, #4
 80098b4:	4620      	mov	r0, r4
 80098b6:	f000 febb 	bl	800a630 <_calloc_r>
 80098ba:	69e3      	ldr	r3, [r4, #28]
 80098bc:	60f0      	str	r0, [r6, #12]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d1e4      	bne.n	800988e <_Balloc+0x2e>
 80098c4:	2000      	movs	r0, #0
 80098c6:	bd70      	pop	{r4, r5, r6, pc}
 80098c8:	6802      	ldr	r2, [r0, #0]
 80098ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80098ce:	2300      	movs	r3, #0
 80098d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80098d4:	e7f7      	b.n	80098c6 <_Balloc+0x66>
 80098d6:	bf00      	nop
 80098d8:	0800b06e 	.word	0x0800b06e
 80098dc:	0800b17a 	.word	0x0800b17a

080098e0 <_Bfree>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	69c6      	ldr	r6, [r0, #28]
 80098e4:	4605      	mov	r5, r0
 80098e6:	460c      	mov	r4, r1
 80098e8:	b976      	cbnz	r6, 8009908 <_Bfree+0x28>
 80098ea:	2010      	movs	r0, #16
 80098ec:	f7ff fcc2 	bl	8009274 <malloc>
 80098f0:	4602      	mov	r2, r0
 80098f2:	61e8      	str	r0, [r5, #28]
 80098f4:	b920      	cbnz	r0, 8009900 <_Bfree+0x20>
 80098f6:	218f      	movs	r1, #143	@ 0x8f
 80098f8:	4b08      	ldr	r3, [pc, #32]	@ (800991c <_Bfree+0x3c>)
 80098fa:	4809      	ldr	r0, [pc, #36]	@ (8009920 <_Bfree+0x40>)
 80098fc:	f000 fe7a 	bl	800a5f4 <__assert_func>
 8009900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009904:	6006      	str	r6, [r0, #0]
 8009906:	60c6      	str	r6, [r0, #12]
 8009908:	b13c      	cbz	r4, 800991a <_Bfree+0x3a>
 800990a:	69eb      	ldr	r3, [r5, #28]
 800990c:	6862      	ldr	r2, [r4, #4]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009914:	6021      	str	r1, [r4, #0]
 8009916:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800991a:	bd70      	pop	{r4, r5, r6, pc}
 800991c:	0800b06e 	.word	0x0800b06e
 8009920:	0800b17a 	.word	0x0800b17a

08009924 <__multadd>:
 8009924:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009928:	4607      	mov	r7, r0
 800992a:	460c      	mov	r4, r1
 800992c:	461e      	mov	r6, r3
 800992e:	2000      	movs	r0, #0
 8009930:	690d      	ldr	r5, [r1, #16]
 8009932:	f101 0c14 	add.w	ip, r1, #20
 8009936:	f8dc 3000 	ldr.w	r3, [ip]
 800993a:	3001      	adds	r0, #1
 800993c:	b299      	uxth	r1, r3
 800993e:	fb02 6101 	mla	r1, r2, r1, r6
 8009942:	0c1e      	lsrs	r6, r3, #16
 8009944:	0c0b      	lsrs	r3, r1, #16
 8009946:	fb02 3306 	mla	r3, r2, r6, r3
 800994a:	b289      	uxth	r1, r1
 800994c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009950:	4285      	cmp	r5, r0
 8009952:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009956:	f84c 1b04 	str.w	r1, [ip], #4
 800995a:	dcec      	bgt.n	8009936 <__multadd+0x12>
 800995c:	b30e      	cbz	r6, 80099a2 <__multadd+0x7e>
 800995e:	68a3      	ldr	r3, [r4, #8]
 8009960:	42ab      	cmp	r3, r5
 8009962:	dc19      	bgt.n	8009998 <__multadd+0x74>
 8009964:	6861      	ldr	r1, [r4, #4]
 8009966:	4638      	mov	r0, r7
 8009968:	3101      	adds	r1, #1
 800996a:	f7ff ff79 	bl	8009860 <_Balloc>
 800996e:	4680      	mov	r8, r0
 8009970:	b928      	cbnz	r0, 800997e <__multadd+0x5a>
 8009972:	4602      	mov	r2, r0
 8009974:	21ba      	movs	r1, #186	@ 0xba
 8009976:	4b0c      	ldr	r3, [pc, #48]	@ (80099a8 <__multadd+0x84>)
 8009978:	480c      	ldr	r0, [pc, #48]	@ (80099ac <__multadd+0x88>)
 800997a:	f000 fe3b 	bl	800a5f4 <__assert_func>
 800997e:	6922      	ldr	r2, [r4, #16]
 8009980:	f104 010c 	add.w	r1, r4, #12
 8009984:	3202      	adds	r2, #2
 8009986:	0092      	lsls	r2, r2, #2
 8009988:	300c      	adds	r0, #12
 800998a:	f7fd fe20 	bl	80075ce <memcpy>
 800998e:	4621      	mov	r1, r4
 8009990:	4638      	mov	r0, r7
 8009992:	f7ff ffa5 	bl	80098e0 <_Bfree>
 8009996:	4644      	mov	r4, r8
 8009998:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800999c:	3501      	adds	r5, #1
 800999e:	615e      	str	r6, [r3, #20]
 80099a0:	6125      	str	r5, [r4, #16]
 80099a2:	4620      	mov	r0, r4
 80099a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80099a8:	0800b0dd 	.word	0x0800b0dd
 80099ac:	0800b17a 	.word	0x0800b17a

080099b0 <__s2b>:
 80099b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099b4:	4615      	mov	r5, r2
 80099b6:	2209      	movs	r2, #9
 80099b8:	461f      	mov	r7, r3
 80099ba:	3308      	adds	r3, #8
 80099bc:	460c      	mov	r4, r1
 80099be:	fb93 f3f2 	sdiv	r3, r3, r2
 80099c2:	4606      	mov	r6, r0
 80099c4:	2201      	movs	r2, #1
 80099c6:	2100      	movs	r1, #0
 80099c8:	429a      	cmp	r2, r3
 80099ca:	db09      	blt.n	80099e0 <__s2b+0x30>
 80099cc:	4630      	mov	r0, r6
 80099ce:	f7ff ff47 	bl	8009860 <_Balloc>
 80099d2:	b940      	cbnz	r0, 80099e6 <__s2b+0x36>
 80099d4:	4602      	mov	r2, r0
 80099d6:	21d3      	movs	r1, #211	@ 0xd3
 80099d8:	4b18      	ldr	r3, [pc, #96]	@ (8009a3c <__s2b+0x8c>)
 80099da:	4819      	ldr	r0, [pc, #100]	@ (8009a40 <__s2b+0x90>)
 80099dc:	f000 fe0a 	bl	800a5f4 <__assert_func>
 80099e0:	0052      	lsls	r2, r2, #1
 80099e2:	3101      	adds	r1, #1
 80099e4:	e7f0      	b.n	80099c8 <__s2b+0x18>
 80099e6:	9b08      	ldr	r3, [sp, #32]
 80099e8:	2d09      	cmp	r5, #9
 80099ea:	6143      	str	r3, [r0, #20]
 80099ec:	f04f 0301 	mov.w	r3, #1
 80099f0:	6103      	str	r3, [r0, #16]
 80099f2:	dd16      	ble.n	8009a22 <__s2b+0x72>
 80099f4:	f104 0909 	add.w	r9, r4, #9
 80099f8:	46c8      	mov	r8, r9
 80099fa:	442c      	add	r4, r5
 80099fc:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009a00:	4601      	mov	r1, r0
 8009a02:	220a      	movs	r2, #10
 8009a04:	4630      	mov	r0, r6
 8009a06:	3b30      	subs	r3, #48	@ 0x30
 8009a08:	f7ff ff8c 	bl	8009924 <__multadd>
 8009a0c:	45a0      	cmp	r8, r4
 8009a0e:	d1f5      	bne.n	80099fc <__s2b+0x4c>
 8009a10:	f1a5 0408 	sub.w	r4, r5, #8
 8009a14:	444c      	add	r4, r9
 8009a16:	1b2d      	subs	r5, r5, r4
 8009a18:	1963      	adds	r3, r4, r5
 8009a1a:	42bb      	cmp	r3, r7
 8009a1c:	db04      	blt.n	8009a28 <__s2b+0x78>
 8009a1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a22:	2509      	movs	r5, #9
 8009a24:	340a      	adds	r4, #10
 8009a26:	e7f6      	b.n	8009a16 <__s2b+0x66>
 8009a28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009a2c:	4601      	mov	r1, r0
 8009a2e:	220a      	movs	r2, #10
 8009a30:	4630      	mov	r0, r6
 8009a32:	3b30      	subs	r3, #48	@ 0x30
 8009a34:	f7ff ff76 	bl	8009924 <__multadd>
 8009a38:	e7ee      	b.n	8009a18 <__s2b+0x68>
 8009a3a:	bf00      	nop
 8009a3c:	0800b0dd 	.word	0x0800b0dd
 8009a40:	0800b17a 	.word	0x0800b17a

08009a44 <__hi0bits>:
 8009a44:	4603      	mov	r3, r0
 8009a46:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009a4a:	bf3a      	itte	cc
 8009a4c:	0403      	lslcc	r3, r0, #16
 8009a4e:	2010      	movcc	r0, #16
 8009a50:	2000      	movcs	r0, #0
 8009a52:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009a56:	bf3c      	itt	cc
 8009a58:	021b      	lslcc	r3, r3, #8
 8009a5a:	3008      	addcc	r0, #8
 8009a5c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009a60:	bf3c      	itt	cc
 8009a62:	011b      	lslcc	r3, r3, #4
 8009a64:	3004      	addcc	r0, #4
 8009a66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a6a:	bf3c      	itt	cc
 8009a6c:	009b      	lslcc	r3, r3, #2
 8009a6e:	3002      	addcc	r0, #2
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	db05      	blt.n	8009a80 <__hi0bits+0x3c>
 8009a74:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009a78:	f100 0001 	add.w	r0, r0, #1
 8009a7c:	bf08      	it	eq
 8009a7e:	2020      	moveq	r0, #32
 8009a80:	4770      	bx	lr

08009a82 <__lo0bits>:
 8009a82:	6803      	ldr	r3, [r0, #0]
 8009a84:	4602      	mov	r2, r0
 8009a86:	f013 0007 	ands.w	r0, r3, #7
 8009a8a:	d00b      	beq.n	8009aa4 <__lo0bits+0x22>
 8009a8c:	07d9      	lsls	r1, r3, #31
 8009a8e:	d421      	bmi.n	8009ad4 <__lo0bits+0x52>
 8009a90:	0798      	lsls	r0, r3, #30
 8009a92:	bf49      	itett	mi
 8009a94:	085b      	lsrmi	r3, r3, #1
 8009a96:	089b      	lsrpl	r3, r3, #2
 8009a98:	2001      	movmi	r0, #1
 8009a9a:	6013      	strmi	r3, [r2, #0]
 8009a9c:	bf5c      	itt	pl
 8009a9e:	2002      	movpl	r0, #2
 8009aa0:	6013      	strpl	r3, [r2, #0]
 8009aa2:	4770      	bx	lr
 8009aa4:	b299      	uxth	r1, r3
 8009aa6:	b909      	cbnz	r1, 8009aac <__lo0bits+0x2a>
 8009aa8:	2010      	movs	r0, #16
 8009aaa:	0c1b      	lsrs	r3, r3, #16
 8009aac:	b2d9      	uxtb	r1, r3
 8009aae:	b909      	cbnz	r1, 8009ab4 <__lo0bits+0x32>
 8009ab0:	3008      	adds	r0, #8
 8009ab2:	0a1b      	lsrs	r3, r3, #8
 8009ab4:	0719      	lsls	r1, r3, #28
 8009ab6:	bf04      	itt	eq
 8009ab8:	091b      	lsreq	r3, r3, #4
 8009aba:	3004      	addeq	r0, #4
 8009abc:	0799      	lsls	r1, r3, #30
 8009abe:	bf04      	itt	eq
 8009ac0:	089b      	lsreq	r3, r3, #2
 8009ac2:	3002      	addeq	r0, #2
 8009ac4:	07d9      	lsls	r1, r3, #31
 8009ac6:	d403      	bmi.n	8009ad0 <__lo0bits+0x4e>
 8009ac8:	085b      	lsrs	r3, r3, #1
 8009aca:	f100 0001 	add.w	r0, r0, #1
 8009ace:	d003      	beq.n	8009ad8 <__lo0bits+0x56>
 8009ad0:	6013      	str	r3, [r2, #0]
 8009ad2:	4770      	bx	lr
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	4770      	bx	lr
 8009ad8:	2020      	movs	r0, #32
 8009ada:	4770      	bx	lr

08009adc <__i2b>:
 8009adc:	b510      	push	{r4, lr}
 8009ade:	460c      	mov	r4, r1
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	f7ff febd 	bl	8009860 <_Balloc>
 8009ae6:	4602      	mov	r2, r0
 8009ae8:	b928      	cbnz	r0, 8009af6 <__i2b+0x1a>
 8009aea:	f240 1145 	movw	r1, #325	@ 0x145
 8009aee:	4b04      	ldr	r3, [pc, #16]	@ (8009b00 <__i2b+0x24>)
 8009af0:	4804      	ldr	r0, [pc, #16]	@ (8009b04 <__i2b+0x28>)
 8009af2:	f000 fd7f 	bl	800a5f4 <__assert_func>
 8009af6:	2301      	movs	r3, #1
 8009af8:	6144      	str	r4, [r0, #20]
 8009afa:	6103      	str	r3, [r0, #16]
 8009afc:	bd10      	pop	{r4, pc}
 8009afe:	bf00      	nop
 8009b00:	0800b0dd 	.word	0x0800b0dd
 8009b04:	0800b17a 	.word	0x0800b17a

08009b08 <__multiply>:
 8009b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b0c:	4614      	mov	r4, r2
 8009b0e:	690a      	ldr	r2, [r1, #16]
 8009b10:	6923      	ldr	r3, [r4, #16]
 8009b12:	460f      	mov	r7, r1
 8009b14:	429a      	cmp	r2, r3
 8009b16:	bfa2      	ittt	ge
 8009b18:	4623      	movge	r3, r4
 8009b1a:	460c      	movge	r4, r1
 8009b1c:	461f      	movge	r7, r3
 8009b1e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009b22:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009b26:	68a3      	ldr	r3, [r4, #8]
 8009b28:	6861      	ldr	r1, [r4, #4]
 8009b2a:	eb0a 0609 	add.w	r6, sl, r9
 8009b2e:	42b3      	cmp	r3, r6
 8009b30:	b085      	sub	sp, #20
 8009b32:	bfb8      	it	lt
 8009b34:	3101      	addlt	r1, #1
 8009b36:	f7ff fe93 	bl	8009860 <_Balloc>
 8009b3a:	b930      	cbnz	r0, 8009b4a <__multiply+0x42>
 8009b3c:	4602      	mov	r2, r0
 8009b3e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009b42:	4b43      	ldr	r3, [pc, #268]	@ (8009c50 <__multiply+0x148>)
 8009b44:	4843      	ldr	r0, [pc, #268]	@ (8009c54 <__multiply+0x14c>)
 8009b46:	f000 fd55 	bl	800a5f4 <__assert_func>
 8009b4a:	f100 0514 	add.w	r5, r0, #20
 8009b4e:	462b      	mov	r3, r5
 8009b50:	2200      	movs	r2, #0
 8009b52:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009b56:	4543      	cmp	r3, r8
 8009b58:	d321      	bcc.n	8009b9e <__multiply+0x96>
 8009b5a:	f107 0114 	add.w	r1, r7, #20
 8009b5e:	f104 0214 	add.w	r2, r4, #20
 8009b62:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009b66:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009b6a:	9302      	str	r3, [sp, #8]
 8009b6c:	1b13      	subs	r3, r2, r4
 8009b6e:	3b15      	subs	r3, #21
 8009b70:	f023 0303 	bic.w	r3, r3, #3
 8009b74:	3304      	adds	r3, #4
 8009b76:	f104 0715 	add.w	r7, r4, #21
 8009b7a:	42ba      	cmp	r2, r7
 8009b7c:	bf38      	it	cc
 8009b7e:	2304      	movcc	r3, #4
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	9b02      	ldr	r3, [sp, #8]
 8009b84:	9103      	str	r1, [sp, #12]
 8009b86:	428b      	cmp	r3, r1
 8009b88:	d80c      	bhi.n	8009ba4 <__multiply+0x9c>
 8009b8a:	2e00      	cmp	r6, #0
 8009b8c:	dd03      	ble.n	8009b96 <__multiply+0x8e>
 8009b8e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d05a      	beq.n	8009c4c <__multiply+0x144>
 8009b96:	6106      	str	r6, [r0, #16]
 8009b98:	b005      	add	sp, #20
 8009b9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b9e:	f843 2b04 	str.w	r2, [r3], #4
 8009ba2:	e7d8      	b.n	8009b56 <__multiply+0x4e>
 8009ba4:	f8b1 a000 	ldrh.w	sl, [r1]
 8009ba8:	f1ba 0f00 	cmp.w	sl, #0
 8009bac:	d023      	beq.n	8009bf6 <__multiply+0xee>
 8009bae:	46a9      	mov	r9, r5
 8009bb0:	f04f 0c00 	mov.w	ip, #0
 8009bb4:	f104 0e14 	add.w	lr, r4, #20
 8009bb8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bbc:	f8d9 3000 	ldr.w	r3, [r9]
 8009bc0:	fa1f fb87 	uxth.w	fp, r7
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	fb0a 330b 	mla	r3, sl, fp, r3
 8009bca:	4463      	add	r3, ip
 8009bcc:	f8d9 c000 	ldr.w	ip, [r9]
 8009bd0:	0c3f      	lsrs	r7, r7, #16
 8009bd2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009bd6:	fb0a c707 	mla	r7, sl, r7, ip
 8009bda:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8009bde:	b29b      	uxth	r3, r3
 8009be0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009be4:	4572      	cmp	r2, lr
 8009be6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009bea:	f849 3b04 	str.w	r3, [r9], #4
 8009bee:	d8e3      	bhi.n	8009bb8 <__multiply+0xb0>
 8009bf0:	9b01      	ldr	r3, [sp, #4]
 8009bf2:	f845 c003 	str.w	ip, [r5, r3]
 8009bf6:	9b03      	ldr	r3, [sp, #12]
 8009bf8:	3104      	adds	r1, #4
 8009bfa:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8009bfe:	f1b9 0f00 	cmp.w	r9, #0
 8009c02:	d021      	beq.n	8009c48 <__multiply+0x140>
 8009c04:	46ae      	mov	lr, r5
 8009c06:	f04f 0a00 	mov.w	sl, #0
 8009c0a:	682b      	ldr	r3, [r5, #0]
 8009c0c:	f104 0c14 	add.w	ip, r4, #20
 8009c10:	f8bc b000 	ldrh.w	fp, [ip]
 8009c14:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	fb09 770b 	mla	r7, r9, fp, r7
 8009c1e:	4457      	add	r7, sl
 8009c20:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009c24:	f84e 3b04 	str.w	r3, [lr], #4
 8009c28:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009c2c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c30:	f8be 3000 	ldrh.w	r3, [lr]
 8009c34:	4562      	cmp	r2, ip
 8009c36:	fb09 330a 	mla	r3, r9, sl, r3
 8009c3a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009c3e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009c42:	d8e5      	bhi.n	8009c10 <__multiply+0x108>
 8009c44:	9f01      	ldr	r7, [sp, #4]
 8009c46:	51eb      	str	r3, [r5, r7]
 8009c48:	3504      	adds	r5, #4
 8009c4a:	e79a      	b.n	8009b82 <__multiply+0x7a>
 8009c4c:	3e01      	subs	r6, #1
 8009c4e:	e79c      	b.n	8009b8a <__multiply+0x82>
 8009c50:	0800b0dd 	.word	0x0800b0dd
 8009c54:	0800b17a 	.word	0x0800b17a

08009c58 <__pow5mult>:
 8009c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c5c:	4615      	mov	r5, r2
 8009c5e:	f012 0203 	ands.w	r2, r2, #3
 8009c62:	4607      	mov	r7, r0
 8009c64:	460e      	mov	r6, r1
 8009c66:	d007      	beq.n	8009c78 <__pow5mult+0x20>
 8009c68:	4c25      	ldr	r4, [pc, #148]	@ (8009d00 <__pow5mult+0xa8>)
 8009c6a:	3a01      	subs	r2, #1
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009c72:	f7ff fe57 	bl	8009924 <__multadd>
 8009c76:	4606      	mov	r6, r0
 8009c78:	10ad      	asrs	r5, r5, #2
 8009c7a:	d03d      	beq.n	8009cf8 <__pow5mult+0xa0>
 8009c7c:	69fc      	ldr	r4, [r7, #28]
 8009c7e:	b97c      	cbnz	r4, 8009ca0 <__pow5mult+0x48>
 8009c80:	2010      	movs	r0, #16
 8009c82:	f7ff faf7 	bl	8009274 <malloc>
 8009c86:	4602      	mov	r2, r0
 8009c88:	61f8      	str	r0, [r7, #28]
 8009c8a:	b928      	cbnz	r0, 8009c98 <__pow5mult+0x40>
 8009c8c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009c90:	4b1c      	ldr	r3, [pc, #112]	@ (8009d04 <__pow5mult+0xac>)
 8009c92:	481d      	ldr	r0, [pc, #116]	@ (8009d08 <__pow5mult+0xb0>)
 8009c94:	f000 fcae 	bl	800a5f4 <__assert_func>
 8009c98:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009c9c:	6004      	str	r4, [r0, #0]
 8009c9e:	60c4      	str	r4, [r0, #12]
 8009ca0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009ca4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009ca8:	b94c      	cbnz	r4, 8009cbe <__pow5mult+0x66>
 8009caa:	f240 2171 	movw	r1, #625	@ 0x271
 8009cae:	4638      	mov	r0, r7
 8009cb0:	f7ff ff14 	bl	8009adc <__i2b>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	4604      	mov	r4, r0
 8009cb8:	f8c8 0008 	str.w	r0, [r8, #8]
 8009cbc:	6003      	str	r3, [r0, #0]
 8009cbe:	f04f 0900 	mov.w	r9, #0
 8009cc2:	07eb      	lsls	r3, r5, #31
 8009cc4:	d50a      	bpl.n	8009cdc <__pow5mult+0x84>
 8009cc6:	4631      	mov	r1, r6
 8009cc8:	4622      	mov	r2, r4
 8009cca:	4638      	mov	r0, r7
 8009ccc:	f7ff ff1c 	bl	8009b08 <__multiply>
 8009cd0:	4680      	mov	r8, r0
 8009cd2:	4631      	mov	r1, r6
 8009cd4:	4638      	mov	r0, r7
 8009cd6:	f7ff fe03 	bl	80098e0 <_Bfree>
 8009cda:	4646      	mov	r6, r8
 8009cdc:	106d      	asrs	r5, r5, #1
 8009cde:	d00b      	beq.n	8009cf8 <__pow5mult+0xa0>
 8009ce0:	6820      	ldr	r0, [r4, #0]
 8009ce2:	b938      	cbnz	r0, 8009cf4 <__pow5mult+0x9c>
 8009ce4:	4622      	mov	r2, r4
 8009ce6:	4621      	mov	r1, r4
 8009ce8:	4638      	mov	r0, r7
 8009cea:	f7ff ff0d 	bl	8009b08 <__multiply>
 8009cee:	6020      	str	r0, [r4, #0]
 8009cf0:	f8c0 9000 	str.w	r9, [r0]
 8009cf4:	4604      	mov	r4, r0
 8009cf6:	e7e4      	b.n	8009cc2 <__pow5mult+0x6a>
 8009cf8:	4630      	mov	r0, r6
 8009cfa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cfe:	bf00      	nop
 8009d00:	0800b1d4 	.word	0x0800b1d4
 8009d04:	0800b06e 	.word	0x0800b06e
 8009d08:	0800b17a 	.word	0x0800b17a

08009d0c <__lshift>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	460c      	mov	r4, r1
 8009d12:	4607      	mov	r7, r0
 8009d14:	4691      	mov	r9, r2
 8009d16:	6923      	ldr	r3, [r4, #16]
 8009d18:	6849      	ldr	r1, [r1, #4]
 8009d1a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009d1e:	68a3      	ldr	r3, [r4, #8]
 8009d20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009d24:	f108 0601 	add.w	r6, r8, #1
 8009d28:	42b3      	cmp	r3, r6
 8009d2a:	db0b      	blt.n	8009d44 <__lshift+0x38>
 8009d2c:	4638      	mov	r0, r7
 8009d2e:	f7ff fd97 	bl	8009860 <_Balloc>
 8009d32:	4605      	mov	r5, r0
 8009d34:	b948      	cbnz	r0, 8009d4a <__lshift+0x3e>
 8009d36:	4602      	mov	r2, r0
 8009d38:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009d3c:	4b27      	ldr	r3, [pc, #156]	@ (8009ddc <__lshift+0xd0>)
 8009d3e:	4828      	ldr	r0, [pc, #160]	@ (8009de0 <__lshift+0xd4>)
 8009d40:	f000 fc58 	bl	800a5f4 <__assert_func>
 8009d44:	3101      	adds	r1, #1
 8009d46:	005b      	lsls	r3, r3, #1
 8009d48:	e7ee      	b.n	8009d28 <__lshift+0x1c>
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	f100 0114 	add.w	r1, r0, #20
 8009d50:	f100 0210 	add.w	r2, r0, #16
 8009d54:	4618      	mov	r0, r3
 8009d56:	4553      	cmp	r3, sl
 8009d58:	db33      	blt.n	8009dc2 <__lshift+0xb6>
 8009d5a:	6920      	ldr	r0, [r4, #16]
 8009d5c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009d60:	f104 0314 	add.w	r3, r4, #20
 8009d64:	f019 091f 	ands.w	r9, r9, #31
 8009d68:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009d6c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009d70:	d02b      	beq.n	8009dca <__lshift+0xbe>
 8009d72:	468a      	mov	sl, r1
 8009d74:	2200      	movs	r2, #0
 8009d76:	f1c9 0e20 	rsb	lr, r9, #32
 8009d7a:	6818      	ldr	r0, [r3, #0]
 8009d7c:	fa00 f009 	lsl.w	r0, r0, r9
 8009d80:	4310      	orrs	r0, r2
 8009d82:	f84a 0b04 	str.w	r0, [sl], #4
 8009d86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8a:	459c      	cmp	ip, r3
 8009d8c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009d90:	d8f3      	bhi.n	8009d7a <__lshift+0x6e>
 8009d92:	ebac 0304 	sub.w	r3, ip, r4
 8009d96:	3b15      	subs	r3, #21
 8009d98:	f023 0303 	bic.w	r3, r3, #3
 8009d9c:	3304      	adds	r3, #4
 8009d9e:	f104 0015 	add.w	r0, r4, #21
 8009da2:	4584      	cmp	ip, r0
 8009da4:	bf38      	it	cc
 8009da6:	2304      	movcc	r3, #4
 8009da8:	50ca      	str	r2, [r1, r3]
 8009daa:	b10a      	cbz	r2, 8009db0 <__lshift+0xa4>
 8009dac:	f108 0602 	add.w	r6, r8, #2
 8009db0:	3e01      	subs	r6, #1
 8009db2:	4638      	mov	r0, r7
 8009db4:	4621      	mov	r1, r4
 8009db6:	612e      	str	r6, [r5, #16]
 8009db8:	f7ff fd92 	bl	80098e0 <_Bfree>
 8009dbc:	4628      	mov	r0, r5
 8009dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dc2:	f842 0f04 	str.w	r0, [r2, #4]!
 8009dc6:	3301      	adds	r3, #1
 8009dc8:	e7c5      	b.n	8009d56 <__lshift+0x4a>
 8009dca:	3904      	subs	r1, #4
 8009dcc:	f853 2b04 	ldr.w	r2, [r3], #4
 8009dd0:	459c      	cmp	ip, r3
 8009dd2:	f841 2f04 	str.w	r2, [r1, #4]!
 8009dd6:	d8f9      	bhi.n	8009dcc <__lshift+0xc0>
 8009dd8:	e7ea      	b.n	8009db0 <__lshift+0xa4>
 8009dda:	bf00      	nop
 8009ddc:	0800b0dd 	.word	0x0800b0dd
 8009de0:	0800b17a 	.word	0x0800b17a

08009de4 <__mcmp>:
 8009de4:	4603      	mov	r3, r0
 8009de6:	690a      	ldr	r2, [r1, #16]
 8009de8:	6900      	ldr	r0, [r0, #16]
 8009dea:	b530      	push	{r4, r5, lr}
 8009dec:	1a80      	subs	r0, r0, r2
 8009dee:	d10e      	bne.n	8009e0e <__mcmp+0x2a>
 8009df0:	3314      	adds	r3, #20
 8009df2:	3114      	adds	r1, #20
 8009df4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009df8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009dfc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009e00:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009e04:	4295      	cmp	r5, r2
 8009e06:	d003      	beq.n	8009e10 <__mcmp+0x2c>
 8009e08:	d205      	bcs.n	8009e16 <__mcmp+0x32>
 8009e0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e0e:	bd30      	pop	{r4, r5, pc}
 8009e10:	42a3      	cmp	r3, r4
 8009e12:	d3f3      	bcc.n	8009dfc <__mcmp+0x18>
 8009e14:	e7fb      	b.n	8009e0e <__mcmp+0x2a>
 8009e16:	2001      	movs	r0, #1
 8009e18:	e7f9      	b.n	8009e0e <__mcmp+0x2a>
	...

08009e1c <__mdiff>:
 8009e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e20:	4689      	mov	r9, r1
 8009e22:	4606      	mov	r6, r0
 8009e24:	4611      	mov	r1, r2
 8009e26:	4648      	mov	r0, r9
 8009e28:	4614      	mov	r4, r2
 8009e2a:	f7ff ffdb 	bl	8009de4 <__mcmp>
 8009e2e:	1e05      	subs	r5, r0, #0
 8009e30:	d112      	bne.n	8009e58 <__mdiff+0x3c>
 8009e32:	4629      	mov	r1, r5
 8009e34:	4630      	mov	r0, r6
 8009e36:	f7ff fd13 	bl	8009860 <_Balloc>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	b928      	cbnz	r0, 8009e4a <__mdiff+0x2e>
 8009e3e:	f240 2137 	movw	r1, #567	@ 0x237
 8009e42:	4b3e      	ldr	r3, [pc, #248]	@ (8009f3c <__mdiff+0x120>)
 8009e44:	483e      	ldr	r0, [pc, #248]	@ (8009f40 <__mdiff+0x124>)
 8009e46:	f000 fbd5 	bl	800a5f4 <__assert_func>
 8009e4a:	2301      	movs	r3, #1
 8009e4c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009e50:	4610      	mov	r0, r2
 8009e52:	b003      	add	sp, #12
 8009e54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e58:	bfbc      	itt	lt
 8009e5a:	464b      	movlt	r3, r9
 8009e5c:	46a1      	movlt	r9, r4
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009e64:	bfba      	itte	lt
 8009e66:	461c      	movlt	r4, r3
 8009e68:	2501      	movlt	r5, #1
 8009e6a:	2500      	movge	r5, #0
 8009e6c:	f7ff fcf8 	bl	8009860 <_Balloc>
 8009e70:	4602      	mov	r2, r0
 8009e72:	b918      	cbnz	r0, 8009e7c <__mdiff+0x60>
 8009e74:	f240 2145 	movw	r1, #581	@ 0x245
 8009e78:	4b30      	ldr	r3, [pc, #192]	@ (8009f3c <__mdiff+0x120>)
 8009e7a:	e7e3      	b.n	8009e44 <__mdiff+0x28>
 8009e7c:	f100 0b14 	add.w	fp, r0, #20
 8009e80:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009e84:	f109 0310 	add.w	r3, r9, #16
 8009e88:	60c5      	str	r5, [r0, #12]
 8009e8a:	f04f 0c00 	mov.w	ip, #0
 8009e8e:	f109 0514 	add.w	r5, r9, #20
 8009e92:	46d9      	mov	r9, fp
 8009e94:	6926      	ldr	r6, [r4, #16]
 8009e96:	f104 0e14 	add.w	lr, r4, #20
 8009e9a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009e9e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009ea2:	9301      	str	r3, [sp, #4]
 8009ea4:	9b01      	ldr	r3, [sp, #4]
 8009ea6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009eaa:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009eae:	b281      	uxth	r1, r0
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	fa1f f38a 	uxth.w	r3, sl
 8009eb6:	1a5b      	subs	r3, r3, r1
 8009eb8:	0c00      	lsrs	r0, r0, #16
 8009eba:	4463      	add	r3, ip
 8009ebc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009ec0:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009ec4:	b29b      	uxth	r3, r3
 8009ec6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009eca:	4576      	cmp	r6, lr
 8009ecc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ed0:	f849 3b04 	str.w	r3, [r9], #4
 8009ed4:	d8e6      	bhi.n	8009ea4 <__mdiff+0x88>
 8009ed6:	1b33      	subs	r3, r6, r4
 8009ed8:	3b15      	subs	r3, #21
 8009eda:	f023 0303 	bic.w	r3, r3, #3
 8009ede:	3415      	adds	r4, #21
 8009ee0:	3304      	adds	r3, #4
 8009ee2:	42a6      	cmp	r6, r4
 8009ee4:	bf38      	it	cc
 8009ee6:	2304      	movcc	r3, #4
 8009ee8:	441d      	add	r5, r3
 8009eea:	445b      	add	r3, fp
 8009eec:	461e      	mov	r6, r3
 8009eee:	462c      	mov	r4, r5
 8009ef0:	4544      	cmp	r4, r8
 8009ef2:	d30e      	bcc.n	8009f12 <__mdiff+0xf6>
 8009ef4:	f108 0103 	add.w	r1, r8, #3
 8009ef8:	1b49      	subs	r1, r1, r5
 8009efa:	f021 0103 	bic.w	r1, r1, #3
 8009efe:	3d03      	subs	r5, #3
 8009f00:	45a8      	cmp	r8, r5
 8009f02:	bf38      	it	cc
 8009f04:	2100      	movcc	r1, #0
 8009f06:	440b      	add	r3, r1
 8009f08:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f0c:	b199      	cbz	r1, 8009f36 <__mdiff+0x11a>
 8009f0e:	6117      	str	r7, [r2, #16]
 8009f10:	e79e      	b.n	8009e50 <__mdiff+0x34>
 8009f12:	46e6      	mov	lr, ip
 8009f14:	f854 1b04 	ldr.w	r1, [r4], #4
 8009f18:	fa1f fc81 	uxth.w	ip, r1
 8009f1c:	44f4      	add	ip, lr
 8009f1e:	0c08      	lsrs	r0, r1, #16
 8009f20:	4471      	add	r1, lr
 8009f22:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009f26:	b289      	uxth	r1, r1
 8009f28:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009f2c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009f30:	f846 1b04 	str.w	r1, [r6], #4
 8009f34:	e7dc      	b.n	8009ef0 <__mdiff+0xd4>
 8009f36:	3f01      	subs	r7, #1
 8009f38:	e7e6      	b.n	8009f08 <__mdiff+0xec>
 8009f3a:	bf00      	nop
 8009f3c:	0800b0dd 	.word	0x0800b0dd
 8009f40:	0800b17a 	.word	0x0800b17a

08009f44 <__ulp>:
 8009f44:	4b0e      	ldr	r3, [pc, #56]	@ (8009f80 <__ulp+0x3c>)
 8009f46:	400b      	ands	r3, r1
 8009f48:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	dc08      	bgt.n	8009f62 <__ulp+0x1e>
 8009f50:	425b      	negs	r3, r3
 8009f52:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8009f56:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009f5a:	da04      	bge.n	8009f66 <__ulp+0x22>
 8009f5c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009f60:	4113      	asrs	r3, r2
 8009f62:	2200      	movs	r2, #0
 8009f64:	e008      	b.n	8009f78 <__ulp+0x34>
 8009f66:	f1a2 0314 	sub.w	r3, r2, #20
 8009f6a:	2b1e      	cmp	r3, #30
 8009f6c:	bfd6      	itet	le
 8009f6e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009f72:	2201      	movgt	r2, #1
 8009f74:	40da      	lsrle	r2, r3
 8009f76:	2300      	movs	r3, #0
 8009f78:	4619      	mov	r1, r3
 8009f7a:	4610      	mov	r0, r2
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	7ff00000 	.word	0x7ff00000

08009f84 <__b2d>:
 8009f84:	6902      	ldr	r2, [r0, #16]
 8009f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f88:	f100 0614 	add.w	r6, r0, #20
 8009f8c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8009f90:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8009f94:	4f1e      	ldr	r7, [pc, #120]	@ (800a010 <__b2d+0x8c>)
 8009f96:	4620      	mov	r0, r4
 8009f98:	f7ff fd54 	bl	8009a44 <__hi0bits>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	f1c0 0020 	rsb	r0, r0, #32
 8009fa2:	2b0a      	cmp	r3, #10
 8009fa4:	f1a2 0504 	sub.w	r5, r2, #4
 8009fa8:	6008      	str	r0, [r1, #0]
 8009faa:	dc12      	bgt.n	8009fd2 <__b2d+0x4e>
 8009fac:	42ae      	cmp	r6, r5
 8009fae:	bf2c      	ite	cs
 8009fb0:	2200      	movcs	r2, #0
 8009fb2:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009fb6:	f1c3 0c0b 	rsb	ip, r3, #11
 8009fba:	3315      	adds	r3, #21
 8009fbc:	fa24 fe0c 	lsr.w	lr, r4, ip
 8009fc0:	fa04 f303 	lsl.w	r3, r4, r3
 8009fc4:	fa22 f20c 	lsr.w	r2, r2, ip
 8009fc8:	ea4e 0107 	orr.w	r1, lr, r7
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	4610      	mov	r0, r2
 8009fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd2:	42ae      	cmp	r6, r5
 8009fd4:	bf36      	itet	cc
 8009fd6:	f1a2 0508 	subcc.w	r5, r2, #8
 8009fda:	2200      	movcs	r2, #0
 8009fdc:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8009fe0:	3b0b      	subs	r3, #11
 8009fe2:	d012      	beq.n	800a00a <__b2d+0x86>
 8009fe4:	f1c3 0720 	rsb	r7, r3, #32
 8009fe8:	fa22 f107 	lsr.w	r1, r2, r7
 8009fec:	409c      	lsls	r4, r3
 8009fee:	430c      	orrs	r4, r1
 8009ff0:	42b5      	cmp	r5, r6
 8009ff2:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8009ff6:	bf94      	ite	ls
 8009ff8:	2400      	movls	r4, #0
 8009ffa:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8009ffe:	409a      	lsls	r2, r3
 800a000:	40fc      	lsrs	r4, r7
 800a002:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800a006:	4322      	orrs	r2, r4
 800a008:	e7e1      	b.n	8009fce <__b2d+0x4a>
 800a00a:	ea44 0107 	orr.w	r1, r4, r7
 800a00e:	e7de      	b.n	8009fce <__b2d+0x4a>
 800a010:	3ff00000 	.word	0x3ff00000

0800a014 <__d2b>:
 800a014:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800a018:	2101      	movs	r1, #1
 800a01a:	4690      	mov	r8, r2
 800a01c:	4699      	mov	r9, r3
 800a01e:	9e08      	ldr	r6, [sp, #32]
 800a020:	f7ff fc1e 	bl	8009860 <_Balloc>
 800a024:	4604      	mov	r4, r0
 800a026:	b930      	cbnz	r0, 800a036 <__d2b+0x22>
 800a028:	4602      	mov	r2, r0
 800a02a:	f240 310f 	movw	r1, #783	@ 0x30f
 800a02e:	4b23      	ldr	r3, [pc, #140]	@ (800a0bc <__d2b+0xa8>)
 800a030:	4823      	ldr	r0, [pc, #140]	@ (800a0c0 <__d2b+0xac>)
 800a032:	f000 fadf 	bl	800a5f4 <__assert_func>
 800a036:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a03a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a03e:	b10d      	cbz	r5, 800a044 <__d2b+0x30>
 800a040:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a044:	9301      	str	r3, [sp, #4]
 800a046:	f1b8 0300 	subs.w	r3, r8, #0
 800a04a:	d024      	beq.n	800a096 <__d2b+0x82>
 800a04c:	4668      	mov	r0, sp
 800a04e:	9300      	str	r3, [sp, #0]
 800a050:	f7ff fd17 	bl	8009a82 <__lo0bits>
 800a054:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a058:	b1d8      	cbz	r0, 800a092 <__d2b+0x7e>
 800a05a:	f1c0 0320 	rsb	r3, r0, #32
 800a05e:	fa02 f303 	lsl.w	r3, r2, r3
 800a062:	430b      	orrs	r3, r1
 800a064:	40c2      	lsrs	r2, r0
 800a066:	6163      	str	r3, [r4, #20]
 800a068:	9201      	str	r2, [sp, #4]
 800a06a:	9b01      	ldr	r3, [sp, #4]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	bf0c      	ite	eq
 800a070:	2201      	moveq	r2, #1
 800a072:	2202      	movne	r2, #2
 800a074:	61a3      	str	r3, [r4, #24]
 800a076:	6122      	str	r2, [r4, #16]
 800a078:	b1ad      	cbz	r5, 800a0a6 <__d2b+0x92>
 800a07a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a07e:	4405      	add	r5, r0
 800a080:	6035      	str	r5, [r6, #0]
 800a082:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a086:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a088:	6018      	str	r0, [r3, #0]
 800a08a:	4620      	mov	r0, r4
 800a08c:	b002      	add	sp, #8
 800a08e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800a092:	6161      	str	r1, [r4, #20]
 800a094:	e7e9      	b.n	800a06a <__d2b+0x56>
 800a096:	a801      	add	r0, sp, #4
 800a098:	f7ff fcf3 	bl	8009a82 <__lo0bits>
 800a09c:	9b01      	ldr	r3, [sp, #4]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	6163      	str	r3, [r4, #20]
 800a0a2:	3020      	adds	r0, #32
 800a0a4:	e7e7      	b.n	800a076 <__d2b+0x62>
 800a0a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a0aa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a0ae:	6030      	str	r0, [r6, #0]
 800a0b0:	6918      	ldr	r0, [r3, #16]
 800a0b2:	f7ff fcc7 	bl	8009a44 <__hi0bits>
 800a0b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a0ba:	e7e4      	b.n	800a086 <__d2b+0x72>
 800a0bc:	0800b0dd 	.word	0x0800b0dd
 800a0c0:	0800b17a 	.word	0x0800b17a

0800a0c4 <__ratio>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	b085      	sub	sp, #20
 800a0ca:	e9cd 1000 	strd	r1, r0, [sp]
 800a0ce:	a902      	add	r1, sp, #8
 800a0d0:	f7ff ff58 	bl	8009f84 <__b2d>
 800a0d4:	468b      	mov	fp, r1
 800a0d6:	4606      	mov	r6, r0
 800a0d8:	460f      	mov	r7, r1
 800a0da:	9800      	ldr	r0, [sp, #0]
 800a0dc:	a903      	add	r1, sp, #12
 800a0de:	f7ff ff51 	bl	8009f84 <__b2d>
 800a0e2:	460d      	mov	r5, r1
 800a0e4:	9b01      	ldr	r3, [sp, #4]
 800a0e6:	4689      	mov	r9, r1
 800a0e8:	6919      	ldr	r1, [r3, #16]
 800a0ea:	9b00      	ldr	r3, [sp, #0]
 800a0ec:	4604      	mov	r4, r0
 800a0ee:	691b      	ldr	r3, [r3, #16]
 800a0f0:	4630      	mov	r0, r6
 800a0f2:	1ac9      	subs	r1, r1, r3
 800a0f4:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a0f8:	1a9b      	subs	r3, r3, r2
 800a0fa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bfcd      	iteet	gt
 800a102:	463a      	movgt	r2, r7
 800a104:	462a      	movle	r2, r5
 800a106:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a10a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800a10e:	bfd8      	it	le
 800a110:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a114:	464b      	mov	r3, r9
 800a116:	4622      	mov	r2, r4
 800a118:	4659      	mov	r1, fp
 800a11a:	f7f6 fb07 	bl	800072c <__aeabi_ddiv>
 800a11e:	b005      	add	sp, #20
 800a120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a124 <__copybits>:
 800a124:	3901      	subs	r1, #1
 800a126:	b570      	push	{r4, r5, r6, lr}
 800a128:	1149      	asrs	r1, r1, #5
 800a12a:	6914      	ldr	r4, [r2, #16]
 800a12c:	3101      	adds	r1, #1
 800a12e:	f102 0314 	add.w	r3, r2, #20
 800a132:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a136:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a13a:	1f05      	subs	r5, r0, #4
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	d30c      	bcc.n	800a15a <__copybits+0x36>
 800a140:	1aa3      	subs	r3, r4, r2
 800a142:	3b11      	subs	r3, #17
 800a144:	f023 0303 	bic.w	r3, r3, #3
 800a148:	3211      	adds	r2, #17
 800a14a:	42a2      	cmp	r2, r4
 800a14c:	bf88      	it	hi
 800a14e:	2300      	movhi	r3, #0
 800a150:	4418      	add	r0, r3
 800a152:	2300      	movs	r3, #0
 800a154:	4288      	cmp	r0, r1
 800a156:	d305      	bcc.n	800a164 <__copybits+0x40>
 800a158:	bd70      	pop	{r4, r5, r6, pc}
 800a15a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a15e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a162:	e7eb      	b.n	800a13c <__copybits+0x18>
 800a164:	f840 3b04 	str.w	r3, [r0], #4
 800a168:	e7f4      	b.n	800a154 <__copybits+0x30>

0800a16a <__any_on>:
 800a16a:	f100 0214 	add.w	r2, r0, #20
 800a16e:	6900      	ldr	r0, [r0, #16]
 800a170:	114b      	asrs	r3, r1, #5
 800a172:	4298      	cmp	r0, r3
 800a174:	b510      	push	{r4, lr}
 800a176:	db11      	blt.n	800a19c <__any_on+0x32>
 800a178:	dd0a      	ble.n	800a190 <__any_on+0x26>
 800a17a:	f011 011f 	ands.w	r1, r1, #31
 800a17e:	d007      	beq.n	800a190 <__any_on+0x26>
 800a180:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a184:	fa24 f001 	lsr.w	r0, r4, r1
 800a188:	fa00 f101 	lsl.w	r1, r0, r1
 800a18c:	428c      	cmp	r4, r1
 800a18e:	d10b      	bne.n	800a1a8 <__any_on+0x3e>
 800a190:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a194:	4293      	cmp	r3, r2
 800a196:	d803      	bhi.n	800a1a0 <__any_on+0x36>
 800a198:	2000      	movs	r0, #0
 800a19a:	bd10      	pop	{r4, pc}
 800a19c:	4603      	mov	r3, r0
 800a19e:	e7f7      	b.n	800a190 <__any_on+0x26>
 800a1a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a1a4:	2900      	cmp	r1, #0
 800a1a6:	d0f5      	beq.n	800a194 <__any_on+0x2a>
 800a1a8:	2001      	movs	r0, #1
 800a1aa:	e7f6      	b.n	800a19a <__any_on+0x30>

0800a1ac <__submore>:
 800a1ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1b0:	460c      	mov	r4, r1
 800a1b2:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a1b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1b8:	4299      	cmp	r1, r3
 800a1ba:	d11b      	bne.n	800a1f4 <__submore+0x48>
 800a1bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a1c0:	f7ff f882 	bl	80092c8 <_malloc_r>
 800a1c4:	b918      	cbnz	r0, 800a1ce <__submore+0x22>
 800a1c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a1d2:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a1d4:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a1d8:	6360      	str	r0, [r4, #52]	@ 0x34
 800a1da:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a1de:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a1e2:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a1e6:	7043      	strb	r3, [r0, #1]
 800a1e8:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a1ec:	7003      	strb	r3, [r0, #0]
 800a1ee:	6020      	str	r0, [r4, #0]
 800a1f0:	2000      	movs	r0, #0
 800a1f2:	e7ea      	b.n	800a1ca <__submore+0x1e>
 800a1f4:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a1f6:	0077      	lsls	r7, r6, #1
 800a1f8:	463a      	mov	r2, r7
 800a1fa:	f000 f80f 	bl	800a21c <_realloc_r>
 800a1fe:	4605      	mov	r5, r0
 800a200:	2800      	cmp	r0, #0
 800a202:	d0e0      	beq.n	800a1c6 <__submore+0x1a>
 800a204:	eb00 0806 	add.w	r8, r0, r6
 800a208:	4601      	mov	r1, r0
 800a20a:	4632      	mov	r2, r6
 800a20c:	4640      	mov	r0, r8
 800a20e:	f7fd f9de 	bl	80075ce <memcpy>
 800a212:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a216:	f8c4 8000 	str.w	r8, [r4]
 800a21a:	e7e9      	b.n	800a1f0 <__submore+0x44>

0800a21c <_realloc_r>:
 800a21c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a220:	4680      	mov	r8, r0
 800a222:	4615      	mov	r5, r2
 800a224:	460c      	mov	r4, r1
 800a226:	b921      	cbnz	r1, 800a232 <_realloc_r+0x16>
 800a228:	4611      	mov	r1, r2
 800a22a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a22e:	f7ff b84b 	b.w	80092c8 <_malloc_r>
 800a232:	b92a      	cbnz	r2, 800a240 <_realloc_r+0x24>
 800a234:	f7fe f83c 	bl	80082b0 <_free_r>
 800a238:	2400      	movs	r4, #0
 800a23a:	4620      	mov	r0, r4
 800a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a240:	f000 fa0a 	bl	800a658 <_malloc_usable_size_r>
 800a244:	4285      	cmp	r5, r0
 800a246:	4606      	mov	r6, r0
 800a248:	d802      	bhi.n	800a250 <_realloc_r+0x34>
 800a24a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a24e:	d8f4      	bhi.n	800a23a <_realloc_r+0x1e>
 800a250:	4629      	mov	r1, r5
 800a252:	4640      	mov	r0, r8
 800a254:	f7ff f838 	bl	80092c8 <_malloc_r>
 800a258:	4607      	mov	r7, r0
 800a25a:	2800      	cmp	r0, #0
 800a25c:	d0ec      	beq.n	800a238 <_realloc_r+0x1c>
 800a25e:	42b5      	cmp	r5, r6
 800a260:	462a      	mov	r2, r5
 800a262:	4621      	mov	r1, r4
 800a264:	bf28      	it	cs
 800a266:	4632      	movcs	r2, r6
 800a268:	f7fd f9b1 	bl	80075ce <memcpy>
 800a26c:	4621      	mov	r1, r4
 800a26e:	4640      	mov	r0, r8
 800a270:	f7fe f81e 	bl	80082b0 <_free_r>
 800a274:	463c      	mov	r4, r7
 800a276:	e7e0      	b.n	800a23a <_realloc_r+0x1e>

0800a278 <_strtoul_l.constprop.0>:
 800a278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a27c:	4686      	mov	lr, r0
 800a27e:	460d      	mov	r5, r1
 800a280:	4e33      	ldr	r6, [pc, #204]	@ (800a350 <_strtoul_l.constprop.0+0xd8>)
 800a282:	4628      	mov	r0, r5
 800a284:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a288:	5d37      	ldrb	r7, [r6, r4]
 800a28a:	f017 0708 	ands.w	r7, r7, #8
 800a28e:	d1f8      	bne.n	800a282 <_strtoul_l.constprop.0+0xa>
 800a290:	2c2d      	cmp	r4, #45	@ 0x2d
 800a292:	d12f      	bne.n	800a2f4 <_strtoul_l.constprop.0+0x7c>
 800a294:	2701      	movs	r7, #1
 800a296:	782c      	ldrb	r4, [r5, #0]
 800a298:	1c85      	adds	r5, r0, #2
 800a29a:	f033 0010 	bics.w	r0, r3, #16
 800a29e:	d109      	bne.n	800a2b4 <_strtoul_l.constprop.0+0x3c>
 800a2a0:	2c30      	cmp	r4, #48	@ 0x30
 800a2a2:	d12c      	bne.n	800a2fe <_strtoul_l.constprop.0+0x86>
 800a2a4:	7828      	ldrb	r0, [r5, #0]
 800a2a6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a2aa:	2858      	cmp	r0, #88	@ 0x58
 800a2ac:	d127      	bne.n	800a2fe <_strtoul_l.constprop.0+0x86>
 800a2ae:	2310      	movs	r3, #16
 800a2b0:	786c      	ldrb	r4, [r5, #1]
 800a2b2:	3502      	adds	r5, #2
 800a2b4:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 800a2b8:	fbb8 f8f3 	udiv	r8, r8, r3
 800a2bc:	2600      	movs	r6, #0
 800a2be:	fb03 f908 	mul.w	r9, r3, r8
 800a2c2:	4630      	mov	r0, r6
 800a2c4:	ea6f 0909 	mvn.w	r9, r9
 800a2c8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a2cc:	f1bc 0f09 	cmp.w	ip, #9
 800a2d0:	d81c      	bhi.n	800a30c <_strtoul_l.constprop.0+0x94>
 800a2d2:	4664      	mov	r4, ip
 800a2d4:	42a3      	cmp	r3, r4
 800a2d6:	dd2a      	ble.n	800a32e <_strtoul_l.constprop.0+0xb6>
 800a2d8:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 800a2dc:	d007      	beq.n	800a2ee <_strtoul_l.constprop.0+0x76>
 800a2de:	4580      	cmp	r8, r0
 800a2e0:	d322      	bcc.n	800a328 <_strtoul_l.constprop.0+0xb0>
 800a2e2:	d101      	bne.n	800a2e8 <_strtoul_l.constprop.0+0x70>
 800a2e4:	45a1      	cmp	r9, r4
 800a2e6:	db1f      	blt.n	800a328 <_strtoul_l.constprop.0+0xb0>
 800a2e8:	2601      	movs	r6, #1
 800a2ea:	fb00 4003 	mla	r0, r0, r3, r4
 800a2ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a2f2:	e7e9      	b.n	800a2c8 <_strtoul_l.constprop.0+0x50>
 800a2f4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a2f6:	bf04      	itt	eq
 800a2f8:	782c      	ldrbeq	r4, [r5, #0]
 800a2fa:	1c85      	addeq	r5, r0, #2
 800a2fc:	e7cd      	b.n	800a29a <_strtoul_l.constprop.0+0x22>
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d1d8      	bne.n	800a2b4 <_strtoul_l.constprop.0+0x3c>
 800a302:	2c30      	cmp	r4, #48	@ 0x30
 800a304:	bf0c      	ite	eq
 800a306:	2308      	moveq	r3, #8
 800a308:	230a      	movne	r3, #10
 800a30a:	e7d3      	b.n	800a2b4 <_strtoul_l.constprop.0+0x3c>
 800a30c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a310:	f1bc 0f19 	cmp.w	ip, #25
 800a314:	d801      	bhi.n	800a31a <_strtoul_l.constprop.0+0xa2>
 800a316:	3c37      	subs	r4, #55	@ 0x37
 800a318:	e7dc      	b.n	800a2d4 <_strtoul_l.constprop.0+0x5c>
 800a31a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a31e:	f1bc 0f19 	cmp.w	ip, #25
 800a322:	d804      	bhi.n	800a32e <_strtoul_l.constprop.0+0xb6>
 800a324:	3c57      	subs	r4, #87	@ 0x57
 800a326:	e7d5      	b.n	800a2d4 <_strtoul_l.constprop.0+0x5c>
 800a328:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 800a32c:	e7df      	b.n	800a2ee <_strtoul_l.constprop.0+0x76>
 800a32e:	1c73      	adds	r3, r6, #1
 800a330:	d106      	bne.n	800a340 <_strtoul_l.constprop.0+0xc8>
 800a332:	2322      	movs	r3, #34	@ 0x22
 800a334:	4630      	mov	r0, r6
 800a336:	f8ce 3000 	str.w	r3, [lr]
 800a33a:	b932      	cbnz	r2, 800a34a <_strtoul_l.constprop.0+0xd2>
 800a33c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a340:	b107      	cbz	r7, 800a344 <_strtoul_l.constprop.0+0xcc>
 800a342:	4240      	negs	r0, r0
 800a344:	2a00      	cmp	r2, #0
 800a346:	d0f9      	beq.n	800a33c <_strtoul_l.constprop.0+0xc4>
 800a348:	b106      	cbz	r6, 800a34c <_strtoul_l.constprop.0+0xd4>
 800a34a:	1e69      	subs	r1, r5, #1
 800a34c:	6011      	str	r1, [r2, #0]
 800a34e:	e7f5      	b.n	800a33c <_strtoul_l.constprop.0+0xc4>
 800a350:	0800af61 	.word	0x0800af61

0800a354 <_strtoul_r>:
 800a354:	f7ff bf90 	b.w	800a278 <_strtoul_l.constprop.0>

0800a358 <__swbuf_r>:
 800a358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a35a:	460e      	mov	r6, r1
 800a35c:	4614      	mov	r4, r2
 800a35e:	4605      	mov	r5, r0
 800a360:	b118      	cbz	r0, 800a36a <__swbuf_r+0x12>
 800a362:	6a03      	ldr	r3, [r0, #32]
 800a364:	b90b      	cbnz	r3, 800a36a <__swbuf_r+0x12>
 800a366:	f7fc f96f 	bl	8006648 <__sinit>
 800a36a:	69a3      	ldr	r3, [r4, #24]
 800a36c:	60a3      	str	r3, [r4, #8]
 800a36e:	89a3      	ldrh	r3, [r4, #12]
 800a370:	071a      	lsls	r2, r3, #28
 800a372:	d501      	bpl.n	800a378 <__swbuf_r+0x20>
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	b943      	cbnz	r3, 800a38a <__swbuf_r+0x32>
 800a378:	4621      	mov	r1, r4
 800a37a:	4628      	mov	r0, r5
 800a37c:	f000 f82a 	bl	800a3d4 <__swsetup_r>
 800a380:	b118      	cbz	r0, 800a38a <__swbuf_r+0x32>
 800a382:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a386:	4638      	mov	r0, r7
 800a388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a38a:	6823      	ldr	r3, [r4, #0]
 800a38c:	6922      	ldr	r2, [r4, #16]
 800a38e:	b2f6      	uxtb	r6, r6
 800a390:	1a98      	subs	r0, r3, r2
 800a392:	6963      	ldr	r3, [r4, #20]
 800a394:	4637      	mov	r7, r6
 800a396:	4283      	cmp	r3, r0
 800a398:	dc05      	bgt.n	800a3a6 <__swbuf_r+0x4e>
 800a39a:	4621      	mov	r1, r4
 800a39c:	4628      	mov	r0, r5
 800a39e:	f7ff fa2b 	bl	80097f8 <_fflush_r>
 800a3a2:	2800      	cmp	r0, #0
 800a3a4:	d1ed      	bne.n	800a382 <__swbuf_r+0x2a>
 800a3a6:	68a3      	ldr	r3, [r4, #8]
 800a3a8:	3b01      	subs	r3, #1
 800a3aa:	60a3      	str	r3, [r4, #8]
 800a3ac:	6823      	ldr	r3, [r4, #0]
 800a3ae:	1c5a      	adds	r2, r3, #1
 800a3b0:	6022      	str	r2, [r4, #0]
 800a3b2:	701e      	strb	r6, [r3, #0]
 800a3b4:	6962      	ldr	r2, [r4, #20]
 800a3b6:	1c43      	adds	r3, r0, #1
 800a3b8:	429a      	cmp	r2, r3
 800a3ba:	d004      	beq.n	800a3c6 <__swbuf_r+0x6e>
 800a3bc:	89a3      	ldrh	r3, [r4, #12]
 800a3be:	07db      	lsls	r3, r3, #31
 800a3c0:	d5e1      	bpl.n	800a386 <__swbuf_r+0x2e>
 800a3c2:	2e0a      	cmp	r6, #10
 800a3c4:	d1df      	bne.n	800a386 <__swbuf_r+0x2e>
 800a3c6:	4621      	mov	r1, r4
 800a3c8:	4628      	mov	r0, r5
 800a3ca:	f7ff fa15 	bl	80097f8 <_fflush_r>
 800a3ce:	2800      	cmp	r0, #0
 800a3d0:	d0d9      	beq.n	800a386 <__swbuf_r+0x2e>
 800a3d2:	e7d6      	b.n	800a382 <__swbuf_r+0x2a>

0800a3d4 <__swsetup_r>:
 800a3d4:	b538      	push	{r3, r4, r5, lr}
 800a3d6:	4b29      	ldr	r3, [pc, #164]	@ (800a47c <__swsetup_r+0xa8>)
 800a3d8:	4605      	mov	r5, r0
 800a3da:	6818      	ldr	r0, [r3, #0]
 800a3dc:	460c      	mov	r4, r1
 800a3de:	b118      	cbz	r0, 800a3e8 <__swsetup_r+0x14>
 800a3e0:	6a03      	ldr	r3, [r0, #32]
 800a3e2:	b90b      	cbnz	r3, 800a3e8 <__swsetup_r+0x14>
 800a3e4:	f7fc f930 	bl	8006648 <__sinit>
 800a3e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3ec:	0719      	lsls	r1, r3, #28
 800a3ee:	d422      	bmi.n	800a436 <__swsetup_r+0x62>
 800a3f0:	06da      	lsls	r2, r3, #27
 800a3f2:	d407      	bmi.n	800a404 <__swsetup_r+0x30>
 800a3f4:	2209      	movs	r2, #9
 800a3f6:	602a      	str	r2, [r5, #0]
 800a3f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a3fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a400:	81a3      	strh	r3, [r4, #12]
 800a402:	e033      	b.n	800a46c <__swsetup_r+0x98>
 800a404:	0758      	lsls	r0, r3, #29
 800a406:	d512      	bpl.n	800a42e <__swsetup_r+0x5a>
 800a408:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a40a:	b141      	cbz	r1, 800a41e <__swsetup_r+0x4a>
 800a40c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a410:	4299      	cmp	r1, r3
 800a412:	d002      	beq.n	800a41a <__swsetup_r+0x46>
 800a414:	4628      	mov	r0, r5
 800a416:	f7fd ff4b 	bl	80082b0 <_free_r>
 800a41a:	2300      	movs	r3, #0
 800a41c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a41e:	89a3      	ldrh	r3, [r4, #12]
 800a420:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a424:	81a3      	strh	r3, [r4, #12]
 800a426:	2300      	movs	r3, #0
 800a428:	6063      	str	r3, [r4, #4]
 800a42a:	6923      	ldr	r3, [r4, #16]
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	89a3      	ldrh	r3, [r4, #12]
 800a430:	f043 0308 	orr.w	r3, r3, #8
 800a434:	81a3      	strh	r3, [r4, #12]
 800a436:	6923      	ldr	r3, [r4, #16]
 800a438:	b94b      	cbnz	r3, 800a44e <__swsetup_r+0x7a>
 800a43a:	89a3      	ldrh	r3, [r4, #12]
 800a43c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a444:	d003      	beq.n	800a44e <__swsetup_r+0x7a>
 800a446:	4621      	mov	r1, r4
 800a448:	4628      	mov	r0, r5
 800a44a:	f000 f84b 	bl	800a4e4 <__smakebuf_r>
 800a44e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a452:	f013 0201 	ands.w	r2, r3, #1
 800a456:	d00a      	beq.n	800a46e <__swsetup_r+0x9a>
 800a458:	2200      	movs	r2, #0
 800a45a:	60a2      	str	r2, [r4, #8]
 800a45c:	6962      	ldr	r2, [r4, #20]
 800a45e:	4252      	negs	r2, r2
 800a460:	61a2      	str	r2, [r4, #24]
 800a462:	6922      	ldr	r2, [r4, #16]
 800a464:	b942      	cbnz	r2, 800a478 <__swsetup_r+0xa4>
 800a466:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a46a:	d1c5      	bne.n	800a3f8 <__swsetup_r+0x24>
 800a46c:	bd38      	pop	{r3, r4, r5, pc}
 800a46e:	0799      	lsls	r1, r3, #30
 800a470:	bf58      	it	pl
 800a472:	6962      	ldrpl	r2, [r4, #20]
 800a474:	60a2      	str	r2, [r4, #8]
 800a476:	e7f4      	b.n	800a462 <__swsetup_r+0x8e>
 800a478:	2000      	movs	r0, #0
 800a47a:	e7f7      	b.n	800a46c <__swsetup_r+0x98>
 800a47c:	200001ac 	.word	0x200001ac

0800a480 <__ascii_wctomb>:
 800a480:	4603      	mov	r3, r0
 800a482:	4608      	mov	r0, r1
 800a484:	b141      	cbz	r1, 800a498 <__ascii_wctomb+0x18>
 800a486:	2aff      	cmp	r2, #255	@ 0xff
 800a488:	d904      	bls.n	800a494 <__ascii_wctomb+0x14>
 800a48a:	228a      	movs	r2, #138	@ 0x8a
 800a48c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a490:	601a      	str	r2, [r3, #0]
 800a492:	4770      	bx	lr
 800a494:	2001      	movs	r0, #1
 800a496:	700a      	strb	r2, [r1, #0]
 800a498:	4770      	bx	lr

0800a49a <__swhatbuf_r>:
 800a49a:	b570      	push	{r4, r5, r6, lr}
 800a49c:	460c      	mov	r4, r1
 800a49e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4a2:	4615      	mov	r5, r2
 800a4a4:	2900      	cmp	r1, #0
 800a4a6:	461e      	mov	r6, r3
 800a4a8:	b096      	sub	sp, #88	@ 0x58
 800a4aa:	da0c      	bge.n	800a4c6 <__swhatbuf_r+0x2c>
 800a4ac:	89a3      	ldrh	r3, [r4, #12]
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a4b4:	bf14      	ite	ne
 800a4b6:	2340      	movne	r3, #64	@ 0x40
 800a4b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a4bc:	2000      	movs	r0, #0
 800a4be:	6031      	str	r1, [r6, #0]
 800a4c0:	602b      	str	r3, [r5, #0]
 800a4c2:	b016      	add	sp, #88	@ 0x58
 800a4c4:	bd70      	pop	{r4, r5, r6, pc}
 800a4c6:	466a      	mov	r2, sp
 800a4c8:	f000 f862 	bl	800a590 <_fstat_r>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	dbed      	blt.n	800a4ac <__swhatbuf_r+0x12>
 800a4d0:	9901      	ldr	r1, [sp, #4]
 800a4d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a4d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a4da:	4259      	negs	r1, r3
 800a4dc:	4159      	adcs	r1, r3
 800a4de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4e2:	e7eb      	b.n	800a4bc <__swhatbuf_r+0x22>

0800a4e4 <__smakebuf_r>:
 800a4e4:	898b      	ldrh	r3, [r1, #12]
 800a4e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a4e8:	079d      	lsls	r5, r3, #30
 800a4ea:	4606      	mov	r6, r0
 800a4ec:	460c      	mov	r4, r1
 800a4ee:	d507      	bpl.n	800a500 <__smakebuf_r+0x1c>
 800a4f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a4f4:	6023      	str	r3, [r4, #0]
 800a4f6:	6123      	str	r3, [r4, #16]
 800a4f8:	2301      	movs	r3, #1
 800a4fa:	6163      	str	r3, [r4, #20]
 800a4fc:	b003      	add	sp, #12
 800a4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a500:	466a      	mov	r2, sp
 800a502:	ab01      	add	r3, sp, #4
 800a504:	f7ff ffc9 	bl	800a49a <__swhatbuf_r>
 800a508:	9f00      	ldr	r7, [sp, #0]
 800a50a:	4605      	mov	r5, r0
 800a50c:	4639      	mov	r1, r7
 800a50e:	4630      	mov	r0, r6
 800a510:	f7fe feda 	bl	80092c8 <_malloc_r>
 800a514:	b948      	cbnz	r0, 800a52a <__smakebuf_r+0x46>
 800a516:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a51a:	059a      	lsls	r2, r3, #22
 800a51c:	d4ee      	bmi.n	800a4fc <__smakebuf_r+0x18>
 800a51e:	f023 0303 	bic.w	r3, r3, #3
 800a522:	f043 0302 	orr.w	r3, r3, #2
 800a526:	81a3      	strh	r3, [r4, #12]
 800a528:	e7e2      	b.n	800a4f0 <__smakebuf_r+0xc>
 800a52a:	89a3      	ldrh	r3, [r4, #12]
 800a52c:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a530:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a534:	81a3      	strh	r3, [r4, #12]
 800a536:	9b01      	ldr	r3, [sp, #4]
 800a538:	6020      	str	r0, [r4, #0]
 800a53a:	b15b      	cbz	r3, 800a554 <__smakebuf_r+0x70>
 800a53c:	4630      	mov	r0, r6
 800a53e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a542:	f000 f837 	bl	800a5b4 <_isatty_r>
 800a546:	b128      	cbz	r0, 800a554 <__smakebuf_r+0x70>
 800a548:	89a3      	ldrh	r3, [r4, #12]
 800a54a:	f023 0303 	bic.w	r3, r3, #3
 800a54e:	f043 0301 	orr.w	r3, r3, #1
 800a552:	81a3      	strh	r3, [r4, #12]
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	431d      	orrs	r5, r3
 800a558:	81a5      	strh	r5, [r4, #12]
 800a55a:	e7cf      	b.n	800a4fc <__smakebuf_r+0x18>

0800a55c <memmove>:
 800a55c:	4288      	cmp	r0, r1
 800a55e:	b510      	push	{r4, lr}
 800a560:	eb01 0402 	add.w	r4, r1, r2
 800a564:	d902      	bls.n	800a56c <memmove+0x10>
 800a566:	4284      	cmp	r4, r0
 800a568:	4623      	mov	r3, r4
 800a56a:	d807      	bhi.n	800a57c <memmove+0x20>
 800a56c:	1e43      	subs	r3, r0, #1
 800a56e:	42a1      	cmp	r1, r4
 800a570:	d008      	beq.n	800a584 <memmove+0x28>
 800a572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a57a:	e7f8      	b.n	800a56e <memmove+0x12>
 800a57c:	4601      	mov	r1, r0
 800a57e:	4402      	add	r2, r0
 800a580:	428a      	cmp	r2, r1
 800a582:	d100      	bne.n	800a586 <memmove+0x2a>
 800a584:	bd10      	pop	{r4, pc}
 800a586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a58e:	e7f7      	b.n	800a580 <memmove+0x24>

0800a590 <_fstat_r>:
 800a590:	b538      	push	{r3, r4, r5, lr}
 800a592:	2300      	movs	r3, #0
 800a594:	4d06      	ldr	r5, [pc, #24]	@ (800a5b0 <_fstat_r+0x20>)
 800a596:	4604      	mov	r4, r0
 800a598:	4608      	mov	r0, r1
 800a59a:	4611      	mov	r1, r2
 800a59c:	602b      	str	r3, [r5, #0]
 800a59e:	f7f7 f979 	bl	8001894 <_fstat>
 800a5a2:	1c43      	adds	r3, r0, #1
 800a5a4:	d102      	bne.n	800a5ac <_fstat_r+0x1c>
 800a5a6:	682b      	ldr	r3, [r5, #0]
 800a5a8:	b103      	cbz	r3, 800a5ac <_fstat_r+0x1c>
 800a5aa:	6023      	str	r3, [r4, #0]
 800a5ac:	bd38      	pop	{r3, r4, r5, pc}
 800a5ae:	bf00      	nop
 800a5b0:	20000c0c 	.word	0x20000c0c

0800a5b4 <_isatty_r>:
 800a5b4:	b538      	push	{r3, r4, r5, lr}
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	4d05      	ldr	r5, [pc, #20]	@ (800a5d0 <_isatty_r+0x1c>)
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	4608      	mov	r0, r1
 800a5be:	602b      	str	r3, [r5, #0]
 800a5c0:	f7f7 f977 	bl	80018b2 <_isatty>
 800a5c4:	1c43      	adds	r3, r0, #1
 800a5c6:	d102      	bne.n	800a5ce <_isatty_r+0x1a>
 800a5c8:	682b      	ldr	r3, [r5, #0]
 800a5ca:	b103      	cbz	r3, 800a5ce <_isatty_r+0x1a>
 800a5cc:	6023      	str	r3, [r4, #0]
 800a5ce:	bd38      	pop	{r3, r4, r5, pc}
 800a5d0:	20000c0c 	.word	0x20000c0c

0800a5d4 <_sbrk_r>:
 800a5d4:	b538      	push	{r3, r4, r5, lr}
 800a5d6:	2300      	movs	r3, #0
 800a5d8:	4d05      	ldr	r5, [pc, #20]	@ (800a5f0 <_sbrk_r+0x1c>)
 800a5da:	4604      	mov	r4, r0
 800a5dc:	4608      	mov	r0, r1
 800a5de:	602b      	str	r3, [r5, #0]
 800a5e0:	f7f7 f97e 	bl	80018e0 <_sbrk>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_sbrk_r+0x1a>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_sbrk_r+0x1a>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20000c0c 	.word	0x20000c0c

0800a5f4 <__assert_func>:
 800a5f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a5f6:	4614      	mov	r4, r2
 800a5f8:	461a      	mov	r2, r3
 800a5fa:	4b09      	ldr	r3, [pc, #36]	@ (800a620 <__assert_func+0x2c>)
 800a5fc:	4605      	mov	r5, r0
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68d8      	ldr	r0, [r3, #12]
 800a602:	b954      	cbnz	r4, 800a61a <__assert_func+0x26>
 800a604:	4b07      	ldr	r3, [pc, #28]	@ (800a624 <__assert_func+0x30>)
 800a606:	461c      	mov	r4, r3
 800a608:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a60c:	9100      	str	r1, [sp, #0]
 800a60e:	462b      	mov	r3, r5
 800a610:	4905      	ldr	r1, [pc, #20]	@ (800a628 <__assert_func+0x34>)
 800a612:	f000 f829 	bl	800a668 <fiprintf>
 800a616:	f000 f839 	bl	800a68c <abort>
 800a61a:	4b04      	ldr	r3, [pc, #16]	@ (800a62c <__assert_func+0x38>)
 800a61c:	e7f4      	b.n	800a608 <__assert_func+0x14>
 800a61e:	bf00      	nop
 800a620:	200001ac 	.word	0x200001ac
 800a624:	0800b30b 	.word	0x0800b30b
 800a628:	0800b2dd 	.word	0x0800b2dd
 800a62c:	0800b2d0 	.word	0x0800b2d0

0800a630 <_calloc_r>:
 800a630:	b570      	push	{r4, r5, r6, lr}
 800a632:	fba1 5402 	umull	r5, r4, r1, r2
 800a636:	b93c      	cbnz	r4, 800a648 <_calloc_r+0x18>
 800a638:	4629      	mov	r1, r5
 800a63a:	f7fe fe45 	bl	80092c8 <_malloc_r>
 800a63e:	4606      	mov	r6, r0
 800a640:	b928      	cbnz	r0, 800a64e <_calloc_r+0x1e>
 800a642:	2600      	movs	r6, #0
 800a644:	4630      	mov	r0, r6
 800a646:	bd70      	pop	{r4, r5, r6, pc}
 800a648:	220c      	movs	r2, #12
 800a64a:	6002      	str	r2, [r0, #0]
 800a64c:	e7f9      	b.n	800a642 <_calloc_r+0x12>
 800a64e:	462a      	mov	r2, r5
 800a650:	4621      	mov	r1, r4
 800a652:	f7fc ff2f 	bl	80074b4 <memset>
 800a656:	e7f5      	b.n	800a644 <_calloc_r+0x14>

0800a658 <_malloc_usable_size_r>:
 800a658:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a65c:	1f18      	subs	r0, r3, #4
 800a65e:	2b00      	cmp	r3, #0
 800a660:	bfbc      	itt	lt
 800a662:	580b      	ldrlt	r3, [r1, r0]
 800a664:	18c0      	addlt	r0, r0, r3
 800a666:	4770      	bx	lr

0800a668 <fiprintf>:
 800a668:	b40e      	push	{r1, r2, r3}
 800a66a:	b503      	push	{r0, r1, lr}
 800a66c:	4601      	mov	r1, r0
 800a66e:	ab03      	add	r3, sp, #12
 800a670:	4805      	ldr	r0, [pc, #20]	@ (800a688 <fiprintf+0x20>)
 800a672:	f853 2b04 	ldr.w	r2, [r3], #4
 800a676:	6800      	ldr	r0, [r0, #0]
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f7fe fce3 	bl	8009044 <_vfiprintf_r>
 800a67e:	b002      	add	sp, #8
 800a680:	f85d eb04 	ldr.w	lr, [sp], #4
 800a684:	b003      	add	sp, #12
 800a686:	4770      	bx	lr
 800a688:	200001ac 	.word	0x200001ac

0800a68c <abort>:
 800a68c:	2006      	movs	r0, #6
 800a68e:	b508      	push	{r3, lr}
 800a690:	f000 f82c 	bl	800a6ec <raise>
 800a694:	2001      	movs	r0, #1
 800a696:	f7f7 f8ae 	bl	80017f6 <_exit>

0800a69a <_raise_r>:
 800a69a:	291f      	cmp	r1, #31
 800a69c:	b538      	push	{r3, r4, r5, lr}
 800a69e:	4605      	mov	r5, r0
 800a6a0:	460c      	mov	r4, r1
 800a6a2:	d904      	bls.n	800a6ae <_raise_r+0x14>
 800a6a4:	2316      	movs	r3, #22
 800a6a6:	6003      	str	r3, [r0, #0]
 800a6a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6ac:	bd38      	pop	{r3, r4, r5, pc}
 800a6ae:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a6b0:	b112      	cbz	r2, 800a6b8 <_raise_r+0x1e>
 800a6b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6b6:	b94b      	cbnz	r3, 800a6cc <_raise_r+0x32>
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	f000 f831 	bl	800a720 <_getpid_r>
 800a6be:	4622      	mov	r2, r4
 800a6c0:	4601      	mov	r1, r0
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6c8:	f000 b818 	b.w	800a6fc <_kill_r>
 800a6cc:	2b01      	cmp	r3, #1
 800a6ce:	d00a      	beq.n	800a6e6 <_raise_r+0x4c>
 800a6d0:	1c59      	adds	r1, r3, #1
 800a6d2:	d103      	bne.n	800a6dc <_raise_r+0x42>
 800a6d4:	2316      	movs	r3, #22
 800a6d6:	6003      	str	r3, [r0, #0]
 800a6d8:	2001      	movs	r0, #1
 800a6da:	e7e7      	b.n	800a6ac <_raise_r+0x12>
 800a6dc:	2100      	movs	r1, #0
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6e4:	4798      	blx	r3
 800a6e6:	2000      	movs	r0, #0
 800a6e8:	e7e0      	b.n	800a6ac <_raise_r+0x12>
	...

0800a6ec <raise>:
 800a6ec:	4b02      	ldr	r3, [pc, #8]	@ (800a6f8 <raise+0xc>)
 800a6ee:	4601      	mov	r1, r0
 800a6f0:	6818      	ldr	r0, [r3, #0]
 800a6f2:	f7ff bfd2 	b.w	800a69a <_raise_r>
 800a6f6:	bf00      	nop
 800a6f8:	200001ac 	.word	0x200001ac

0800a6fc <_kill_r>:
 800a6fc:	b538      	push	{r3, r4, r5, lr}
 800a6fe:	2300      	movs	r3, #0
 800a700:	4d06      	ldr	r5, [pc, #24]	@ (800a71c <_kill_r+0x20>)
 800a702:	4604      	mov	r4, r0
 800a704:	4608      	mov	r0, r1
 800a706:	4611      	mov	r1, r2
 800a708:	602b      	str	r3, [r5, #0]
 800a70a:	f7f7 f864 	bl	80017d6 <_kill>
 800a70e:	1c43      	adds	r3, r0, #1
 800a710:	d102      	bne.n	800a718 <_kill_r+0x1c>
 800a712:	682b      	ldr	r3, [r5, #0]
 800a714:	b103      	cbz	r3, 800a718 <_kill_r+0x1c>
 800a716:	6023      	str	r3, [r4, #0]
 800a718:	bd38      	pop	{r3, r4, r5, pc}
 800a71a:	bf00      	nop
 800a71c:	20000c0c 	.word	0x20000c0c

0800a720 <_getpid_r>:
 800a720:	f7f7 b852 	b.w	80017c8 <_getpid>

0800a724 <_init>:
 800a724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a726:	bf00      	nop
 800a728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a72a:	bc08      	pop	{r3}
 800a72c:	469e      	mov	lr, r3
 800a72e:	4770      	bx	lr

0800a730 <_fini>:
 800a730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a732:	bf00      	nop
 800a734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a736:	bc08      	pop	{r3}
 800a738:	469e      	mov	lr, r3
 800a73a:	4770      	bx	lr
